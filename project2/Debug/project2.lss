
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000019be  00001a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000163  0080011e  0080011e  00001a70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000339d  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001583  00000000  00000000  00005251  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d7f  00000000  00000000  000067d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  00008554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc4  00000000  00000000  00008e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ea4  00000000  00000000  00009e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000bce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__ctors_end>
       4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      14:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_5>
      18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      40:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_16>
      44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      50:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_20>
      54:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_21>
      58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2465>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2432>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
      b4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 53     ake Project by S
      c4:	65 61 6e 20 4c 69 6d 00                             ean Lim.

000000cc <__c.2430>:
      cc:	53 6e 61 6b 65 00                                   Snake.

000000d2 <__c.2034>:
      d2:	53 63 6f 72 65 3a 20 25 6c 64 00                    Score: %ld.

000000dd <numbers>:
      dd:	48 01 45 01 41 01 3d 01 39 01 35 01 31 01 2d 01     H.E.A.=.9.5.1.-.
      ed:	29 01 25 01                                         ).%.

000000f1 <letters>:
      f1:	b7 01 b3 01 af 01 ab 01 a7 01 a3 01 9f 01 9b 01     ................
     101:	98 01 94 01 90 01 8c 01 87 01 83 01 7f 01 7b 01     ..............{.
     111:	76 01 72 01 6e 01 69 01 65 01 60 01 5b 01 56 01     v.r.n.i.e.`.[.V.
     121:	51 01 4c 01                                         Q.L.

00000125 <cols_9>:
     125:	64 92 92 7d                                         d..}

00000129 <cols_8>:
     129:	6c 92 92 6d                                         l..m

0000012d <cols_7>:
     12d:	80 9e a0 c1                                         ....

00000131 <cols_6>:
     131:	7c 92 92 4d                                         |..M

00000135 <cols_5>:
     135:	e4 a2 a2 9d                                         ....

00000139 <cols_4>:
     139:	18 28 48 ff                                         .(H.

0000013d <cols_3>:
     13d:	44 92 92 6d                                         D..m

00000141 <cols_2>:
     141:	46 8a 92 63                                         F..c

00000145 <cols_1>:
     145:	42 fe 03                                            B..

00000148 <cols_0>:
     148:	7c 92 a2 7d                                         |..}

0000014c <cols_Z>:
     14c:	86 8a 92 a2 c3                                      .....

00000151 <cols_Y>:
     151:	e0 10 0e 10 e1                                      .....

00000156 <cols_X>:
     156:	c6 28 10 28 c7                                      .(.(.

0000015b <cols_W>:
     15b:	fc 02 1c 02 fd                                      .....

00000160 <cols_V>:
     160:	f8 04 02 04 f9                                      .....

00000165 <cols_U>:
     165:	fc 02 02 fd                                         ....

00000169 <cols_T>:
     169:	80 80 fe 80 81                                      .....

0000016e <cols_S>:
     16e:	64 92 92 4d                                         d..M

00000172 <cols_R>:
     172:	fe 90 98 67                                         ...g

00000176 <cols_Q>:
     176:	7c 82 8a 7c 03                                      |..|.

0000017b <cols_P>:
     17b:	fe 90 90 61                                         ...a

0000017f <cols_O>:
     17f:	7c 82 82 7d                                         |..}

00000183 <cols_N>:
     183:	fe 20 10 ff                                         . ..

00000187 <cols_M>:
     187:	fe 40 30 40 ff                                      .@0@.

0000018c <cols_L>:
     18c:	fe 02 02 03                                         ....

00000190 <cols_K>:
     190:	fe 10 28 c7                                         ..(.

00000194 <cols_J>:
     194:	04 02 02 fd                                         ....

00000198 <cols_I>:
     198:	82 fe 83                                            ...

0000019b <cols_H>:
     19b:	fe 10 10 ff                                         ....

0000019f <cols_G>:
     19f:	7c 82 92 5d                                         |..]

000001a3 <cols_F>:
     1a3:	fe 90 90 81                                         ....

000001a7 <cols_E>:
     1a7:	fe 92 92 83                                         ....

000001ab <cols_D>:
     1ab:	fe 82 82 7d                                         ...}

000001af <cols_C>:
     1af:	7c 82 82 45                                         |..E

000001b3 <cols_B>:
     1b3:	fe 92 92 6d                                         ...m

000001b7 <cols_A>:
     1b7:	7e 90 90 7f                                         ~...

000001bb <__c.2054>:
     1bb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001c2 <__c.2050>:
     1c2:	1b 5b 25 64 6d 00                                   .[%dm.

000001c8 <__c.2040>:
     1c8:	1b 5b 32 4a 00                                      .[2J.

000001cd <__c.2025>:
     1cd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001d6 <__ctors_end>:
     1d6:	11 24       	eor	r1, r1
     1d8:	1f be       	out	0x3f, r1	; 63
     1da:	cf ef       	ldi	r28, 0xFF	; 255
     1dc:	d8 e0       	ldi	r29, 0x08	; 8
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	cd bf       	out	0x3d, r28	; 61

000001e2 <__do_copy_data>:
     1e2:	11 e0       	ldi	r17, 0x01	; 1
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	ee eb       	ldi	r30, 0xBE	; 190
     1ea:	f9 e1       	ldi	r31, 0x19	; 25
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__do_copy_data+0x10>
     1ee:	05 90       	lpm	r0, Z+
     1f0:	0d 92       	st	X+, r0
     1f2:	ae 31       	cpi	r26, 0x1E	; 30
     1f4:	b1 07       	cpc	r27, r17
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <__do_copy_data+0xc>

000001f8 <__do_clear_bss>:
     1f8:	22 e0       	ldi	r18, 0x02	; 2
     1fa:	ae e1       	ldi	r26, 0x1E	; 30
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <.do_clear_bss_start>

00000200 <.do_clear_bss_loop>:
     200:	1d 92       	st	X+, r1

00000202 <.do_clear_bss_start>:
     202:	a1 38       	cpi	r26, 0x81	; 129
     204:	b2 07       	cpc	r27, r18
     206:	e1 f7       	brne	.-8      	; 0x200 <.do_clear_bss_loop>
     208:	0e 94 84 04 	call	0x908	; 0x908 <main>
     20c:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <_exit>

00000210 <__bad_interrupt>:
     210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     214:	e8 e6       	ldi	r30, 0x68	; 104
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	82 60       	ori	r24, 0x02	; 2
     21c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     21e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     220:	ec e6       	ldi	r30, 0x6C	; 108
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	8f 60       	ori	r24, 0x0F	; 15
     228:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     22a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
     22e:	08 95       	ret

00000230 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     230:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
     234:	08 95       	ret

00000236 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     236:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     23a:	18 16       	cp	r1, r24
     23c:	3c f5       	brge	.+78     	; 0x28c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     23e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     242:	6f b7       	in	r22, 0x3f	; 63
		cli();
     244:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     246:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__data_end>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	b4 f0       	brlt	.+44     	; 0x27a <button_pushed+0x44>
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     254:	f9 01       	movw	r30, r18
     256:	e1 5e       	subi	r30, 0xE1	; 225
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	40 81       	ld	r20, Z
     25c:	f9 01       	movw	r30, r18
     25e:	e2 5e       	subi	r30, 0xE2	; 226
     260:	fe 4f       	sbci	r31, 0xFE	; 254
     262:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     264:	9f 5f       	subi	r25, 0xFF	; 255
     266:	29 2f       	mov	r18, r25
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_end>
     26e:	04 2e       	mov	r0, r20
     270:	00 0c       	add	r0, r0
     272:	55 0b       	sbc	r21, r21
     274:	24 17       	cp	r18, r20
     276:	35 07       	cpc	r19, r21
     278:	6c f3       	brlt	.-38     	; 0x254 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     27a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__data_end>
     27e:	91 50       	subi	r25, 0x01	; 1
     280:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <__data_end>
		
		if(interrupts_were_enabled) {
     284:	66 23       	and	r22, r22
     286:	1c f4       	brge	.+6      	; 0x28e <button_pushed+0x58>
			// Turn them back on again
			sei();
     288:	78 94       	sei
     28a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     28c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     28e:	08 95       	ret

00000290 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2ae:	43 b1       	in	r20, 0x03	; 3
     2b0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2b2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     2b6:	88 30       	cpi	r24, 0x08	; 8
     2b8:	64 f5       	brge	.+88     	; 0x312 <__vector_5+0x82>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2be:	64 2f       	mov	r22, r20
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	9b 01       	movw	r18, r22
     2c4:	08 2e       	mov	r0, r24
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <__vector_5+0x3c>
     2c8:	35 95       	asr	r19
     2ca:	27 95       	ror	r18
     2cc:	0a 94       	dec	r0
     2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <__vector_5+0x38>
     2d0:	20 ff       	sbrs	r18, 0
     2d2:	1b c0       	rjmp	.+54     	; 0x30a <__vector_5+0x7a>
     2d4:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <last_button_state>
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	08 2e       	mov	r0, r24
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__vector_5+0x52>
     2de:	35 95       	asr	r19
     2e0:	27 95       	ror	r18
     2e2:	0a 94       	dec	r0
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <__vector_5+0x4e>
     2e6:	20 fd       	sbrc	r18, 0
     2e8:	10 c0       	rjmp	.+32     	; 0x30a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2ea:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end>
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	2e 0f       	add	r18, r30
     2f2:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <__data_end>
     2f6:	0e 2e       	mov	r0, r30
     2f8:	00 0c       	add	r0, r0
     2fa:	ff 0b       	sbc	r31, r31
     2fc:	e1 5e       	subi	r30, 0xE1	; 225
     2fe:	fe 4f       	sbci	r31, 0xFE	; 254
     300:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     302:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     306:	28 30       	cpi	r18, 0x08	; 8
     308:	24 f4       	brge	.+8      	; 0x312 <__vector_5+0x82>
     30a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     30c:	84 30       	cpi	r24, 0x04	; 4
     30e:	91 05       	cpc	r25, r1
     310:	c1 f6       	brne	.-80     	; 0x2c2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     312:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <last_button_state>
}
     316:	ff 91       	pop	r31
     318:	ef 91       	pop	r30
     31a:	9f 91       	pop	r25
     31c:	8f 91       	pop	r24
     31e:	7f 91       	pop	r23
     320:	6f 91       	pop	r22
     322:	5f 91       	pop	r21
     324:	4f 91       	pop	r20
     326:	3f 91       	pop	r19
     328:	2f 91       	pop	r18
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <init_food>:
/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
}
     334:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <numFoodItems>
     338:	08 95       	ret

0000033a <food_at>:
     33a:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <numFoodItems>
     33e:	13 16       	cp	r1, r19
     340:	84 f4       	brge	.+32     	; 0x362 <food_at+0x28>
     342:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <foodPositions>
     346:	89 17       	cp	r24, r25
     348:	71 f0       	breq	.+28     	; 0x366 <food_at+0x2c>
     34a:	e0 e6       	ldi	r30, 0x60	; 96
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	03 c0       	rjmp	.+6      	; 0x358 <food_at+0x1e>
     352:	21 91       	ld	r18, Z+
     354:	28 17       	cp	r18, r24
     356:	49 f0       	breq	.+18     	; 0x36a <food_at+0x30>
     358:	9f 5f       	subi	r25, 0xFF	; 255
     35a:	39 13       	cpse	r19, r25
     35c:	fa cf       	rjmp	.-12     	; 0x352 <food_at+0x18>
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	08 95       	ret
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	08 95       	ret
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 95       	ret
     36a:	89 2f       	mov	r24, r25
     36c:	08 95       	ret

0000036e <is_food_at>:
     36e:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	8f 3f       	cpi	r24, 0xFF	; 255
     376:	09 f4       	brne	.+2      	; 0x37a <is_food_at+0xc>
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	89 2f       	mov	r24, r25
     37c:	08 95       	ret

0000037e <add_food_item>:
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <numFoodItems>
     38c:	88 30       	cpi	r24, 0x08	; 8
     38e:	d4 f5       	brge	.+116    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     390:	00 e0       	ldi	r16, 0x00	; 0
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	d0 e0       	ldi	r29, 0x00	; 0
     396:	c0 e0       	ldi	r28, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <add_food_item+0x20>
     39a:	0f 5f       	subi	r16, 0xFF	; 255
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	2c 2f       	mov	r18, r28
     3a0:	cc 0f       	add	r28, r28
     3a2:	33 0b       	sbc	r19, r19
     3a4:	2d 5f       	subi	r18, 0xFD	; 253
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	20 0f       	add	r18, r16
     3aa:	31 1f       	adc	r19, r17
     3ac:	2f 70       	andi	r18, 0x0F	; 15
     3ae:	30 78       	andi	r19, 0x80	; 128
     3b0:	33 23       	and	r19, r19
     3b2:	34 f4       	brge	.+12     	; 0x3c0 <add_food_item+0x42>
     3b4:	21 50       	subi	r18, 0x01	; 1
     3b6:	31 09       	sbc	r19, r1
     3b8:	20 6f       	ori	r18, 0xF0	; 240
     3ba:	3f 6f       	ori	r19, 0xFF	; 255
     3bc:	2f 5f       	subi	r18, 0xFF	; 255
     3be:	3f 4f       	sbci	r19, 0xFF	; 255
     3c0:	82 2f       	mov	r24, r18
     3c2:	c2 2f       	mov	r28, r18
     3c4:	6d 2f       	mov	r22, r29
     3c6:	dd 0f       	add	r29, r29
     3c8:	77 0b       	sbc	r23, r23
     3ca:	6b 5f       	subi	r22, 0xFB	; 251
     3cc:	7f 4f       	sbci	r23, 0xFF	; 255
     3ce:	67 70       	andi	r22, 0x07	; 7
     3d0:	70 78       	andi	r23, 0x80	; 128
     3d2:	77 23       	and	r23, r23
     3d4:	34 f4       	brge	.+12     	; 0x3e2 <add_food_item+0x64>
     3d6:	61 50       	subi	r22, 0x01	; 1
     3d8:	71 09       	sbc	r23, r1
     3da:	68 6f       	ori	r22, 0xF8	; 248
     3dc:	7f 6f       	ori	r23, 0xFF	; 255
     3de:	6f 5f       	subi	r22, 0xFF	; 255
     3e0:	7f 4f       	sbci	r23, 0xFF	; 255
     3e2:	d6 2f       	mov	r29, r22
     3e4:	0e 94 0f 03 	call	0x61e	; 0x61e <position>
     3e8:	f8 2e       	mov	r15, r24
     3ea:	03 36       	cpi	r16, 0x63	; 99
     3ec:	11 05       	cpc	r17, r1
     3ee:	61 f0       	breq	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f0:	0e 94 4b 07 	call	0xe96	; 0xe96 <is_snake_at>
     3f4:	81 11       	cpse	r24, r1
     3f6:	d1 cf       	rjmp	.-94     	; 0x39a <add_food_item+0x1c>
     3f8:	8f 2d       	mov	r24, r15
     3fa:	0e 94 b7 01 	call	0x36e	; 0x36e <is_food_at>
     3fe:	81 11       	cpse	r24, r1
     400:	cc cf       	rjmp	.-104    	; 0x39a <add_food_item+0x1c>
     402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     404:	88 e0       	ldi	r24, 0x08	; 8
     406:	0f c0       	rjmp	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     408:	88 e0       	ldi	r24, 0x08	; 8
     40a:	0d c0       	rjmp	.+26     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     40c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <numFoodItems>
     410:	e8 2f       	mov	r30, r24
     412:	08 2e       	mov	r0, r24
     414:	00 0c       	add	r0, r0
     416:	ff 0b       	sbc	r31, r31
     418:	e1 5a       	subi	r30, 0xA1	; 161
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	f0 82       	st	Z, r15
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <numFoodItems>
     424:	8f 2d       	mov	r24, r15
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	08 95       	ret

00000432 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     432:	88 23       	and	r24, r24
     434:	b4 f0       	brlt	.+44     	; 0x462 <remove_food+0x30>
     436:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <numFoodItems>
     43a:	82 17       	cp	r24, r18
     43c:	94 f4       	brge	.+36     	; 0x462 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	82 17       	cp	r24, r18
     442:	64 f4       	brge	.+24     	; 0x45c <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     444:	e8 2f       	mov	r30, r24
     446:	08 2e       	mov	r0, r24
     448:	00 0c       	add	r0, r0
     44a:	ff 0b       	sbc	r31, r31
     44c:	e1 5a       	subi	r30, 0xA1	; 161
     44e:	fe 4f       	sbci	r31, 0xFE	; 254
     450:	90 81       	ld	r25, Z
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	90 83       	st	Z, r25
     456:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     458:	82 17       	cp	r24, r18
     45a:	a4 f3       	brlt	.-24     	; 0x444 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     45c:	21 50       	subi	r18, 0x01	; 1
     45e:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <numFoodItems>
     462:	08 95       	ret

00000464 <update_display_at_position>:

// Define time interval
int time_elapse = 600;

// Helper function
static void update_display_at_position(PosnType posn, PixelColour colour) {
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	c8 2f       	mov	r28, r24
     46c:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     46e:	0e 94 07 03 	call	0x60e	; 0x60e <y_position>
     472:	d8 2f       	mov	r29, r24
     474:	8c 2f       	mov	r24, r28
     476:	0e 94 04 03 	call	0x608	; 0x608 <x_position>
     47a:	41 2f       	mov	r20, r17
     47c:	6d 2f       	mov	r22, r29
     47e:	0e 94 bd 02 	call	0x57a	; 0x57a <ledmatrix_update_pixel>
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	08 95       	ret

0000048a <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     48e:	0e 94 00 03 	call	0x600	; 0x600 <ledmatrix_clear>
	time_elapse = 600;
     492:	88 e5       	ldi	r24, 0x58	; 88
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_elapse+0x1>
     49a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_elapse>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     49e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <init_snake>
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     4a2:	0e 94 0b 07 	call	0xe16	; 0xe16 <get_snake_head_position>
     4a6:	6f e0       	ldi	r22, 0x0F	; 15
     4a8:	0e 94 32 02 	call	0x464	; 0x464 <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     4ac:	0e 94 14 07 	call	0xe28	; 0xe28 <get_snake_tail_position>
     4b0:	60 ef       	ldi	r22, 0xF0	; 240
     4b2:	0e 94 32 02 	call	0x464	; 0x464 <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     4b6:	0e 94 9a 01 	call	0x334	; 0x334 <init_food>
     4ba:	c3 e0       	ldi	r28, 0x03	; 3
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     4bc:	0e 94 bf 01 	call	0x37e	; 0x37e <add_food_item>
     4c0:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     4c2:	0e 94 09 03 	call	0x612	; 0x612 <is_position_valid>
     4c6:	88 23       	and	r24, r24
     4c8:	21 f0       	breq	.+8      	; 0x4d2 <init_game+0x48>
			update_display_at_position(food_position, FOOD_COLOUR);
     4ca:	63 e3       	ldi	r22, 0x33	; 51
     4cc:	8d 2f       	mov	r24, r29
     4ce:	0e 94 32 02 	call	0x464	; 0x464 <update_display_at_position>
     4d2:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	for(int8_t i = 0; i < 3; i++) {
     4d4:	99 f7       	brne	.-26     	; 0x4bc <init_game+0x32>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <attempt_to_move_snake_forward>:

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     4e4:	0e 94 0b 07 	call	0xe16	; 0xe16 <get_snake_head_position>
     4e8:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     4ea:	0e 94 6e 07 	call	0xedc	; 0xedc <advance_snake_head>
     4ee:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     4f0:	88 23       	and	r24, r24
     4f2:	b4 f1       	brlt	.+108    	; 0x560 <attempt_to_move_snake_forward+0x84>
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
	}
	PosnType new_head_position = get_snake_head_position();
     4f4:	0e 94 0b 07 	call	0xe16	; 0xe16 <get_snake_head_position>
     4f8:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     4fa:	8e ef       	ldi	r24, 0xFE	; 254
     4fc:	8c 0f       	add	r24, r28
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	e8 f4       	brcc	.+58     	; 0x53c <attempt_to_move_snake_forward+0x60>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     502:	81 2f       	mov	r24, r17
     504:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
		remove_food(foodID);
     508:	0e 94 19 02 	call	0x432	; 0x432 <remove_food>
		add_to_score(3);
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 98 04 	call	0x930	; 0x930 <add_to_score>
		time_elapse-=15;
     514:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_elapse>
     518:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <time_elapse+0x1>
     51c:	0f 97       	sbiw	r24, 0x0f	; 15
     51e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_elapse+0x1>
     522:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_elapse>
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     526:	0e 94 bf 01 	call	0x37e	; 0x37e <add_food_item>
     52a:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     52c:	0e 94 09 03 	call	0x612	; 0x612 <is_position_valid>
     530:	88 23       	and	r24, r24
     532:	21 f0       	breq	.+8      	; 0x53c <attempt_to_move_snake_forward+0x60>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     534:	63 e3       	ldi	r22, 0x33	; 51
     536:	80 2f       	mov	r24, r16
     538:	0e 94 32 02 	call	0x464	; 0x464 <update_display_at_position>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     53c:	cd 7f       	andi	r28, 0xFD	; 253
     53e:	c1 30       	cpi	r28, 0x01	; 1
     540:	29 f4       	brne	.+10     	; 0x54c <attempt_to_move_snake_forward+0x70>
		PosnType prev_tail_posn = advance_snake_tail();
     542:	0e 94 1d 07 	call	0xe3a	; 0xe3a <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	0e 94 32 02 	call	0x464	; 0x464 <update_display_at_position>
	}
	
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     54c:	60 ef       	ldi	r22, 0xF0	; 240
     54e:	8d 2f       	mov	r24, r29
     550:	0e 94 32 02 	call	0x464	; 0x464 <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     554:	6f e0       	ldi	r22, 0x0F	; 15
     556:	81 2f       	mov	r24, r17
     558:	0e 94 32 02 	call	0x464	; 0x464 <update_display_at_position>
	return 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	01 c0       	rjmp	.+2      	; 0x562 <attempt_to_move_snake_forward+0x86>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     560:	80 e0       	ldi	r24, 0x00	; 0
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	08 95       	ret

0000056c <get_time_elapse>:

int8_t get_time_elapse(){
	return time_elapse;
}
     56c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_elapse>
     570:	08 95       	ret

00000572 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     572:	80 e8       	ldi	r24, 0x80	; 128
     574:	0e 94 fb 07 	call	0xff6	; 0xff6 <spi_setup_master>
     578:	08 95       	ret

0000057a <ledmatrix_update_pixel>:
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	80 31       	cpi	r24, 0x10	; 16
     582:	b0 f4       	brcc	.+44     	; 0x5b0 <ledmatrix_update_pixel+0x36>
     584:	68 30       	cpi	r22, 0x08	; 8
     586:	a0 f4       	brcc	.+40     	; 0x5b0 <ledmatrix_update_pixel+0x36>
     588:	14 2f       	mov	r17, r20
     58a:	c6 2f       	mov	r28, r22
     58c:	d8 2f       	mov	r29, r24
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     594:	6c 2f       	mov	r22, r28
     596:	67 70       	andi	r22, 0x07	; 7
     598:	80 e1       	ldi	r24, 0x10	; 16
     59a:	68 9f       	mul	r22, r24
     59c:	90 01       	movw	r18, r0
     59e:	11 24       	eor	r1, r1
     5a0:	8d 2f       	mov	r24, r29
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	82 2b       	or	r24, r18
     5a6:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     5aa:	81 2f       	mov	r24, r17
     5ac:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	08 95       	ret

000005b8 <ledmatrix_update_column>:
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	80 31       	cpi	r24, 0x10	; 16
     5c2:	90 f4       	brcc	.+36     	; 0x5e8 <ledmatrix_update_column+0x30>
     5c4:	8b 01       	movw	r16, r22
     5c6:	c8 2f       	mov	r28, r24
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     5ce:	8c 2f       	mov	r24, r28
     5d0:	8f 70       	andi	r24, 0x0F	; 15
     5d2:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     5d6:	e8 01       	movw	r28, r16
     5d8:	08 5f       	subi	r16, 0xF8	; 248
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	89 91       	ld	r24, Y+
     5de:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     5e2:	c0 17       	cp	r28, r16
     5e4:	d1 07       	cpc	r29, r17
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <ledmatrix_update_column+0x24>
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <ledmatrix_shift_display_left>:
     5f2:	84 e0       	ldi	r24, 0x04	; 4
     5f4:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     5fe:	08 95       	ret

00000600 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     600:	8f e0       	ldi	r24, 0x0F	; 15
     602:	0e 94 23 08 	call	0x1046	; 0x1046 <spi_send_byte>
     606:	08 95       	ret

00000608 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     608:	82 95       	swap	r24
     60a:	8f 70       	andi	r24, 0x0F	; 15
     60c:	08 95       	ret

0000060e <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     60e:	8f 70       	andi	r24, 0x0F	; 15
     610:	08 95       	ret

00000612 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     612:	83 fb       	bst	r24, 3
     614:	88 27       	eor	r24, r24
     616:	80 f9       	bld	r24, 0
}
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	89 27       	eor	r24, r25
     61c:	08 95       	ret

0000061e <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     61e:	20 e1       	ldi	r18, 0x10	; 16
     620:	82 9f       	mul	r24, r18
     622:	c0 01       	movw	r24, r0
     624:	11 24       	eor	r1, r1
     626:	67 70       	andi	r22, 0x07	; 7
}
     628:	86 2b       	or	r24, r22
     62a:	08 95       	ret

0000062c <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     62c:	0e 94 b9 02 	call	0x572	; 0x572 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     630:	0e 94 0a 01 	call	0x214	; 0x214 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	7b e4       	ldi	r23, 0x4B	; 75
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 02 06 	call	0xc04	; 0xc04 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     642:	0e 94 61 08 	call	0x10c2	; 0x10c2 <init_timer0>
	
	// Turn on global interrupts
	sei();
     646:	78 94       	sei
     648:	08 95       	ret

0000064a <splash_screen>:
}

void splash_screen(void) {
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	0e 94 4b 08 	call	0x1096	; 0x1096 <set_display_attribute>
	clear_terminal();
     65a:	0e 94 42 08 	call	0x1084	; 0x1084 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     65e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <hide_cursor>
	move_cursor(3,3);
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	83 e0       	ldi	r24, 0x03	; 3
     666:	0e 94 29 08 	call	0x1052	; 0x1052 <move_cursor>
	printf_P(PSTR("Snake"));
     66a:	8c ec       	ldi	r24, 0xCC	; 204
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
	
	move_cursor(3,5);
     676:	65 e0       	ldi	r22, 0x05	; 5
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	0e 94 29 08 	call	0x1052	; 0x1052 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	0e 94 4b 08 	call	0x1096	; 0x1096 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Sean Lim"));	
     684:	84 ea       	ldi	r24, 0xA4	; 164
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     690:	85 e2       	ldi	r24, 0x25	; 37
     692:	0e 94 4b 08 	call	0x1096	; 0x1096 <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     696:	0e 94 00 03 	call	0x600	; 0x600 <ledmatrix_clear>
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     6a2:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     6a4:	0f 2e       	mov	r0, r31
     6a6:	ff e0       	ldi	r31, 0x0F	; 15
     6a8:	ff 2e       	mov	r15, r31
     6aa:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     6ac:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     6ae:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     6b0:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
     6b2:	6c 2f       	mov	r22, r28
     6b4:	85 e1       	ldi	r24, 0x15	; 21
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 cb 04 	call	0x996	; 0x996 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <splash_screen+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6be:	2f e7       	ldi	r18, 0x7F	; 127
     6c0:	8c e2       	ldi	r24, 0x2C	; 44
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	80 40       	sbci	r24, 0x00	; 0
     6c8:	90 40       	sbci	r25, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <splash_screen+0x7a>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <splash_screen+0x84>
     6ce:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     6d0:	0e 94 1b 01 	call	0x236	; 0x236 <button_pushed>
     6d4:	8f 3f       	cpi	r24, 0xFF	; 255
     6d6:	a9 f5       	brne	.+106    	; 0x742 <splash_screen+0xf8>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     6d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <scroll_display>
     6dc:	81 11       	cpse	r24, r1
     6de:	ef cf       	rjmp	.-34     	; 0x6be <splash_screen+0x74>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     6e0:	0e 94 38 09 	call	0x1270	; 0x1270 <random>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	83 70       	andi	r24, 0x03	; 3
     6ea:	99 27       	eor	r25, r25
     6ec:	aa 27       	eor	r26, r26
     6ee:	b0 78       	andi	r27, 0x80	; 128
     6f0:	bb 23       	and	r27, r27
     6f2:	54 f4       	brge	.+20     	; 0x708 <splash_screen+0xbe>
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	a1 09       	sbc	r26, r1
     6f8:	b1 09       	sbc	r27, r1
     6fa:	8c 6f       	ori	r24, 0xFC	; 252
     6fc:	9f 6f       	ori	r25, 0xFF	; 255
     6fe:	af 6f       	ori	r26, 0xFF	; 255
     700:	bf 6f       	ori	r27, 0xFF	; 255
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	a1 1d       	adc	r26, r1
     706:	b1 1d       	adc	r27, r1
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	91 05       	cpc	r25, r1
     70c:	a1 05       	cpc	r26, r1
     70e:	b1 05       	cpc	r27, r1
     710:	91 f0       	breq	.+36     	; 0x736 <splash_screen+0xec>
     712:	2c f4       	brge	.+10     	; 0x71e <splash_screen+0xd4>
     714:	89 2b       	or	r24, r25
     716:	8a 2b       	or	r24, r26
     718:	8b 2b       	or	r24, r27
     71a:	59 f0       	breq	.+22     	; 0x732 <splash_screen+0xe8>
     71c:	ca cf       	rjmp	.-108    	; 0x6b2 <splash_screen+0x68>
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	91 05       	cpc	r25, r1
     722:	a1 05       	cpc	r26, r1
     724:	b1 05       	cpc	r27, r1
     726:	49 f0       	breq	.+18     	; 0x73a <splash_screen+0xf0>
     728:	03 97       	sbiw	r24, 0x03	; 3
     72a:	a1 05       	cpc	r26, r1
     72c:	b1 05       	cpc	r27, r1
     72e:	39 f0       	breq	.+14     	; 0x73e <splash_screen+0xf4>
     730:	c0 cf       	rjmp	.-128    	; 0x6b2 <splash_screen+0x68>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     732:	cd 2f       	mov	r28, r29
     734:	be cf       	rjmp	.-132    	; 0x6b2 <splash_screen+0x68>
			case 1: colour = COLOUR_RED; break;
     736:	cf 2d       	mov	r28, r15
     738:	bc cf       	rjmp	.-136    	; 0x6b2 <splash_screen+0x68>
			case 2: colour = COLOUR_YELLOW; break;
     73a:	c0 2f       	mov	r28, r16
     73c:	ba cf       	rjmp	.-140    	; 0x6b2 <splash_screen+0x68>
			case 3: colour = COLOUR_GREEN; break;
     73e:	c1 2f       	mov	r28, r17
     740:	b8 cf       	rjmp	.-144    	; 0x6b2 <splash_screen+0x68>
		}
	}
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	08 95       	ret

0000074e <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     74e:	0e 94 42 08 	call	0x1084	; 0x1084 <clear_terminal>
	
	// Initialise the game and display
	init_game();
     752:	0e 94 45 02 	call	0x48a	; 0x48a <init_game>
		
	// Initialise the score
	init_score();
     756:	0e 94 8f 04 	call	0x91e	; 0x91e <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     75a:	0e 94 18 01 	call	0x230	; 0x230 <empty_button_queue>
	clear_serial_input_buffer();
     75e:	0e 94 50 06 	call	0xca0	; 0xca0 <clear_serial_input_buffer>
     762:	08 95       	ret

00000764 <play_game>:
}

void play_game(void) {
     764:	7f 92       	push	r7
     766:	8f 92       	push	r8
     768:	9f 92       	push	r9
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
     77e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <get_clock_ticks>
     782:	4b 01       	movw	r8, r22
     784:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     786:	71 2c       	mov	r7, r1
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     788:	1f ef       	ldi	r17, 0xFF	; 255
			// pressed again. All other input (buttons, serial etc.) must be ignored.
			uint32_t unpause_timer = get_clock_ticks()-last_move_time; //time until snake should move again
			char new_serial_input;
			while(1){
				if(serial_input_available()){
					new_serial_input = fgetc(stdin);
     78a:	cb e7       	ldi	r28, 0x7B	; 123
     78c:	d2 e0       	ldi	r29, 0x02	; 2
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     78e:	0e 94 1b 01 	call	0x236	; 0x236 <button_pushed>
     792:	08 2f       	mov	r16, r24
		
		if(button == -1) {
     794:	8f 3f       	cpi	r24, 0xFF	; 255
     796:	09 f0       	breq	.+2      	; 0x79a <play_game+0x36>
     798:	7d c0       	rjmp	.+250    	; 0x894 <play_game+0x130>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     79a:	0e 94 49 06 	call	0xc92	; 0xc92 <serial_input_available>
     79e:	88 23       	and	r24, r24
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <play_game+0x40>
     7a2:	54 c0       	rjmp	.+168    	; 0x84c <play_game+0xe8>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     7a4:	88 81       	ld	r24, Y
     7a6:	99 81       	ldd	r25, Y+1	; 0x01
     7a8:	0e 94 8f 09 	call	0x131e	; 0x131e <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     7ac:	71 10       	cpse	r7, r1
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <play_game+0x56>
     7b0:	8b 31       	cpi	r24, 0x1B	; 27
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <play_game+0x52>
     7b4:	68 c0       	rjmp	.+208    	; 0x886 <play_game+0x122>
     7b6:	91 2f       	mov	r25, r17
     7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <play_game+0x70>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	79 12       	cpse	r7, r25
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <play_game+0x66>
     7c0:	8b 35       	cpi	r24, 0x5B	; 91
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <play_game+0x62>
     7c4:	63 c0       	rjmp	.+198    	; 0x88c <play_game+0x128>
     7c6:	91 2f       	mov	r25, r17
     7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <play_game+0x70>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	79 12       	cpse	r7, r25
     7ce:	1f c0       	rjmp	.+62     	; 0x80e <play_game+0xaa>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     7d0:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
     7d2:	81 2f       	mov	r24, r17
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     7d4:	93 34       	cpi	r25, 0x43	; 67
     7d6:	09 f0       	breq	.+2      	; 0x7da <play_game+0x76>
     7d8:	61 c0       	rjmp	.+194    	; 0x89c <play_game+0x138>
     7da:	71 2c       	mov	r7, r1
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 34 07 	call	0xe68	; 0xe68 <set_snake_dirn>
     7e2:	34 c0       	rjmp	.+104    	; 0x84c <play_game+0xe8>
     7e4:	71 2c       	mov	r7, r1
		} else  if (button==2 || escape_sequence_char == 'A') {
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 34 07 	call	0xe68	; 0xe68 <set_snake_dirn>
     7ec:	2f c0       	rjmp	.+94     	; 0x84c <play_game+0xe8>
		} else if(button==3 || escape_sequence_char=='D') {
     7ee:	03 30       	cpi	r16, 0x03	; 3
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <play_game+0x92>
     7f2:	94 34       	cpi	r25, 0x44	; 68
     7f4:	21 f4       	brne	.+8      	; 0x7fe <play_game+0x9a>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	0e 94 34 07 	call	0xe68	; 0xe68 <set_snake_dirn>
     7fc:	27 c0       	rjmp	.+78     	; 0x84c <play_game+0xe8>
		} else if (button==1 || escape_sequence_char == 'B') {
     7fe:	01 30       	cpi	r16, 0x01	; 1
     800:	11 f0       	breq	.+4      	; 0x806 <play_game+0xa2>
     802:	92 34       	cpi	r25, 0x42	; 66
     804:	29 f4       	brne	.+10     	; 0x810 <play_game+0xac>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	0e 94 34 07 	call	0xe68	; 0xe68 <set_snake_dirn>
     80c:	1f c0       	rjmp	.+62     	; 0x84c <play_game+0xe8>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     80e:	71 2c       	mov	r7, r1
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
     810:	8f 7d       	andi	r24, 0xDF	; 223
     812:	80 35       	cpi	r24, 0x50	; 80
     814:	d9 f4       	brne	.+54     	; 0x84c <play_game+0xe8>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again. All other input (buttons, serial etc.) must be ignored.
			uint32_t unpause_timer = get_clock_ticks()-last_move_time; //time until snake should move again
     816:	0e 94 79 08 	call	0x10f2	; 0x10f2 <get_clock_ticks>
     81a:	6b 01       	movw	r12, r22
     81c:	7c 01       	movw	r14, r24
     81e:	c8 18       	sub	r12, r8
     820:	d9 08       	sbc	r13, r9
     822:	ea 08       	sbc	r14, r10
     824:	fb 08       	sbc	r15, r11
			char new_serial_input;
			while(1){
				if(serial_input_available()){
     826:	0e 94 49 06 	call	0xc92	; 0xc92 <serial_input_available>
     82a:	88 23       	and	r24, r24
     82c:	e1 f3       	breq	.-8      	; 0x826 <play_game+0xc2>
					new_serial_input = fgetc(stdin);
     82e:	88 81       	ld	r24, Y
     830:	99 81       	ldd	r25, Y+1	; 0x01
     832:	0e 94 8f 09 	call	0x131e	; 0x131e <fgetc>
					if (new_serial_input == 'p' || new_serial_input == 'P'){
     836:	8f 7d       	andi	r24, 0xDF	; 223
     838:	80 35       	cpi	r24, 0x50	; 80
     83a:	a9 f7       	brne	.-22     	; 0x826 <play_game+0xc2>
						last_move_time = get_clock_ticks()-(unpause_timer);
     83c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <get_clock_ticks>
     840:	4b 01       	movw	r8, r22
     842:	5c 01       	movw	r10, r24
     844:	8c 18       	sub	r8, r12
     846:	9d 08       	sbc	r9, r13
     848:	ae 08       	sbc	r10, r14
     84a:	bf 08       	sbc	r11, r15
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_time_elapse()) {
     84c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <get_clock_ticks>
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	0e 94 b6 02 	call	0x56c	; 0x56c <get_time_elapse>
     858:	09 2e       	mov	r0, r25
     85a:	00 0c       	add	r0, r0
     85c:	aa 0b       	sbc	r26, r26
     85e:	bb 0b       	sbc	r27, r27
     860:	88 0d       	add	r24, r8
     862:	99 1d       	adc	r25, r9
     864:	aa 1d       	adc	r26, r10
     866:	bb 1d       	adc	r27, r11
     868:	c8 16       	cp	r12, r24
     86a:	d9 06       	cpc	r13, r25
     86c:	ea 06       	cpc	r14, r26
     86e:	fb 06       	cpc	r15, r27
     870:	08 f4       	brcc	.+2      	; 0x874 <play_game+0x110>
     872:	8d cf       	rjmp	.-230    	; 0x78e <play_game+0x2a>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
     874:	0e 94 6e 02 	call	0x4dc	; 0x4dc <attempt_to_move_snake_forward>
     878:	88 23       	and	r24, r24
     87a:	d9 f0       	breq	.+54     	; 0x8b2 <play_game+0x14e>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
     87c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <get_clock_ticks>
     880:	4b 01       	movw	r8, r22
     882:	5c 01       	movw	r10, r24
     884:	84 cf       	rjmp	.-248    	; 0x78e <play_game+0x2a>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     886:	77 24       	eor	r7, r7
     888:	73 94       	inc	r7
     88a:	e0 cf       	rjmp	.-64     	; 0x84c <play_game+0xe8>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     88c:	68 94       	set
     88e:	77 24       	eor	r7, r7
     890:	71 f8       	bld	r7, 1
     892:	dc cf       	rjmp	.-72     	; 0x84c <play_game+0xe8>
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     894:	88 23       	and	r24, r24
     896:	09 f4       	brne	.+2      	; 0x89a <play_game+0x136>
     898:	a1 cf       	rjmp	.-190    	; 0x7dc <play_game+0x78>
     89a:	05 c0       	rjmp	.+10     	; 0x8a6 <play_game+0x142>
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
     89c:	91 34       	cpi	r25, 0x41	; 65
     89e:	09 f4       	brne	.+2      	; 0x8a2 <play_game+0x13e>
     8a0:	a1 cf       	rjmp	.-190    	; 0x7e4 <play_game+0x80>
     8a2:	71 2c       	mov	r7, r1
     8a4:	a4 cf       	rjmp	.-184    	; 0x7ee <play_game+0x8a>
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	09 f4       	brne	.+2      	; 0x8ac <play_game+0x148>
     8aa:	9d cf       	rjmp	.-198    	; 0x7e6 <play_game+0x82>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     8ac:	91 2f       	mov	r25, r17
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     8ae:	81 2f       	mov	r24, r17
     8b0:	9e cf       	rjmp	.-196    	; 0x7ee <play_game+0x8a>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	9f 90       	pop	r9
     8c8:	8f 90       	pop	r8
     8ca:	7f 90       	pop	r7
     8cc:	08 95       	ret

000008ce <handle_game_over>:


void handle_game_over() {
	move_cursor(10,14);
     8ce:	6e e0       	ldi	r22, 0x0E	; 14
     8d0:	8a e0       	ldi	r24, 0x0A	; 10
     8d2:	0e 94 29 08 	call	0x1052	; 0x1052 <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     8d6:	8a e9       	ldi	r24, 0x9A	; 154
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
	move_cursor(10,15);
     8e2:	6f e0       	ldi	r22, 0x0F	; 15
     8e4:	8a e0       	ldi	r24, 0x0A	; 10
     8e6:	0e 94 29 08 	call	0x1052	; 0x1052 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     8ea:	8c e7       	ldi	r24, 0x7C	; 124
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
	while(button_pushed() == -1) {
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0e 94 1b 01 	call	0x236	; 0x236 <button_pushed>
     902:	8f 3f       	cpi	r24, 0xFF	; 255
     904:	e1 f3       	breq	.-8      	; 0x8fe <handle_game_over+0x30>
		; // wait until a button has been pushed
	}
	
     906:	08 95       	ret

00000908 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     908:	0e 94 16 03 	call	0x62c	; 0x62c <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     90c:	0e 94 25 03 	call	0x64a	; 0x64a <splash_screen>
	
	while(1) {
		new_game();
     910:	0e 94 a7 03 	call	0x74e	; 0x74e <new_game>
		play_game();
     914:	0e 94 b2 03 	call	0x764	; 0x764 <play_game>
		handle_game_over();
     918:	0e 94 67 04 	call	0x8ce	; 0x8ce <handle_game_over>
     91c:	f9 cf       	rjmp	.-14     	; 0x910 <main+0x8>

0000091e <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
     91e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <score>
     922:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <score+0x1>
     926:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <score+0x2>
     92a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <score+0x3>
     92e:	08 95       	ret

00000930 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
     930:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <score>
     934:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <score+0x1>
     938:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <score+0x2>
     93c:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <score+0x3>
     940:	48 0f       	add	r20, r24
     942:	59 1f       	adc	r21, r25
     944:	61 1d       	adc	r22, r1
     946:	71 1d       	adc	r23, r1
     948:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <score>
     94c:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <score+0x1>
     950:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <score+0x2>
     954:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <score+0x3>
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     958:	0e 94 58 08 	call	0x10b0	; 0x10b0 <hide_cursor>
	move_cursor(50,0);
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	82 e3       	ldi	r24, 0x32	; 50
     960:	0e 94 29 08 	call	0x1052	; 0x1052 <move_cursor>
	printf_P(PSTR("Score: %ld"), score);
     964:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score+0x3>
     968:	8f 93       	push	r24
     96a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <score+0x2>
     96e:	8f 93       	push	r24
     970:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <score+0x1>
     974:	8f 93       	push	r24
     976:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <score>
     97a:	8f 93       	push	r24
     97c:	82 ed       	ldi	r24, 0xD2	; 210
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	9f 93       	push	r25
     982:	8f 93       	push	r24
     984:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
}
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	08 95       	ret

00000996 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     996:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <colour>
	display_string = string_to_display;
     99a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <display_string+0x1>
     99e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <display_string>
	next_col_ptr = 0;
     9a2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <next_col_ptr+0x1>
     9a6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <next_col_ptr>
	next_char_to_display = 0;
     9aa:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <next_char_to_display+0x1>
     9ae:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <next_char_to_display>
     9b2:	08 95       	ret

000009b4 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	28 97       	sbiw	r28, 0x08	; 8
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     9cc:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <next_col_ptr>
     9d0:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <next_col_ptr+0x1>
     9d4:	30 97       	sbiw	r30, 0x00	; 0
     9d6:	81 f0       	breq	.+32     	; 0x9f8 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     9d8:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     9da:	10 ff       	sbrs	r17, 0
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     9de:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <next_col_ptr+0x1>
     9e2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9e6:	00 e0       	ldi	r16, 0x00	; 0
     9e8:	6b c0       	rjmp	.+214    	; 0xac0 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     9ea:	31 96       	adiw	r30, 0x01	; 1
     9ec:	f0 93 32 01 	sts	0x0132, r31	; 0x800132 <next_col_ptr+0x1>
     9f0:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	64 c0       	rjmp	.+200    	; 0xac0 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     9f8:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <next_char_to_display>
     9fc:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <next_char_to_display+0x1>
     a00:	30 97       	sbiw	r30, 0x00	; 0
     a02:	09 f4       	brne	.+2      	; 0xa06 <scroll_display+0x52>
     a04:	49 c0       	rjmp	.+146    	; 0xa98 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     a06:	cf 01       	movw	r24, r30
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <next_char_to_display+0x1>
     a0e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <next_char_to_display>
     a12:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     a14:	e1 11       	cpse	r30, r1
     a16:	0a c0       	rjmp	.+20     	; 0xa2c <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     a18:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <next_char_to_display+0x1>
     a1c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <next_char_to_display>
			shift_countdown = 16;
     a20:	80 e1       	ldi	r24, 0x10	; 16
     a22:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a26:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	4a c0       	rjmp	.+148    	; 0xac0 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     a2c:	8f e9       	ldi	r24, 0x9F	; 159
     a2e:	8e 0f       	add	r24, r30
     a30:	8a 31       	cpi	r24, 0x1A	; 26
     a32:	70 f4       	brcc	.+28     	; 0xa50 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	e1 5d       	subi	r30, 0xD1	; 209
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	85 91       	lpm	r24, Z+
     a40:	94 91       	lpm	r25, Z
     a42:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <next_col_ptr+0x1>
     a46:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a4a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	38 c0       	rjmp	.+112    	; 0xac0 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     a50:	8f eb       	ldi	r24, 0xBF	; 191
     a52:	8e 0f       	add	r24, r30
     a54:	8a 31       	cpi	r24, 0x1A	; 26
     a56:	70 f4       	brcc	.+28     	; 0xa74 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	e1 59       	subi	r30, 0x91	; 145
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	85 91       	lpm	r24, Z+
     a64:	94 91       	lpm	r25, Z
     a66:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <next_col_ptr+0x1>
     a6a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a6e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a70:	10 e0       	ldi	r17, 0x00	; 0
     a72:	26 c0       	rjmp	.+76     	; 0xac0 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     a74:	80 ed       	ldi	r24, 0xD0	; 208
     a76:	8e 0f       	add	r24, r30
     a78:	8a 30       	cpi	r24, 0x0A	; 10
     a7a:	00 f5       	brcc	.+64     	; 0xabc <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	e3 58       	subi	r30, 0x83	; 131
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	85 91       	lpm	r24, Z+
     a88:	94 91       	lpm	r25, Z
     a8a:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <next_col_ptr+0x1>
     a8e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a92:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	14 c0       	rjmp	.+40     	; 0xac0 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     a98:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <display_string>
     a9c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     aa0:	01 e0       	ldi	r16, 0x01	; 1
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <scroll_display+0xf4>
     aa6:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     aa8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <next_char_to_display+0x1>
     aac:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <next_char_to_display>
		display_string = 0;
     ab0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <display_string+0x1>
     ab4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     ab8:	10 e0       	ldi	r17, 0x00	; 0
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     abc:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     abe:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     ac0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     ac4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <colour>
     ac8:	fe 01       	movw	r30, r28
     aca:	38 96       	adiw	r30, 0x08	; 8
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     ad0:	11 23       	and	r17, r17
     ad2:	14 f4       	brge	.+4      	; 0xad8 <scroll_display+0x124>
			column_colour_data[i] = colour;
     ad4:	20 83       	st	Z, r18
     ad6:	01 c0       	rjmp	.+2      	; 0xada <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
     ad8:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     ada:	11 0f       	add	r17, r17
     adc:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     ade:	e8 17       	cp	r30, r24
     ae0:	f9 07       	cpc	r31, r25
     ae2:	b1 f7       	brne	.-20     	; 0xad0 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     ae4:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     ae6:	be 01       	movw	r22, r28
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	8f e0       	ldi	r24, 0x0F	; 15
     aee:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <ledmatrix_update_column>
	if(shift_countdown > 0) {
     af2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <shift_countdown.1854>
     af6:	88 23       	and	r24, r24
     af8:	89 f0       	breq	.+34     	; 0xb1c <scroll_display+0x168>
		shift_countdown--;
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
     b00:	00 23       	and	r16, r16
     b02:	11 f0       	breq	.+4      	; 0xb08 <scroll_display+0x154>
     b04:	88 23       	and	r24, r24
     b06:	11 f0       	breq	.+4      	; 0xb0c <scroll_display+0x158>
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <scroll_display+0x15e>
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <scroll_display+0x15e>
     b10:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	99 23       	and	r25, r25
     b16:	29 f0       	breq	.+10     	; 0xb22 <scroll_display+0x16e>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     b1c:	00 23       	and	r16, r16
     b1e:	a1 f3       	breq	.-24     	; 0xb08 <scroll_display+0x154>
     b20:	f7 cf       	rjmp	.-18     	; 0xb10 <scroll_display+0x15c>
	return !finished;
}
     b22:	28 96       	adiw	r28, 0x08	; 8
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     b38:	cf 93       	push	r28
     b3a:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     b3c:	8a 30       	cpi	r24, 0x0A	; 10
     b3e:	19 f4       	brne	.+6      	; 0xb46 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     b40:	8d e0       	ldi	r24, 0x0D	; 13
     b42:	0e 94 9c 05 	call	0xb38	; 0xb38 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     b46:	9f b7       	in	r25, 0x3f	; 63
     b48:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     b4c:	99 23       	and	r25, r25
     b4e:	29 f1       	breq	.+74     	; 0xb9a <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     b50:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <bytes_in_out_buffer>
     b54:	8f 3f       	cpi	r24, 0xFF	; 255
     b56:	d1 f3       	breq	.-12     	; 0xb4c <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     b58:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     b5a:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <out_insert_pos>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	8e 0f       	add	r24, r30
     b62:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <out_insert_pos>
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	e7 59       	subi	r30, 0x97	; 151
     b6a:	fe 4f       	sbci	r31, 0xFE	; 254
     b6c:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     b6e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <bytes_in_out_buffer>
     b72:	8f 5f       	subi	r24, 0xFF	; 255
     b74:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     b78:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <out_insert_pos>
     b7c:	8f 3f       	cpi	r24, 0xFF	; 255
     b7e:	11 f4       	brne	.+4      	; 0xb84 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     b80:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     b84:	e1 ec       	ldi	r30, 0xC1	; 193
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	80 62       	ori	r24, 0x20	; 32
     b8c:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     b8e:	99 23       	and	r25, r25
     b90:	39 f0       	breq	.+14     	; 0xba0 <uart_put_char+0x68>
		sei();
     b92:	78 94       	sei
	}
	return 0;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
}
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     ba8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_input_buffer>
     bac:	88 23       	and	r24, r24
     bae:	e1 f3       	breq	.-8      	; 0xba8 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     bb0:	2f b7       	in	r18, 0x3f	; 63
     bb2:	20 78       	andi	r18, 0x80	; 128
	cli();
     bb4:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     bb6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <input_insert_pos>
     bba:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <bytes_in_input_buffer>
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	83 1b       	sub	r24, r19
     bc2:	91 09       	sbc	r25, r1
     bc4:	5a f4       	brpl	.+22     	; 0xbdc <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     bc6:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <input_insert_pos>
     bca:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e8 1b       	sub	r30, r24
     bd2:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     bd4:	e7 58       	subi	r30, 0x87	; 135
     bd6:	fd 4f       	sbci	r31, 0xFD	; 253
     bd8:	80 81       	ld	r24, Z
     bda:	0a c0       	rjmp	.+20     	; 0xbf0 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     bdc:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <input_insert_pos>
     be0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_input_buffer>
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	e8 1b       	sub	r30, r24
     be8:	f1 09       	sbc	r31, r1
     bea:	e7 59       	subi	r30, 0x97	; 151
     bec:	fd 4f       	sbci	r31, 0xFD	; 253
     bee:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     bf0:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <bytes_in_input_buffer>
     bf4:	91 50       	subi	r25, 0x01	; 1
     bf6:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <bytes_in_input_buffer>
	if(interrupts_enabled) {
     bfa:	22 23       	and	r18, r18
     bfc:	09 f0       	breq	.+2      	; 0xc00 <uart_get_char+0x58>
		sei();
     bfe:	78 94       	sei
	}	
	return c;
}
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	08 95       	ret

00000c04 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     c04:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <out_insert_pos>
	bytes_in_out_buffer = 0;
     c08:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <bytes_in_out_buffer>
	input_insert_pos = 0;
     c0c:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <input_insert_pos>
	bytes_in_input_buffer = 0;
     c10:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <bytes_in_input_buffer>
	input_overrun = 0;
     c14:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     c18:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	aa 1f       	adc	r26, r26
     c2e:	bb 1f       	adc	r27, r27
     c30:	9c 01       	movw	r18, r24
     c32:	ad 01       	movw	r20, r26
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	44 1f       	adc	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	72 e1       	ldi	r23, 0x12	; 18
     c40:	8a e7       	ldi	r24, 0x7A	; 122
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodsi4>
     c48:	ba 01       	movw	r22, r20
     c4a:	a9 01       	movw	r20, r18
     c4c:	4f 5f       	subi	r20, 0xFF	; 255
     c4e:	5f 4f       	sbci	r21, 0xFF	; 255
     c50:	6f 4f       	sbci	r22, 0xFF	; 255
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	db 01       	movw	r26, r22
     c56:	ca 01       	movw	r24, r20
     c58:	1a f4       	brpl	.+6      	; 0xc60 <init_serial_stdio+0x5c>
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	a1 1d       	adc	r26, r1
     c5e:	b1 1d       	adc	r27, r1
     c60:	b5 95       	asr	r27
     c62:	a7 95       	ror	r26
     c64:	97 95       	ror	r25
     c66:	87 95       	ror	r24
     c68:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     c6a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c6e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     c72:	e1 ec       	ldi	r30, 0xC1	; 193
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	88 e1       	ldi	r24, 0x18	; 24
     c78:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     c7a:	80 81       	ld	r24, Z
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     c80:	eb e7       	ldi	r30, 0x7B	; 123
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	87 e0       	ldi	r24, 0x07	; 7
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	93 83       	std	Z+3, r25	; 0x03
     c8a:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	80 83       	st	Z, r24
     c90:	08 95       	ret

00000c92 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     c92:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <bytes_in_input_buffer>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	91 11       	cpse	r25, r1
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <serial_input_available+0xc>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
}
     c9e:	08 95       	ret

00000ca0 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     ca0:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <input_insert_pos>
	bytes_in_input_buffer = 0;
     ca4:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <bytes_in_input_buffer>
     ca8:	08 95       	ret

00000caa <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     cbe:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <bytes_in_out_buffer>
     cc2:	88 23       	and	r24, r24
     cc4:	29 f1       	breq	.+74     	; 0xd10 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     cc6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <out_insert_pos>
     cca:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <bytes_in_out_buffer>
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	82 1b       	sub	r24, r18
     cd2:	91 09       	sbc	r25, r1
     cd4:	5a f4       	brpl	.+22     	; 0xcec <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     cd6:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <out_insert_pos>
     cda:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	e8 1b       	sub	r30, r24
     ce2:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     ce4:	e8 59       	subi	r30, 0x98	; 152
     ce6:	fd 4f       	sbci	r31, 0xFD	; 253
     ce8:	90 81       	ld	r25, Z
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     cec:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <out_insert_pos>
     cf0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <bytes_in_out_buffer>
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	e8 1b       	sub	r30, r24
     cf8:	f1 09       	sbc	r31, r1
     cfa:	e7 59       	subi	r30, 0x97	; 151
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     d00:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <bytes_in_out_buffer>
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     d0a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     d10:	e1 ec       	ldi	r30, 0xC1	; 193
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8f 7d       	andi	r24, 0xDF	; 223
     d18:	80 83       	st	Z, r24
	}
}
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	2f 91       	pop	r18
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	cf 93       	push	r28
     d4e:	ef 93       	push	r30
     d50:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     d52:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     d56:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <do_echo>
     d5a:	88 23       	and	r24, r24
     d5c:	49 f0       	breq	.+18     	; 0xd70 <__vector_20+0x42>
     d5e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <bytes_in_out_buffer>
     d62:	8f 3f       	cpi	r24, 0xFF	; 255
     d64:	29 f0       	breq	.+10     	; 0xd70 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	8c 2f       	mov	r24, r28
     d6c:	0e 94 9c 05 	call	0xb38	; 0xb38 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     d70:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_input_buffer>
     d74:	80 31       	cpi	r24, 0x10	; 16
     d76:	20 f0       	brcs	.+8      	; 0xd80 <__vector_20+0x52>
		input_overrun = 1;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <input_overrun>
     d7e:	18 c0       	rjmp	.+48     	; 0xdb0 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     d80:	cd 30       	cpi	r28, 0x0D	; 13
     d82:	09 f4       	brne	.+2      	; 0xd86 <__vector_20+0x58>
			c = '\n';
     d84:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     d86:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <input_insert_pos>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8e 0f       	add	r24, r30
     d8e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <input_insert_pos>
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	e7 59       	subi	r30, 0x97	; 151
     d96:	fd 4f       	sbci	r31, 0xFD	; 253
     d98:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     d9a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_input_buffer>
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     da4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <input_insert_pos>
     da8:	80 31       	cpi	r24, 0x10	; 16
     daa:	11 f4       	brne	.+4      	; 0xdb0 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     dac:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <input_insert_pos>
		}
	}
}
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	cf 91       	pop	r28
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <init_snake>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <snakeLength>
     de0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <snakeTailIndex>
     de4:	c1 e0       	ldi	r28, 0x01	; 1
     de6:	c0 93 37 01 	sts	0x0137, r28	; 0x800137 <snakeHeadIndex>
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 0f 03 	call	0x61e	; 0x61e <position>
     df2:	09 e3       	ldi	r16, 0x39	; 57
     df4:	11 e0       	ldi	r17, 0x01	; 1
     df6:	f8 01       	movw	r30, r16
     df8:	80 83       	st	Z, r24
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 0f 03 	call	0x61e	; 0x61e <position>
     e02:	f8 01       	movw	r30, r16
     e04:	81 83       	std	Z+1, r24	; 0x01
     e06:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <curSnakeDirn>
     e0a:	c0 93 34 01 	sts	0x0134, r28	; 0x800134 <nextSnakeDirn>
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <get_snake_head_position>:
     e16:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <snakeHeadIndex>
     e1a:	0e 2e       	mov	r0, r30
     e1c:	00 0c       	add	r0, r0
     e1e:	ff 0b       	sbc	r31, r31
     e20:	e7 5c       	subi	r30, 0xC7	; 199
     e22:	fe 4f       	sbci	r31, 0xFE	; 254
     e24:	80 81       	ld	r24, Z
     e26:	08 95       	ret

00000e28 <get_snake_tail_position>:
     e28:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <snakeTailIndex>
     e2c:	0e 2e       	mov	r0, r30
     e2e:	00 0c       	add	r0, r0
     e30:	ff 0b       	sbc	r31, r31
     e32:	e7 5c       	subi	r30, 0xC7	; 199
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	80 81       	ld	r24, Z
     e38:	08 95       	ret

00000e3a <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
     e3a:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <snakeTailIndex>
     e3e:	e9 2f       	mov	r30, r25
     e40:	09 2e       	mov	r0, r25
     e42:	00 0c       	add	r0, r0
     e44:	ff 0b       	sbc	r31, r31
     e46:	e7 5c       	subi	r30, 0xC7	; 199
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
     e4c:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
     e4e:	91 32       	cpi	r25, 0x21	; 33
     e50:	19 f0       	breq	.+6      	; 0xe58 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
     e52:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <snakeTailIndex>
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
     e58:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <snakeTailIndex>
	}
	snakeLength--;
     e5c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <snakeLength>
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <snakeLength>
	
	return prev_tail_position;
}
     e66:	08 95       	ret

00000e68 <set_snake_dirn>:
	** is not opposite to the current direction (stored in curSnakeDirn). 
	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	if ((curSnakeDirn == SNAKE_LEFT && dirn == SNAKE_RIGHT) || (curSnakeDirn == SNAKE_RIGHT && dirn == SNAKE_LEFT) ||
     e68:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <curSnakeDirn>
     e6c:	93 30       	cpi	r25, 0x03	; 3
     e6e:	19 f4       	brne	.+6      	; 0xe76 <set_snake_dirn+0xe>
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	71 f4       	brne	.+28     	; 0xe90 <set_snake_dirn+0x28>
     e74:	08 95       	ret
     e76:	91 30       	cpi	r25, 0x01	; 1
     e78:	19 f4       	brne	.+6      	; 0xe80 <set_snake_dirn+0x18>
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	49 f4       	brne	.+18     	; 0xe90 <set_snake_dirn+0x28>
     e7e:	08 95       	ret
     e80:	91 11       	cpse	r25, r1
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <set_snake_dirn+0x22>
		(curSnakeDirn == SNAKE_UP && dirn == SNAKE_DOWN) || (curSnakeDirn == SNAKE_DOWN && dirn == SNAKE_UP)) {
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	21 f4       	brne	.+8      	; 0xe90 <set_snake_dirn+0x28>
     e88:	08 95       	ret
     e8a:	92 30       	cpi	r25, 0x02	; 2
     e8c:	09 f4       	brne	.+2      	; 0xe90 <set_snake_dirn+0x28>
     e8e:	81 11       	cpse	r24, r1
			return;	
		}
    
    nextSnakeDirn = dirn;
     e90:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <nextSnakeDirn>
     e94:	08 95       	ret

00000e96 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
     e96:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <snakeTailIndex>
	while(index != snakeHeadIndex) {
     e9a:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
     e9e:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <is_snake_at+0x26>
		if(position == snakePositions[index]) {
     ea2:	e9 2f       	mov	r30, r25
     ea4:	09 2e       	mov	r0, r25
     ea6:	00 0c       	add	r0, r0
     ea8:	ff 0b       	sbc	r31, r31
     eaa:	e7 5c       	subi	r30, 0xC7	; 199
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	20 81       	ld	r18, Z
     eb0:	28 17       	cp	r18, r24
     eb2:	89 f0       	breq	.+34     	; 0xed6 <is_snake_at+0x40>
     eb4:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
     eb6:	91 32       	cpi	r25, 0x21	; 33
     eb8:	0c f0       	brlt	.+2      	; 0xebc <is_snake_at+0x26>
			index = 0;
     eba:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     ebc:	93 13       	cpse	r25, r19
     ebe:	f1 cf       	rjmp	.-30     	; 0xea2 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
     ec0:	e3 2f       	mov	r30, r19
     ec2:	33 0f       	add	r19, r19
     ec4:	ff 0b       	sbc	r31, r31
     ec6:	e7 5c       	subi	r30, 0xC7	; 199
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	20 81       	ld	r18, Z
     ece:	28 17       	cp	r18, r24
     ed0:	19 f0       	breq	.+6      	; 0xed8 <is_snake_at+0x42>
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <is_snake_at+0x42>
     ed6:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
     ed8:	89 2f       	mov	r24, r25
     eda:	08 95       	ret

00000edc <advance_snake_head>:
** - ATE_FOOD if there was food at the new head position and the snake can grow
** - ATE_FOOD_BUT_CANT_GROW if there was food at the new head position but the
**   snake can't grow.
** (Only the last three of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
     ee0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <snakeLength>
     ee4:	81 32       	cpi	r24, 0x21	; 33
     ee6:	08 f0       	brcs	.+2      	; 0xeea <advance_snake_head+0xe>
     ee8:	7c c0       	rjmp	.+248    	; 0xfe2 <advance_snake_head+0x106>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
     eea:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <snakeHeadIndex>
     eee:	0e 2e       	mov	r0, r30
     ef0:	00 0c       	add	r0, r0
     ef2:	ff 0b       	sbc	r31, r31
     ef4:	e7 5c       	subi	r30, 0xC7	; 199
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	80 81       	ld	r24, Z
     efa:	0e 94 04 03 	call	0x608	; 0x608 <x_position>
     efe:	d8 2f       	mov	r29, r24
     f00:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
     f02:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <snakeHeadIndex>
     f06:	0e 2e       	mov	r0, r30
     f08:	00 0c       	add	r0, r0
     f0a:	ff 0b       	sbc	r31, r31
     f0c:	e7 5c       	subi	r30, 0xC7	; 199
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	80 81       	ld	r24, Z
     f12:	0e 94 07 03 	call	0x60e	; 0x60e <y_position>
     f16:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
     f18:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <nextSnakeDirn>
     f1c:	91 30       	cpi	r25, 0x01	; 1
     f1e:	59 f0       	breq	.+22     	; 0xf36 <advance_snake_head+0x5a>
     f20:	28 f0       	brcs	.+10     	; 0xf2c <advance_snake_head+0x50>
     f22:	92 30       	cpi	r25, 0x02	; 2
     f24:	69 f0       	breq	.+26     	; 0xf40 <advance_snake_head+0x64>
     f26:	93 30       	cpi	r25, 0x03	; 3
     f28:	81 f0       	breq	.+32     	; 0xf4a <advance_snake_head+0x6e>
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
     f2c:	87 30       	cpi	r24, 0x07	; 7
     f2e:	91 f0       	breq	.+36     	; 0xf54 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	68 0f       	add	r22, r24
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
     f36:	df 30       	cpi	r29, 0x0F	; 15
     f38:	79 f0       	breq	.+30     	; 0xf58 <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
     f3a:	c1 e0       	ldi	r28, 0x01	; 1
     f3c:	cd 0f       	add	r28, r29
     f3e:	11 c0       	rjmp	.+34     	; 0xf62 <advance_snake_head+0x86>
			}
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
     f40:	88 23       	and	r24, r24
     f42:	61 f0       	breq	.+24     	; 0xf5c <advance_snake_head+0x80>
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
			} else {
			headY -= 1;
     f44:	6f ef       	ldi	r22, 0xFF	; 255
     f46:	68 0f       	add	r22, r24
     f48:	0c c0       	rjmp	.+24     	; 0xf62 <advance_snake_head+0x86>
			}
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
     f4a:	dd 23       	and	r29, r29
     f4c:	49 f0       	breq	.+18     	; 0xf60 <advance_snake_head+0x84>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
			} else {
				headX -= 1;
     f4e:	cf ef       	ldi	r28, 0xFF	; 255
     f50:	cd 0f       	add	r28, r29
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <advance_snake_head+0x86>
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
     f5c:	67 e0       	ldi	r22, 0x07	; 7
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <advance_snake_head+0x86>
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
     f60:	cf e0       	ldi	r28, 0x0F	; 15
				headX -= 1;
			}
			break;
    }

	newHeadPosn = position(headX, headY);
     f62:	8c 2f       	mov	r24, r28
     f64:	0e 94 0f 03 	call	0x61e	; 0x61e <position>
     f68:	c8 2f       	mov	r28, r24

	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
     f6a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <nextSnakeDirn>
     f6e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <curSnakeDirn>
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
     f72:	8c 2f       	mov	r24, r28
     f74:	0e 94 4b 07 	call	0xe96	; 0xe96 <is_snake_at>
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	51 f4       	brne	.+20     	; 0xf90 <advance_snake_head+0xb4>
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
     f7c:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <snakeHeadIndex>
     f80:	0e 2e       	mov	r0, r30
     f82:	00 0c       	add	r0, r0
     f84:	ff 0b       	sbc	r31, r31
     f86:	e7 5c       	subi	r30, 0xC7	; 199
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
     f8a:	80 81       	ld	r24, Z
     f8c:	c8 13       	cpse	r28, r24
     f8e:	2b c0       	rjmp	.+86     	; 0xfe6 <advance_snake_head+0x10a>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	add_to_score(1);
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 98 04 	call	0x930	; 0x930 <add_to_score>

	set_display_attribute(TERM_RESET);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	0e 94 4b 08 	call	0x1096	; 0x1096 <set_display_attribute>
	snakeHeadIndex++;
     f9e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <snakeHeadIndex>
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
     fa4:	81 32       	cpi	r24, 0x21	; 33
     fa6:	19 f0       	breq	.+6      	; 0xfae <advance_snake_head+0xd2>
	** or not. Update the length.
    */
	add_to_score(1);

	set_display_attribute(TERM_RESET);
	snakeHeadIndex++;
     fa8:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <snakeHeadIndex>
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <advance_snake_head+0xd6>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
     fae:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
     fb2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <snakeHeadIndex>
     fb6:	0e 2e       	mov	r0, r30
     fb8:	00 0c       	add	r0, r0
     fba:	ff 0b       	sbc	r31, r31
     fbc:	e7 5c       	subi	r30, 0xC7	; 199
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
     fc2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <snakeLength>
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
     fcc:	8c 2f       	mov	r24, r28
     fce:	0e 94 b7 01 	call	0x36e	; 0x36e <is_food_at>
     fd2:	88 23       	and	r24, r24
     fd4:	51 f0       	breq	.+20     	; 0xfea <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
     fd6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <snakeLength>
     fda:	81 32       	cpi	r24, 0x21	; 33
     fdc:	40 f0       	brcs	.+16     	; 0xfee <advance_snake_head+0x112>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
     fde:	83 e0       	ldi	r24, 0x03	; 3
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <advance_snake_head+0x114>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
     fe2:	8d ef       	ldi	r24, 0xFD	; 253
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <advance_snake_head+0x114>
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
		return COLLISION;
     fe6:	8e ef       	ldi	r24, 0xFE	; 254
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <advance_snake_head+0x114>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <advance_snake_head+0x114>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
     fee:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     ff6:	94 b1       	in	r25, 0x04	; 4
     ff8:	90 6b       	ori	r25, 0xB0	; 176
     ffa:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     ffc:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     ffe:	90 e5       	ldi	r25, 0x50	; 80
    1000:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1002:	88 30       	cpi	r24, 0x08	; 8
    1004:	21 f0       	breq	.+8      	; 0x100e <spi_setup_master+0x18>
    1006:	80 32       	cpi	r24, 0x20	; 32
    1008:	11 f0       	breq	.+4      	; 0x100e <spi_setup_master+0x18>
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	19 f4       	brne	.+6      	; 0x1014 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	9d bd       	out	0x2d, r25	; 45
			break;
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1014:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1016:	80 32       	cpi	r24, 0x20	; 32
    1018:	69 f0       	breq	.+26     	; 0x1034 <spi_setup_master+0x3e>
    101a:	28 f4       	brcc	.+10     	; 0x1026 <spi_setup_master+0x30>
    101c:	88 30       	cpi	r24, 0x08	; 8
    101e:	71 f0       	breq	.+28     	; 0x103c <spi_setup_master+0x46>
    1020:	80 31       	cpi	r24, 0x10	; 16
    1022:	61 f0       	breq	.+24     	; 0x103c <spi_setup_master+0x46>
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <spi_setup_master+0x4c>
    1026:	80 34       	cpi	r24, 0x40	; 64
    1028:	29 f0       	breq	.+10     	; 0x1034 <spi_setup_master+0x3e>
    102a:	80 38       	cpi	r24, 0x80	; 128
    102c:	51 f4       	brne	.+20     	; 0x1042 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    102e:	8c b5       	in	r24, 0x2c	; 44
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1034:	8c b5       	in	r24, 0x2c	; 44
    1036:	82 60       	ori	r24, 0x02	; 2
    1038:	8c bd       	out	0x2c, r24	; 44
			break;
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    103c:	8c b5       	in	r24, 0x2c	; 44
    103e:	81 60       	ori	r24, 0x01	; 1
    1040:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1042:	2c 98       	cbi	0x05, 4	; 5
    1044:	08 95       	ret

00001046 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    1046:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1048:	0d b4       	in	r0, 0x2d	; 45
    104a:	07 fe       	sbrs	r0, 7
    104c:	fd cf       	rjmp	.-6      	; 0x1048 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    104e:	8e b5       	in	r24, 0x2e	; 46
    1050:	08 95       	ret

00001052 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    1052:	28 2f       	mov	r18, r24
    1054:	08 2e       	mov	r0, r24
    1056:	00 0c       	add	r0, r0
    1058:	33 0b       	sbc	r19, r19
    105a:	3f 93       	push	r19
    105c:	8f 93       	push	r24
    105e:	86 2f       	mov	r24, r22
    1060:	06 2e       	mov	r0, r22
    1062:	00 0c       	add	r0, r0
    1064:	99 0b       	sbc	r25, r25
    1066:	9f 93       	push	r25
    1068:	6f 93       	push	r22
    106a:	8d ec       	ldi	r24, 0xCD	; 205
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	9f 93       	push	r25
    1070:	8f 93       	push	r24
    1072:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	08 95       	ret

00001084 <clear_terminal>:
    1084:	88 ec       	ldi	r24, 0xC8	; 200
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	9f 93       	push	r25
    108a:	8f 93       	push	r24
    108c:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	08 95       	ret

00001096 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1096:	1f 92       	push	r1
    1098:	8f 93       	push	r24
    109a:	82 ec       	ldi	r24, 0xC2	; 194
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	9f 93       	push	r25
    10a0:	8f 93       	push	r24
    10a2:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	08 95       	ret

000010b0 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    10b0:	8b eb       	ldi	r24, 0xBB	; 187
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	9f 93       	push	r25
    10b6:	8f 93       	push	r24
    10b8:	0e 94 cd 09 	call	0x139a	; 0x139a <printf_P>
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	08 95       	ret

000010c2 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    10c2:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <clock_ticks>
    10c6:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <clock_ticks+0x1>
    10ca:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <clock_ticks+0x2>
    10ce:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    10d2:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    10d4:	8c e7       	ldi	r24, 0x7C	; 124
    10d6:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    10e0:	ee e6       	ldi	r30, 0x6E	; 110
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	82 60       	ori	r24, 0x02	; 2
    10e8:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    10ea:	85 b3       	in	r24, 0x15	; 21
    10ec:	82 70       	andi	r24, 0x02	; 2
    10ee:	85 bb       	out	0x15, r24	; 21
    10f0:	08 95       	ret

000010f2 <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    10f2:	2f b7       	in	r18, 0x3f	; 63
	cli();
    10f4:	f8 94       	cli
	return_value = clock_ticks;
    10f6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <clock_ticks>
    10fa:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <clock_ticks+0x1>
    10fe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <clock_ticks+0x2>
    1102:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <clock_ticks+0x3>
	if(interrupts_were_on) {
    1106:	22 23       	and	r18, r18
    1108:	0c f4       	brge	.+2      	; 0x110c <get_clock_ticks+0x1a>
		sei();
    110a:	78 94       	sei
	}
	return return_value;
}
    110c:	08 95       	ret

0000110e <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
    1120:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <clock_ticks>
    1124:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <clock_ticks+0x1>
    1128:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <clock_ticks+0x2>
    112c:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <clock_ticks+0x3>
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	a1 1d       	adc	r26, r1
    1134:	b1 1d       	adc	r27, r1
    1136:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <clock_ticks>
    113a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <clock_ticks+0x1>
    113e:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <clock_ticks+0x2>
    1142:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <clock_ticks+0x3>
}
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <__divmodsi4>:
    1158:	05 2e       	mov	r0, r21
    115a:	97 fb       	bst	r25, 7
    115c:	1e f4       	brtc	.+6      	; 0x1164 <__divmodsi4+0xc>
    115e:	00 94       	com	r0
    1160:	0e 94 c3 08 	call	0x1186	; 0x1186 <__negsi2>
    1164:	57 fd       	sbrc	r21, 7
    1166:	07 d0       	rcall	.+14     	; 0x1176 <__divmodsi4_neg2>
    1168:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodsi4>
    116c:	07 fc       	sbrc	r0, 7
    116e:	03 d0       	rcall	.+6      	; 0x1176 <__divmodsi4_neg2>
    1170:	4e f4       	brtc	.+18     	; 0x1184 <__divmodsi4_exit>
    1172:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__negsi2>

00001176 <__divmodsi4_neg2>:
    1176:	50 95       	com	r21
    1178:	40 95       	com	r20
    117a:	30 95       	com	r19
    117c:	21 95       	neg	r18
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	4f 4f       	sbci	r20, 0xFF	; 255
    1182:	5f 4f       	sbci	r21, 0xFF	; 255

00001184 <__divmodsi4_exit>:
    1184:	08 95       	ret

00001186 <__negsi2>:
    1186:	90 95       	com	r25
    1188:	80 95       	com	r24
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	08 95       	ret

00001196 <__udivmodsi4>:
    1196:	a1 e2       	ldi	r26, 0x21	; 33
    1198:	1a 2e       	mov	r1, r26
    119a:	aa 1b       	sub	r26, r26
    119c:	bb 1b       	sub	r27, r27
    119e:	fd 01       	movw	r30, r26
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <__udivmodsi4_ep>

000011a2 <__udivmodsi4_loop>:
    11a2:	aa 1f       	adc	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	ee 1f       	adc	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	a2 17       	cp	r26, r18
    11ac:	b3 07       	cpc	r27, r19
    11ae:	e4 07       	cpc	r30, r20
    11b0:	f5 07       	cpc	r31, r21
    11b2:	20 f0       	brcs	.+8      	; 0x11bc <__udivmodsi4_ep>
    11b4:	a2 1b       	sub	r26, r18
    11b6:	b3 0b       	sbc	r27, r19
    11b8:	e4 0b       	sbc	r30, r20
    11ba:	f5 0b       	sbc	r31, r21

000011bc <__udivmodsi4_ep>:
    11bc:	66 1f       	adc	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	1a 94       	dec	r1
    11c6:	69 f7       	brne	.-38     	; 0x11a2 <__udivmodsi4_loop>
    11c8:	60 95       	com	r22
    11ca:	70 95       	com	r23
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	bd 01       	movw	r22, r26
    11d6:	cf 01       	movw	r24, r30
    11d8:	08 95       	ret

000011da <random_r>:
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	68 81       	ld	r22, Y
    11f2:	79 81       	ldd	r23, Y+1	; 0x01
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	9b 81       	ldd	r25, Y+3	; 0x03
    11f8:	61 15       	cp	r22, r1
    11fa:	71 05       	cpc	r23, r1
    11fc:	81 05       	cpc	r24, r1
    11fe:	91 05       	cpc	r25, r1
    1200:	21 f4       	brne	.+8      	; 0x120a <random_r+0x30>
    1202:	64 e2       	ldi	r22, 0x24	; 36
    1204:	79 ed       	ldi	r23, 0xD9	; 217
    1206:	8b e5       	ldi	r24, 0x5B	; 91
    1208:	97 e0       	ldi	r25, 0x07	; 7
    120a:	2d e1       	ldi	r18, 0x1D	; 29
    120c:	33 ef       	ldi	r19, 0xF3	; 243
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodsi4>
    1216:	49 01       	movw	r8, r18
    1218:	5a 01       	movw	r10, r20
    121a:	9b 01       	movw	r18, r22
    121c:	ac 01       	movw	r20, r24
    121e:	a7 ea       	ldi	r26, 0xA7	; 167
    1220:	b1 e4       	ldi	r27, 0x41	; 65
    1222:	0e 94 84 0c 	call	0x1908	; 0x1908 <__muluhisi3>
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
    122a:	ac ee       	ldi	r26, 0xEC	; 236
    122c:	b4 ef       	ldi	r27, 0xF4	; 244
    122e:	a5 01       	movw	r20, r10
    1230:	94 01       	movw	r18, r8
    1232:	0e 94 92 0c 	call	0x1924	; 0x1924 <__mulohisi3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8c 0d       	add	r24, r12
    123c:	9d 1d       	adc	r25, r13
    123e:	ae 1d       	adc	r26, r14
    1240:	bf 1d       	adc	r27, r15
    1242:	b7 ff       	sbrs	r27, 7
    1244:	03 c0       	rjmp	.+6      	; 0x124c <random_r+0x72>
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	a1 09       	sbc	r26, r1
    124a:	b0 48       	sbci	r27, 0x80	; 128
    124c:	88 83       	st	Y, r24
    124e:	99 83       	std	Y+1, r25	; 0x01
    1250:	aa 83       	std	Y+2, r26	; 0x02
    1252:	bb 83       	std	Y+3, r27	; 0x03
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	9f 77       	andi	r25, 0x7F	; 127
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	9f 90       	pop	r9
    126c:	8f 90       	pop	r8
    126e:	08 95       	ret

00001270 <random>:
    1270:	8f 92       	push	r8
    1272:	9f 92       	push	r9
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1284:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1288:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    128c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1290:	61 15       	cp	r22, r1
    1292:	71 05       	cpc	r23, r1
    1294:	81 05       	cpc	r24, r1
    1296:	91 05       	cpc	r25, r1
    1298:	21 f4       	brne	.+8      	; 0x12a2 <random+0x32>
    129a:	64 e2       	ldi	r22, 0x24	; 36
    129c:	79 ed       	ldi	r23, 0xD9	; 217
    129e:	8b e5       	ldi	r24, 0x5B	; 91
    12a0:	97 e0       	ldi	r25, 0x07	; 7
    12a2:	2d e1       	ldi	r18, 0x1D	; 29
    12a4:	33 ef       	ldi	r19, 0xF3	; 243
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodsi4>
    12ae:	49 01       	movw	r8, r18
    12b0:	5a 01       	movw	r10, r20
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	a7 ea       	ldi	r26, 0xA7	; 167
    12b8:	b1 e4       	ldi	r27, 0x41	; 65
    12ba:	0e 94 84 0c 	call	0x1908	; 0x1908 <__muluhisi3>
    12be:	6b 01       	movw	r12, r22
    12c0:	7c 01       	movw	r14, r24
    12c2:	ac ee       	ldi	r26, 0xEC	; 236
    12c4:	b4 ef       	ldi	r27, 0xF4	; 244
    12c6:	a5 01       	movw	r20, r10
    12c8:	94 01       	movw	r18, r8
    12ca:	0e 94 92 0c 	call	0x1924	; 0x1924 <__mulohisi3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8c 0d       	add	r24, r12
    12d4:	9d 1d       	adc	r25, r13
    12d6:	ae 1d       	adc	r26, r14
    12d8:	bf 1d       	adc	r27, r15
    12da:	b7 ff       	sbrs	r27, 7
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <random+0x74>
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	a1 09       	sbc	r26, r1
    12e2:	b0 48       	sbci	r27, 0x80	; 128
    12e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    12e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    12ec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    12f0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	9f 77       	andi	r25, 0x7F	; 127
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	8f 90       	pop	r8
    130a:	08 95       	ret

0000130c <srandom>:
    130c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1310:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1314:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1318:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    131c:	08 95       	ret

0000131e <fgetc>:
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	ec 01       	movw	r28, r24
    1324:	2b 81       	ldd	r18, Y+3	; 0x03
    1326:	20 ff       	sbrs	r18, 0
    1328:	33 c0       	rjmp	.+102    	; 0x1390 <fgetc+0x72>
    132a:	26 ff       	sbrs	r18, 6
    132c:	0a c0       	rjmp	.+20     	; 0x1342 <fgetc+0x24>
    132e:	2f 7b       	andi	r18, 0xBF	; 191
    1330:	2b 83       	std	Y+3, r18	; 0x03
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	9f 81       	ldd	r25, Y+7	; 0x07
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	9f 83       	std	Y+7, r25	; 0x07
    133a:	8e 83       	std	Y+6, r24	; 0x06
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	29 c0       	rjmp	.+82     	; 0x1394 <fgetc+0x76>
    1342:	22 ff       	sbrs	r18, 2
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <fgetc+0x46>
    1346:	e8 81       	ld	r30, Y
    1348:	f9 81       	ldd	r31, Y+1	; 0x01
    134a:	80 81       	ld	r24, Z
    134c:	08 2e       	mov	r0, r24
    134e:	00 0c       	add	r0, r0
    1350:	99 0b       	sbc	r25, r25
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	19 f4       	brne	.+6      	; 0x135c <fgetc+0x3e>
    1356:	20 62       	ori	r18, 0x20	; 32
    1358:	2b 83       	std	Y+3, r18	; 0x03
    135a:	1a c0       	rjmp	.+52     	; 0x1390 <fgetc+0x72>
    135c:	31 96       	adiw	r30, 0x01	; 1
    135e:	f9 83       	std	Y+1, r31	; 0x01
    1360:	e8 83       	st	Y, r30
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <fgetc+0x62>
    1364:	ea 85       	ldd	r30, Y+10	; 0x0a
    1366:	fb 85       	ldd	r31, Y+11	; 0x0b
    1368:	09 95       	icall
    136a:	97 ff       	sbrs	r25, 7
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <fgetc+0x62>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	11 f0       	breq	.+4      	; 0x1378 <fgetc+0x5a>
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	01 c0       	rjmp	.+2      	; 0x137a <fgetc+0x5c>
    1378:	80 e1       	ldi	r24, 0x10	; 16
    137a:	82 2b       	or	r24, r18
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	08 c0       	rjmp	.+16     	; 0x1390 <fgetc+0x72>
    1380:	2e 81       	ldd	r18, Y+6	; 0x06
    1382:	3f 81       	ldd	r19, Y+7	; 0x07
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	3f 83       	std	Y+7, r19	; 0x07
    138a:	2e 83       	std	Y+6, r18	; 0x06
    138c:	99 27       	eor	r25, r25
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <fgetc+0x76>
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	9f ef       	ldi	r25, 0xFF	; 255
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <printf_P>:
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e3 ed       	ldi	r30, 0xD3	; 211
    13a0:	f9 e0       	ldi	r31, 0x09	; 9
    13a2:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__prologue_saves__+0x1c>
    13a6:	ae 01       	movw	r20, r28
    13a8:	49 5f       	subi	r20, 0xF9	; 249
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	da 01       	movw	r26, r20
    13ae:	6d 91       	ld	r22, X+
    13b0:	7d 91       	ld	r23, X+
    13b2:	ad 01       	movw	r20, r26
    13b4:	0b e7       	ldi	r16, 0x7B	; 123
    13b6:	12 e0       	ldi	r17, 0x02	; 2
    13b8:	f8 01       	movw	r30, r16
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	dc 01       	movw	r26, r24
    13c0:	13 96       	adiw	r26, 0x03	; 3
    13c2:	2c 91       	ld	r18, X
    13c4:	13 97       	sbiw	r26, 0x03	; 3
    13c6:	28 60       	ori	r18, 0x08	; 8
    13c8:	13 96       	adiw	r26, 0x03	; 3
    13ca:	2c 93       	st	X, r18
    13cc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <vfprintf>
    13d0:	d8 01       	movw	r26, r16
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	ed 91       	ld	r30, X+
    13d6:	fc 91       	ld	r31, X
    13d8:	13 97       	sbiw	r26, 0x03	; 3
    13da:	23 81       	ldd	r18, Z+3	; 0x03
    13dc:	27 7f       	andi	r18, 0xF7	; 247
    13de:	23 83       	std	Z+3, r18	; 0x03
    13e0:	e4 e0       	ldi	r30, 0x04	; 4
    13e2:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__epilogue_restores__+0x1c>

000013e6 <vfprintf>:
    13e6:	ab e0       	ldi	r26, 0x0B	; 11
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__prologue_saves__>
    13f2:	6c 01       	movw	r12, r24
    13f4:	7b 01       	movw	r14, r22
    13f6:	8a 01       	movw	r16, r20
    13f8:	fc 01       	movw	r30, r24
    13fa:	17 82       	std	Z+7, r1	; 0x07
    13fc:	16 82       	std	Z+6, r1	; 0x06
    13fe:	83 81       	ldd	r24, Z+3	; 0x03
    1400:	81 ff       	sbrs	r24, 1
    1402:	cc c1       	rjmp	.+920    	; 0x179c <vfprintf+0x3b6>
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	3c 01       	movw	r6, r24
    140a:	f6 01       	movw	r30, r12
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	f7 01       	movw	r30, r14
    1410:	93 fd       	sbrc	r25, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	93 ff       	sbrs	r25, 3
    1416:	81 91       	ld	r24, Z+
    1418:	7f 01       	movw	r14, r30
    141a:	88 23       	and	r24, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <vfprintf+0x3a>
    141e:	ba c1       	rjmp	.+884    	; 0x1794 <vfprintf+0x3ae>
    1420:	85 32       	cpi	r24, 0x25	; 37
    1422:	39 f4       	brne	.+14     	; 0x1432 <vfprintf+0x4c>
    1424:	93 fd       	sbrc	r25, 3
    1426:	85 91       	lpm	r24, Z+
    1428:	93 ff       	sbrs	r25, 3
    142a:	81 91       	ld	r24, Z+
    142c:	7f 01       	movw	r14, r30
    142e:	85 32       	cpi	r24, 0x25	; 37
    1430:	29 f4       	brne	.+10     	; 0x143c <vfprintf+0x56>
    1432:	b6 01       	movw	r22, r12
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    143a:	e7 cf       	rjmp	.-50     	; 0x140a <vfprintf+0x24>
    143c:	91 2c       	mov	r9, r1
    143e:	21 2c       	mov	r2, r1
    1440:	31 2c       	mov	r3, r1
    1442:	ff e1       	ldi	r31, 0x1F	; 31
    1444:	f3 15       	cp	r31, r3
    1446:	d8 f0       	brcs	.+54     	; 0x147e <vfprintf+0x98>
    1448:	8b 32       	cpi	r24, 0x2B	; 43
    144a:	79 f0       	breq	.+30     	; 0x146a <vfprintf+0x84>
    144c:	38 f4       	brcc	.+14     	; 0x145c <vfprintf+0x76>
    144e:	80 32       	cpi	r24, 0x20	; 32
    1450:	79 f0       	breq	.+30     	; 0x1470 <vfprintf+0x8a>
    1452:	83 32       	cpi	r24, 0x23	; 35
    1454:	a1 f4       	brne	.+40     	; 0x147e <vfprintf+0x98>
    1456:	23 2d       	mov	r18, r3
    1458:	20 61       	ori	r18, 0x10	; 16
    145a:	1d c0       	rjmp	.+58     	; 0x1496 <vfprintf+0xb0>
    145c:	8d 32       	cpi	r24, 0x2D	; 45
    145e:	61 f0       	breq	.+24     	; 0x1478 <vfprintf+0x92>
    1460:	80 33       	cpi	r24, 0x30	; 48
    1462:	69 f4       	brne	.+26     	; 0x147e <vfprintf+0x98>
    1464:	23 2d       	mov	r18, r3
    1466:	21 60       	ori	r18, 0x01	; 1
    1468:	16 c0       	rjmp	.+44     	; 0x1496 <vfprintf+0xb0>
    146a:	83 2d       	mov	r24, r3
    146c:	82 60       	ori	r24, 0x02	; 2
    146e:	38 2e       	mov	r3, r24
    1470:	e3 2d       	mov	r30, r3
    1472:	e4 60       	ori	r30, 0x04	; 4
    1474:	3e 2e       	mov	r3, r30
    1476:	2a c0       	rjmp	.+84     	; 0x14cc <vfprintf+0xe6>
    1478:	f3 2d       	mov	r31, r3
    147a:	f8 60       	ori	r31, 0x08	; 8
    147c:	1d c0       	rjmp	.+58     	; 0x14b8 <vfprintf+0xd2>
    147e:	37 fc       	sbrc	r3, 7
    1480:	2d c0       	rjmp	.+90     	; 0x14dc <vfprintf+0xf6>
    1482:	20 ed       	ldi	r18, 0xD0	; 208
    1484:	28 0f       	add	r18, r24
    1486:	2a 30       	cpi	r18, 0x0A	; 10
    1488:	40 f0       	brcs	.+16     	; 0x149a <vfprintf+0xb4>
    148a:	8e 32       	cpi	r24, 0x2E	; 46
    148c:	b9 f4       	brne	.+46     	; 0x14bc <vfprintf+0xd6>
    148e:	36 fc       	sbrc	r3, 6
    1490:	81 c1       	rjmp	.+770    	; 0x1794 <vfprintf+0x3ae>
    1492:	23 2d       	mov	r18, r3
    1494:	20 64       	ori	r18, 0x40	; 64
    1496:	32 2e       	mov	r3, r18
    1498:	19 c0       	rjmp	.+50     	; 0x14cc <vfprintf+0xe6>
    149a:	36 fe       	sbrs	r3, 6
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vfprintf+0xc4>
    149e:	8a e0       	ldi	r24, 0x0A	; 10
    14a0:	98 9e       	mul	r9, r24
    14a2:	20 0d       	add	r18, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	92 2e       	mov	r9, r18
    14a8:	11 c0       	rjmp	.+34     	; 0x14cc <vfprintf+0xe6>
    14aa:	ea e0       	ldi	r30, 0x0A	; 10
    14ac:	2e 9e       	mul	r2, r30
    14ae:	20 0d       	add	r18, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	22 2e       	mov	r2, r18
    14b4:	f3 2d       	mov	r31, r3
    14b6:	f0 62       	ori	r31, 0x20	; 32
    14b8:	3f 2e       	mov	r3, r31
    14ba:	08 c0       	rjmp	.+16     	; 0x14cc <vfprintf+0xe6>
    14bc:	8c 36       	cpi	r24, 0x6C	; 108
    14be:	21 f4       	brne	.+8      	; 0x14c8 <vfprintf+0xe2>
    14c0:	83 2d       	mov	r24, r3
    14c2:	80 68       	ori	r24, 0x80	; 128
    14c4:	38 2e       	mov	r3, r24
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vfprintf+0xe6>
    14c8:	88 36       	cpi	r24, 0x68	; 104
    14ca:	41 f4       	brne	.+16     	; 0x14dc <vfprintf+0xf6>
    14cc:	f7 01       	movw	r30, r14
    14ce:	93 fd       	sbrc	r25, 3
    14d0:	85 91       	lpm	r24, Z+
    14d2:	93 ff       	sbrs	r25, 3
    14d4:	81 91       	ld	r24, Z+
    14d6:	7f 01       	movw	r14, r30
    14d8:	81 11       	cpse	r24, r1
    14da:	b3 cf       	rjmp	.-154    	; 0x1442 <vfprintf+0x5c>
    14dc:	98 2f       	mov	r25, r24
    14de:	9f 7d       	andi	r25, 0xDF	; 223
    14e0:	95 54       	subi	r25, 0x45	; 69
    14e2:	93 30       	cpi	r25, 0x03	; 3
    14e4:	28 f4       	brcc	.+10     	; 0x14f0 <vfprintf+0x10a>
    14e6:	0c 5f       	subi	r16, 0xFC	; 252
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	9f e3       	ldi	r25, 0x3F	; 63
    14ec:	99 83       	std	Y+1, r25	; 0x01
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <vfprintf+0x124>
    14f0:	83 36       	cpi	r24, 0x63	; 99
    14f2:	31 f0       	breq	.+12     	; 0x1500 <vfprintf+0x11a>
    14f4:	83 37       	cpi	r24, 0x73	; 115
    14f6:	71 f0       	breq	.+28     	; 0x1514 <vfprintf+0x12e>
    14f8:	83 35       	cpi	r24, 0x53	; 83
    14fa:	09 f0       	breq	.+2      	; 0x14fe <vfprintf+0x118>
    14fc:	59 c0       	rjmp	.+178    	; 0x15b0 <vfprintf+0x1ca>
    14fe:	21 c0       	rjmp	.+66     	; 0x1542 <vfprintf+0x15c>
    1500:	f8 01       	movw	r30, r16
    1502:	80 81       	ld	r24, Z
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	0e 5f       	subi	r16, 0xFE	; 254
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	88 24       	eor	r8, r8
    150c:	83 94       	inc	r8
    150e:	91 2c       	mov	r9, r1
    1510:	53 01       	movw	r10, r6
    1512:	13 c0       	rjmp	.+38     	; 0x153a <vfprintf+0x154>
    1514:	28 01       	movw	r4, r16
    1516:	f2 e0       	ldi	r31, 0x02	; 2
    1518:	4f 0e       	add	r4, r31
    151a:	51 1c       	adc	r5, r1
    151c:	f8 01       	movw	r30, r16
    151e:	a0 80       	ld	r10, Z
    1520:	b1 80       	ldd	r11, Z+1	; 0x01
    1522:	36 fe       	sbrs	r3, 6
    1524:	03 c0       	rjmp	.+6      	; 0x152c <vfprintf+0x146>
    1526:	69 2d       	mov	r22, r9
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <vfprintf+0x14a>
    152c:	6f ef       	ldi	r22, 0xFF	; 255
    152e:	7f ef       	ldi	r23, 0xFF	; 255
    1530:	c5 01       	movw	r24, r10
    1532:	0e 94 df 0b 	call	0x17be	; 0x17be <strnlen>
    1536:	4c 01       	movw	r8, r24
    1538:	82 01       	movw	r16, r4
    153a:	f3 2d       	mov	r31, r3
    153c:	ff 77       	andi	r31, 0x7F	; 127
    153e:	3f 2e       	mov	r3, r31
    1540:	16 c0       	rjmp	.+44     	; 0x156e <vfprintf+0x188>
    1542:	28 01       	movw	r4, r16
    1544:	22 e0       	ldi	r18, 0x02	; 2
    1546:	42 0e       	add	r4, r18
    1548:	51 1c       	adc	r5, r1
    154a:	f8 01       	movw	r30, r16
    154c:	a0 80       	ld	r10, Z
    154e:	b1 80       	ldd	r11, Z+1	; 0x01
    1550:	36 fe       	sbrs	r3, 6
    1552:	03 c0       	rjmp	.+6      	; 0x155a <vfprintf+0x174>
    1554:	69 2d       	mov	r22, r9
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0x178>
    155a:	6f ef       	ldi	r22, 0xFF	; 255
    155c:	7f ef       	ldi	r23, 0xFF	; 255
    155e:	c5 01       	movw	r24, r10
    1560:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <strnlen_P>
    1564:	4c 01       	movw	r8, r24
    1566:	f3 2d       	mov	r31, r3
    1568:	f0 68       	ori	r31, 0x80	; 128
    156a:	3f 2e       	mov	r3, r31
    156c:	82 01       	movw	r16, r4
    156e:	33 fc       	sbrc	r3, 3
    1570:	1b c0       	rjmp	.+54     	; 0x15a8 <vfprintf+0x1c2>
    1572:	82 2d       	mov	r24, r2
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	88 16       	cp	r8, r24
    1578:	99 06       	cpc	r9, r25
    157a:	b0 f4       	brcc	.+44     	; 0x15a8 <vfprintf+0x1c2>
    157c:	b6 01       	movw	r22, r12
    157e:	80 e2       	ldi	r24, 0x20	; 32
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    1586:	2a 94       	dec	r2
    1588:	f4 cf       	rjmp	.-24     	; 0x1572 <vfprintf+0x18c>
    158a:	f5 01       	movw	r30, r10
    158c:	37 fc       	sbrc	r3, 7
    158e:	85 91       	lpm	r24, Z+
    1590:	37 fe       	sbrs	r3, 7
    1592:	81 91       	ld	r24, Z+
    1594:	5f 01       	movw	r10, r30
    1596:	b6 01       	movw	r22, r12
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    159e:	21 10       	cpse	r2, r1
    15a0:	2a 94       	dec	r2
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	82 1a       	sub	r8, r18
    15a6:	91 08       	sbc	r9, r1
    15a8:	81 14       	cp	r8, r1
    15aa:	91 04       	cpc	r9, r1
    15ac:	71 f7       	brne	.-36     	; 0x158a <vfprintf+0x1a4>
    15ae:	e8 c0       	rjmp	.+464    	; 0x1780 <vfprintf+0x39a>
    15b0:	84 36       	cpi	r24, 0x64	; 100
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <vfprintf+0x1d2>
    15b4:	89 36       	cpi	r24, 0x69	; 105
    15b6:	41 f5       	brne	.+80     	; 0x1608 <vfprintf+0x222>
    15b8:	f8 01       	movw	r30, r16
    15ba:	37 fe       	sbrs	r3, 7
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <vfprintf+0x1e6>
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	0c 5f       	subi	r16, 0xFC	; 252
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	08 c0       	rjmp	.+16     	; 0x15dc <vfprintf+0x1f6>
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	07 2e       	mov	r0, r23
    15d2:	00 0c       	add	r0, r0
    15d4:	88 0b       	sbc	r24, r24
    15d6:	99 0b       	sbc	r25, r25
    15d8:	0e 5f       	subi	r16, 0xFE	; 254
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	f3 2d       	mov	r31, r3
    15de:	ff 76       	andi	r31, 0x6F	; 111
    15e0:	3f 2e       	mov	r3, r31
    15e2:	97 ff       	sbrs	r25, 7
    15e4:	09 c0       	rjmp	.+18     	; 0x15f8 <vfprintf+0x212>
    15e6:	90 95       	com	r25
    15e8:	80 95       	com	r24
    15ea:	70 95       	com	r23
    15ec:	61 95       	neg	r22
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	8f 4f       	sbci	r24, 0xFF	; 255
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	f0 68       	ori	r31, 0x80	; 128
    15f6:	3f 2e       	mov	r3, r31
    15f8:	2a e0       	ldi	r18, 0x0A	; 10
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	a3 01       	movw	r20, r6
    15fe:	0e 94 26 0c 	call	0x184c	; 0x184c <__ultoa_invert>
    1602:	88 2e       	mov	r8, r24
    1604:	86 18       	sub	r8, r6
    1606:	45 c0       	rjmp	.+138    	; 0x1692 <vfprintf+0x2ac>
    1608:	85 37       	cpi	r24, 0x75	; 117
    160a:	31 f4       	brne	.+12     	; 0x1618 <vfprintf+0x232>
    160c:	23 2d       	mov	r18, r3
    160e:	2f 7e       	andi	r18, 0xEF	; 239
    1610:	b2 2e       	mov	r11, r18
    1612:	2a e0       	ldi	r18, 0x0A	; 10
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	25 c0       	rjmp	.+74     	; 0x1662 <vfprintf+0x27c>
    1618:	93 2d       	mov	r25, r3
    161a:	99 7f       	andi	r25, 0xF9	; 249
    161c:	b9 2e       	mov	r11, r25
    161e:	8f 36       	cpi	r24, 0x6F	; 111
    1620:	c1 f0       	breq	.+48     	; 0x1652 <vfprintf+0x26c>
    1622:	18 f4       	brcc	.+6      	; 0x162a <vfprintf+0x244>
    1624:	88 35       	cpi	r24, 0x58	; 88
    1626:	79 f0       	breq	.+30     	; 0x1646 <vfprintf+0x260>
    1628:	b5 c0       	rjmp	.+362    	; 0x1794 <vfprintf+0x3ae>
    162a:	80 37       	cpi	r24, 0x70	; 112
    162c:	19 f0       	breq	.+6      	; 0x1634 <vfprintf+0x24e>
    162e:	88 37       	cpi	r24, 0x78	; 120
    1630:	21 f0       	breq	.+8      	; 0x163a <vfprintf+0x254>
    1632:	b0 c0       	rjmp	.+352    	; 0x1794 <vfprintf+0x3ae>
    1634:	e9 2f       	mov	r30, r25
    1636:	e0 61       	ori	r30, 0x10	; 16
    1638:	be 2e       	mov	r11, r30
    163a:	b4 fe       	sbrs	r11, 4
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <vfprintf+0x272>
    163e:	fb 2d       	mov	r31, r11
    1640:	f4 60       	ori	r31, 0x04	; 4
    1642:	bf 2e       	mov	r11, r31
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <vfprintf+0x272>
    1646:	34 fe       	sbrs	r3, 4
    1648:	0a c0       	rjmp	.+20     	; 0x165e <vfprintf+0x278>
    164a:	29 2f       	mov	r18, r25
    164c:	26 60       	ori	r18, 0x06	; 6
    164e:	b2 2e       	mov	r11, r18
    1650:	06 c0       	rjmp	.+12     	; 0x165e <vfprintf+0x278>
    1652:	28 e0       	ldi	r18, 0x08	; 8
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <vfprintf+0x27c>
    1658:	20 e1       	ldi	r18, 0x10	; 16
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <vfprintf+0x27c>
    165e:	20 e1       	ldi	r18, 0x10	; 16
    1660:	32 e0       	ldi	r19, 0x02	; 2
    1662:	f8 01       	movw	r30, r16
    1664:	b7 fe       	sbrs	r11, 7
    1666:	07 c0       	rjmp	.+14     	; 0x1676 <vfprintf+0x290>
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	0c 5f       	subi	r16, 0xFC	; 252
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <vfprintf+0x29c>
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 5f       	subi	r16, 0xFE	; 254
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	a3 01       	movw	r20, r6
    1684:	0e 94 26 0c 	call	0x184c	; 0x184c <__ultoa_invert>
    1688:	88 2e       	mov	r8, r24
    168a:	86 18       	sub	r8, r6
    168c:	fb 2d       	mov	r31, r11
    168e:	ff 77       	andi	r31, 0x7F	; 127
    1690:	3f 2e       	mov	r3, r31
    1692:	36 fe       	sbrs	r3, 6
    1694:	0d c0       	rjmp	.+26     	; 0x16b0 <vfprintf+0x2ca>
    1696:	23 2d       	mov	r18, r3
    1698:	2e 7f       	andi	r18, 0xFE	; 254
    169a:	a2 2e       	mov	r10, r18
    169c:	89 14       	cp	r8, r9
    169e:	58 f4       	brcc	.+22     	; 0x16b6 <vfprintf+0x2d0>
    16a0:	34 fe       	sbrs	r3, 4
    16a2:	0b c0       	rjmp	.+22     	; 0x16ba <vfprintf+0x2d4>
    16a4:	32 fc       	sbrc	r3, 2
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <vfprintf+0x2d4>
    16a8:	83 2d       	mov	r24, r3
    16aa:	8e 7e       	andi	r24, 0xEE	; 238
    16ac:	a8 2e       	mov	r10, r24
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <vfprintf+0x2d4>
    16b0:	b8 2c       	mov	r11, r8
    16b2:	a3 2c       	mov	r10, r3
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <vfprintf+0x2d6>
    16b6:	b8 2c       	mov	r11, r8
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <vfprintf+0x2d6>
    16ba:	b9 2c       	mov	r11, r9
    16bc:	a4 fe       	sbrs	r10, 4
    16be:	0f c0       	rjmp	.+30     	; 0x16de <vfprintf+0x2f8>
    16c0:	fe 01       	movw	r30, r28
    16c2:	e8 0d       	add	r30, r8
    16c4:	f1 1d       	adc	r31, r1
    16c6:	80 81       	ld	r24, Z
    16c8:	80 33       	cpi	r24, 0x30	; 48
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <vfprintf+0x2ee>
    16cc:	9a 2d       	mov	r25, r10
    16ce:	99 7e       	andi	r25, 0xE9	; 233
    16d0:	a9 2e       	mov	r10, r25
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <vfprintf+0x300>
    16d4:	a2 fe       	sbrs	r10, 2
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x2fe>
    16d8:	b3 94       	inc	r11
    16da:	b3 94       	inc	r11
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <vfprintf+0x300>
    16de:	8a 2d       	mov	r24, r10
    16e0:	86 78       	andi	r24, 0x86	; 134
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <vfprintf+0x300>
    16e4:	b3 94       	inc	r11
    16e6:	a3 fc       	sbrc	r10, 3
    16e8:	11 c0       	rjmp	.+34     	; 0x170c <vfprintf+0x326>
    16ea:	a0 fe       	sbrs	r10, 0
    16ec:	06 c0       	rjmp	.+12     	; 0x16fa <vfprintf+0x314>
    16ee:	b2 14       	cp	r11, r2
    16f0:	88 f4       	brcc	.+34     	; 0x1714 <vfprintf+0x32e>
    16f2:	28 0c       	add	r2, r8
    16f4:	92 2c       	mov	r9, r2
    16f6:	9b 18       	sub	r9, r11
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <vfprintf+0x330>
    16fa:	b2 14       	cp	r11, r2
    16fc:	60 f4       	brcc	.+24     	; 0x1716 <vfprintf+0x330>
    16fe:	b6 01       	movw	r22, r12
    1700:	80 e2       	ldi	r24, 0x20	; 32
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    1708:	b3 94       	inc	r11
    170a:	f7 cf       	rjmp	.-18     	; 0x16fa <vfprintf+0x314>
    170c:	b2 14       	cp	r11, r2
    170e:	18 f4       	brcc	.+6      	; 0x1716 <vfprintf+0x330>
    1710:	2b 18       	sub	r2, r11
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x332>
    1714:	98 2c       	mov	r9, r8
    1716:	21 2c       	mov	r2, r1
    1718:	a4 fe       	sbrs	r10, 4
    171a:	10 c0       	rjmp	.+32     	; 0x173c <vfprintf+0x356>
    171c:	b6 01       	movw	r22, r12
    171e:	80 e3       	ldi	r24, 0x30	; 48
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    1726:	a2 fe       	sbrs	r10, 2
    1728:	17 c0       	rjmp	.+46     	; 0x1758 <vfprintf+0x372>
    172a:	a1 fc       	sbrc	r10, 1
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <vfprintf+0x34e>
    172e:	88 e7       	ldi	r24, 0x78	; 120
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <vfprintf+0x352>
    1734:	88 e5       	ldi	r24, 0x58	; 88
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	b6 01       	movw	r22, r12
    173a:	0c c0       	rjmp	.+24     	; 0x1754 <vfprintf+0x36e>
    173c:	8a 2d       	mov	r24, r10
    173e:	86 78       	andi	r24, 0x86	; 134
    1740:	59 f0       	breq	.+22     	; 0x1758 <vfprintf+0x372>
    1742:	a1 fe       	sbrs	r10, 1
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0x364>
    1746:	8b e2       	ldi	r24, 0x2B	; 43
    1748:	01 c0       	rjmp	.+2      	; 0x174c <vfprintf+0x366>
    174a:	80 e2       	ldi	r24, 0x20	; 32
    174c:	a7 fc       	sbrc	r10, 7
    174e:	8d e2       	ldi	r24, 0x2D	; 45
    1750:	b6 01       	movw	r22, r12
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    1758:	89 14       	cp	r8, r9
    175a:	38 f4       	brcc	.+14     	; 0x176a <vfprintf+0x384>
    175c:	b6 01       	movw	r22, r12
    175e:	80 e3       	ldi	r24, 0x30	; 48
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    1766:	9a 94       	dec	r9
    1768:	f7 cf       	rjmp	.-18     	; 0x1758 <vfprintf+0x372>
    176a:	8a 94       	dec	r8
    176c:	f3 01       	movw	r30, r6
    176e:	e8 0d       	add	r30, r8
    1770:	f1 1d       	adc	r31, r1
    1772:	80 81       	ld	r24, Z
    1774:	b6 01       	movw	r22, r12
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    177c:	81 10       	cpse	r8, r1
    177e:	f5 cf       	rjmp	.-22     	; 0x176a <vfprintf+0x384>
    1780:	22 20       	and	r2, r2
    1782:	09 f4       	brne	.+2      	; 0x1786 <vfprintf+0x3a0>
    1784:	42 ce       	rjmp	.-892    	; 0x140a <vfprintf+0x24>
    1786:	b6 01       	movw	r22, r12
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <fputc>
    1790:	2a 94       	dec	r2
    1792:	f6 cf       	rjmp	.-20     	; 0x1780 <vfprintf+0x39a>
    1794:	f6 01       	movw	r30, r12
    1796:	86 81       	ldd	r24, Z+6	; 0x06
    1798:	97 81       	ldd	r25, Z+7	; 0x07
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <vfprintf+0x3ba>
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	9f ef       	ldi	r25, 0xFF	; 255
    17a0:	2b 96       	adiw	r28, 0x0b	; 11
    17a2:	e2 e1       	ldi	r30, 0x12	; 18
    17a4:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__epilogue_restores__>

000017a8 <strnlen_P>:
    17a8:	fc 01       	movw	r30, r24
    17aa:	05 90       	lpm	r0, Z+
    17ac:	61 50       	subi	r22, 0x01	; 1
    17ae:	70 40       	sbci	r23, 0x00	; 0
    17b0:	01 10       	cpse	r0, r1
    17b2:	d8 f7       	brcc	.-10     	; 0x17aa <strnlen_P+0x2>
    17b4:	80 95       	com	r24
    17b6:	90 95       	com	r25
    17b8:	8e 0f       	add	r24, r30
    17ba:	9f 1f       	adc	r25, r31
    17bc:	08 95       	ret

000017be <strnlen>:
    17be:	fc 01       	movw	r30, r24
    17c0:	61 50       	subi	r22, 0x01	; 1
    17c2:	70 40       	sbci	r23, 0x00	; 0
    17c4:	01 90       	ld	r0, Z+
    17c6:	01 10       	cpse	r0, r1
    17c8:	d8 f7       	brcc	.-10     	; 0x17c0 <strnlen+0x2>
    17ca:	80 95       	com	r24
    17cc:	90 95       	com	r25
    17ce:	8e 0f       	add	r24, r30
    17d0:	9f 1f       	adc	r25, r31
    17d2:	08 95       	ret

000017d4 <fputc>:
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	fb 01       	movw	r30, r22
    17de:	23 81       	ldd	r18, Z+3	; 0x03
    17e0:	21 fd       	sbrc	r18, 1
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <fputc+0x16>
    17e4:	8f ef       	ldi	r24, 0xFF	; 255
    17e6:	9f ef       	ldi	r25, 0xFF	; 255
    17e8:	2c c0       	rjmp	.+88     	; 0x1842 <fputc+0x6e>
    17ea:	22 ff       	sbrs	r18, 2
    17ec:	16 c0       	rjmp	.+44     	; 0x181a <fputc+0x46>
    17ee:	46 81       	ldd	r20, Z+6	; 0x06
    17f0:	57 81       	ldd	r21, Z+7	; 0x07
    17f2:	24 81       	ldd	r18, Z+4	; 0x04
    17f4:	35 81       	ldd	r19, Z+5	; 0x05
    17f6:	42 17       	cp	r20, r18
    17f8:	53 07       	cpc	r21, r19
    17fa:	44 f4       	brge	.+16     	; 0x180c <fputc+0x38>
    17fc:	a0 81       	ld	r26, Z
    17fe:	b1 81       	ldd	r27, Z+1	; 0x01
    1800:	9d 01       	movw	r18, r26
    1802:	2f 5f       	subi	r18, 0xFF	; 255
    1804:	3f 4f       	sbci	r19, 0xFF	; 255
    1806:	31 83       	std	Z+1, r19	; 0x01
    1808:	20 83       	st	Z, r18
    180a:	8c 93       	st	X, r24
    180c:	26 81       	ldd	r18, Z+6	; 0x06
    180e:	37 81       	ldd	r19, Z+7	; 0x07
    1810:	2f 5f       	subi	r18, 0xFF	; 255
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	37 83       	std	Z+7, r19	; 0x07
    1816:	26 83       	std	Z+6, r18	; 0x06
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <fputc+0x6e>
    181a:	8b 01       	movw	r16, r22
    181c:	ec 01       	movw	r28, r24
    181e:	fb 01       	movw	r30, r22
    1820:	00 84       	ldd	r0, Z+8	; 0x08
    1822:	f1 85       	ldd	r31, Z+9	; 0x09
    1824:	e0 2d       	mov	r30, r0
    1826:	09 95       	icall
    1828:	89 2b       	or	r24, r25
    182a:	e1 f6       	brne	.-72     	; 0x17e4 <fputc+0x10>
    182c:	d8 01       	movw	r26, r16
    182e:	16 96       	adiw	r26, 0x06	; 6
    1830:	8d 91       	ld	r24, X+
    1832:	9c 91       	ld	r25, X
    1834:	17 97       	sbiw	r26, 0x07	; 7
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	17 96       	adiw	r26, 0x07	; 7
    183a:	9c 93       	st	X, r25
    183c:	8e 93       	st	-X, r24
    183e:	16 97       	sbiw	r26, 0x06	; 6
    1840:	ce 01       	movw	r24, r28
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	08 95       	ret

0000184c <__ultoa_invert>:
    184c:	fa 01       	movw	r30, r20
    184e:	aa 27       	eor	r26, r26
    1850:	28 30       	cpi	r18, 0x08	; 8
    1852:	51 f1       	breq	.+84     	; 0x18a8 <__ultoa_invert+0x5c>
    1854:	20 31       	cpi	r18, 0x10	; 16
    1856:	81 f1       	breq	.+96     	; 0x18b8 <__ultoa_invert+0x6c>
    1858:	e8 94       	clt
    185a:	6f 93       	push	r22
    185c:	6e 7f       	andi	r22, 0xFE	; 254
    185e:	6e 5f       	subi	r22, 0xFE	; 254
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	8f 4f       	sbci	r24, 0xFF	; 255
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	af 4f       	sbci	r26, 0xFF	; 255
    1868:	b1 e0       	ldi	r27, 0x01	; 1
    186a:	3e d0       	rcall	.+124    	; 0x18e8 <__ultoa_invert+0x9c>
    186c:	b4 e0       	ldi	r27, 0x04	; 4
    186e:	3c d0       	rcall	.+120    	; 0x18e8 <__ultoa_invert+0x9c>
    1870:	67 0f       	add	r22, r23
    1872:	78 1f       	adc	r23, r24
    1874:	89 1f       	adc	r24, r25
    1876:	9a 1f       	adc	r25, r26
    1878:	a1 1d       	adc	r26, r1
    187a:	68 0f       	add	r22, r24
    187c:	79 1f       	adc	r23, r25
    187e:	8a 1f       	adc	r24, r26
    1880:	91 1d       	adc	r25, r1
    1882:	a1 1d       	adc	r26, r1
    1884:	6a 0f       	add	r22, r26
    1886:	71 1d       	adc	r23, r1
    1888:	81 1d       	adc	r24, r1
    188a:	91 1d       	adc	r25, r1
    188c:	a1 1d       	adc	r26, r1
    188e:	20 d0       	rcall	.+64     	; 0x18d0 <__ultoa_invert+0x84>
    1890:	09 f4       	brne	.+2      	; 0x1894 <__ultoa_invert+0x48>
    1892:	68 94       	set
    1894:	3f 91       	pop	r19
    1896:	2a e0       	ldi	r18, 0x0A	; 10
    1898:	26 9f       	mul	r18, r22
    189a:	11 24       	eor	r1, r1
    189c:	30 19       	sub	r19, r0
    189e:	30 5d       	subi	r19, 0xD0	; 208
    18a0:	31 93       	st	Z+, r19
    18a2:	de f6       	brtc	.-74     	; 0x185a <__ultoa_invert+0xe>
    18a4:	cf 01       	movw	r24, r30
    18a6:	08 95       	ret
    18a8:	46 2f       	mov	r20, r22
    18aa:	47 70       	andi	r20, 0x07	; 7
    18ac:	40 5d       	subi	r20, 0xD0	; 208
    18ae:	41 93       	st	Z+, r20
    18b0:	b3 e0       	ldi	r27, 0x03	; 3
    18b2:	0f d0       	rcall	.+30     	; 0x18d2 <__ultoa_invert+0x86>
    18b4:	c9 f7       	brne	.-14     	; 0x18a8 <__ultoa_invert+0x5c>
    18b6:	f6 cf       	rjmp	.-20     	; 0x18a4 <__ultoa_invert+0x58>
    18b8:	46 2f       	mov	r20, r22
    18ba:	4f 70       	andi	r20, 0x0F	; 15
    18bc:	40 5d       	subi	r20, 0xD0	; 208
    18be:	4a 33       	cpi	r20, 0x3A	; 58
    18c0:	18 f0       	brcs	.+6      	; 0x18c8 <__ultoa_invert+0x7c>
    18c2:	49 5d       	subi	r20, 0xD9	; 217
    18c4:	31 fd       	sbrc	r19, 1
    18c6:	40 52       	subi	r20, 0x20	; 32
    18c8:	41 93       	st	Z+, r20
    18ca:	02 d0       	rcall	.+4      	; 0x18d0 <__ultoa_invert+0x84>
    18cc:	a9 f7       	brne	.-22     	; 0x18b8 <__ultoa_invert+0x6c>
    18ce:	ea cf       	rjmp	.-44     	; 0x18a4 <__ultoa_invert+0x58>
    18d0:	b4 e0       	ldi	r27, 0x04	; 4
    18d2:	a6 95       	lsr	r26
    18d4:	97 95       	ror	r25
    18d6:	87 95       	ror	r24
    18d8:	77 95       	ror	r23
    18da:	67 95       	ror	r22
    18dc:	ba 95       	dec	r27
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <__ultoa_invert+0x86>
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	61 05       	cpc	r22, r1
    18e4:	71 05       	cpc	r23, r1
    18e6:	08 95       	ret
    18e8:	9b 01       	movw	r18, r22
    18ea:	ac 01       	movw	r20, r24
    18ec:	0a 2e       	mov	r0, r26
    18ee:	06 94       	lsr	r0
    18f0:	57 95       	ror	r21
    18f2:	47 95       	ror	r20
    18f4:	37 95       	ror	r19
    18f6:	27 95       	ror	r18
    18f8:	ba 95       	dec	r27
    18fa:	c9 f7       	brne	.-14     	; 0x18ee <__ultoa_invert+0xa2>
    18fc:	62 0f       	add	r22, r18
    18fe:	73 1f       	adc	r23, r19
    1900:	84 1f       	adc	r24, r20
    1902:	95 1f       	adc	r25, r21
    1904:	a0 1d       	adc	r26, r0
    1906:	08 95       	ret

00001908 <__muluhisi3>:
    1908:	0e 94 ce 0c 	call	0x199c	; 0x199c <__umulhisi3>
    190c:	a5 9f       	mul	r26, r21
    190e:	90 0d       	add	r25, r0
    1910:	b4 9f       	mul	r27, r20
    1912:	90 0d       	add	r25, r0
    1914:	a4 9f       	mul	r26, r20
    1916:	80 0d       	add	r24, r0
    1918:	91 1d       	adc	r25, r1
    191a:	11 24       	eor	r1, r1
    191c:	08 95       	ret

0000191e <__mulshisi3>:
    191e:	b7 ff       	sbrs	r27, 7
    1920:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__muluhisi3>

00001924 <__mulohisi3>:
    1924:	0e 94 84 0c 	call	0x1908	; 0x1908 <__muluhisi3>
    1928:	82 1b       	sub	r24, r18
    192a:	93 0b       	sbc	r25, r19
    192c:	08 95       	ret

0000192e <__prologue_saves__>:
    192e:	2f 92       	push	r2
    1930:	3f 92       	push	r3
    1932:	4f 92       	push	r4
    1934:	5f 92       	push	r5
    1936:	6f 92       	push	r6
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	ca 1b       	sub	r28, r26
    1958:	db 0b       	sbc	r29, r27
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	09 94       	ijmp

00001966 <__epilogue_restores__>:
    1966:	2a 88       	ldd	r2, Y+18	; 0x12
    1968:	39 88       	ldd	r3, Y+17	; 0x11
    196a:	48 88       	ldd	r4, Y+16	; 0x10
    196c:	5f 84       	ldd	r5, Y+15	; 0x0f
    196e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1970:	7d 84       	ldd	r7, Y+13	; 0x0d
    1972:	8c 84       	ldd	r8, Y+12	; 0x0c
    1974:	9b 84       	ldd	r9, Y+11	; 0x0b
    1976:	aa 84       	ldd	r10, Y+10	; 0x0a
    1978:	b9 84       	ldd	r11, Y+9	; 0x09
    197a:	c8 84       	ldd	r12, Y+8	; 0x08
    197c:	df 80       	ldd	r13, Y+7	; 0x07
    197e:	ee 80       	ldd	r14, Y+6	; 0x06
    1980:	fd 80       	ldd	r15, Y+5	; 0x05
    1982:	0c 81       	ldd	r16, Y+4	; 0x04
    1984:	1b 81       	ldd	r17, Y+3	; 0x03
    1986:	aa 81       	ldd	r26, Y+2	; 0x02
    1988:	b9 81       	ldd	r27, Y+1	; 0x01
    198a:	ce 0f       	add	r28, r30
    198c:	d1 1d       	adc	r29, r1
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	ed 01       	movw	r28, r26
    199a:	08 95       	ret

0000199c <__umulhisi3>:
    199c:	a2 9f       	mul	r26, r18
    199e:	b0 01       	movw	r22, r0
    19a0:	b3 9f       	mul	r27, r19
    19a2:	c0 01       	movw	r24, r0
    19a4:	a3 9f       	mul	r26, r19
    19a6:	70 0d       	add	r23, r0
    19a8:	81 1d       	adc	r24, r1
    19aa:	11 24       	eor	r1, r1
    19ac:	91 1d       	adc	r25, r1
    19ae:	b2 9f       	mul	r27, r18
    19b0:	70 0d       	add	r23, r0
    19b2:	81 1d       	adc	r24, r1
    19b4:	11 24       	eor	r1, r1
    19b6:	91 1d       	adc	r25, r1
    19b8:	08 95       	ret

000019ba <_exit>:
    19ba:	f8 94       	cli

000019bc <__stop_program>:
    19bc:	ff cf       	rjmp	.-2      	; 0x19bc <__stop_program>
