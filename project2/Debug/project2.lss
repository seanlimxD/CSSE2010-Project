
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001890  00001924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000163  0080011c  0080011c  00001940  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030c6  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014a9  00000000  00000000  00004e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c23  00000000  00000000  000062e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d0  00000000  00000000  00007f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f8e  00000000  00000000  000087d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cc6  00000000  00000000  00009766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000b42c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_5>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__vector_16>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__vector_20>
      54:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_21>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      6c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      70:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      74:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      78:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2459>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2432>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
      b4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 53     ake Project by S
      c4:	65 61 6e 20 4c 69 6d 00                             ean Lim.

000000cc <__c.2430>:
      cc:	53 6e 61 6b 65 00                                   Snake.

000000d2 <numbers>:
      d2:	3d 01 3a 01 36 01 32 01 2e 01 2a 01 26 01 22 01     =.:.6.2...*.&.".
      e2:	1e 01 1a 01                                         ....

000000e6 <letters>:
      e6:	ac 01 a8 01 a4 01 a0 01 9c 01 98 01 94 01 90 01     ................
      f6:	8d 01 89 01 85 01 81 01 7c 01 78 01 74 01 70 01     ........|.x.t.p.
     106:	6b 01 67 01 63 01 5e 01 5a 01 55 01 50 01 4b 01     k.g.c.^.Z.U.P.K.
     116:	46 01 41 01                                         F.A.

0000011a <cols_9>:
     11a:	64 92 92 7d                                         d..}

0000011e <cols_8>:
     11e:	6c 92 92 6d                                         l..m

00000122 <cols_7>:
     122:	80 9e a0 c1                                         ....

00000126 <cols_6>:
     126:	7c 92 92 4d                                         |..M

0000012a <cols_5>:
     12a:	e4 a2 a2 9d                                         ....

0000012e <cols_4>:
     12e:	18 28 48 ff                                         .(H.

00000132 <cols_3>:
     132:	44 92 92 6d                                         D..m

00000136 <cols_2>:
     136:	46 8a 92 63                                         F..c

0000013a <cols_1>:
     13a:	42 fe 03                                            B..

0000013d <cols_0>:
     13d:	7c 92 a2 7d                                         |..}

00000141 <cols_Z>:
     141:	86 8a 92 a2 c3                                      .....

00000146 <cols_Y>:
     146:	e0 10 0e 10 e1                                      .....

0000014b <cols_X>:
     14b:	c6 28 10 28 c7                                      .(.(.

00000150 <cols_W>:
     150:	fc 02 1c 02 fd                                      .....

00000155 <cols_V>:
     155:	f8 04 02 04 f9                                      .....

0000015a <cols_U>:
     15a:	fc 02 02 fd                                         ....

0000015e <cols_T>:
     15e:	80 80 fe 80 81                                      .....

00000163 <cols_S>:
     163:	64 92 92 4d                                         d..M

00000167 <cols_R>:
     167:	fe 90 98 67                                         ...g

0000016b <cols_Q>:
     16b:	7c 82 8a 7c 03                                      |..|.

00000170 <cols_P>:
     170:	fe 90 90 61                                         ...a

00000174 <cols_O>:
     174:	7c 82 82 7d                                         |..}

00000178 <cols_N>:
     178:	fe 20 10 ff                                         . ..

0000017c <cols_M>:
     17c:	fe 40 30 40 ff                                      .@0@.

00000181 <cols_L>:
     181:	fe 02 02 03                                         ....

00000185 <cols_K>:
     185:	fe 10 28 c7                                         ..(.

00000189 <cols_J>:
     189:	04 02 02 fd                                         ....

0000018d <cols_I>:
     18d:	82 fe 83                                            ...

00000190 <cols_H>:
     190:	fe 10 10 ff                                         ....

00000194 <cols_G>:
     194:	7c 82 92 5d                                         |..]

00000198 <cols_F>:
     198:	fe 90 90 81                                         ....

0000019c <cols_E>:
     19c:	fe 92 92 83                                         ....

000001a0 <cols_D>:
     1a0:	fe 82 82 7d                                         ...}

000001a4 <cols_C>:
     1a4:	7c 82 82 45                                         |..E

000001a8 <cols_B>:
     1a8:	fe 92 92 6d                                         ...m

000001ac <cols_A>:
     1ac:	7e 90 90 7f                                         ~...

000001b0 <__c.2054>:
     1b0:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001b7 <__c.2050>:
     1b7:	1b 5b 25 64 6d 00                                   .[%dm.

000001bd <__c.2040>:
     1bd:	1b 5b 32 4a 00                                      .[2J.

000001c2 <__c.2025>:
     1c2:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d8 e0       	ldi	r29, 0x08	; 8
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	e0 e9       	ldi	r30, 0x90	; 144
     1e0:	f8 e1       	ldi	r31, 0x18	; 24
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	ac 31       	cpi	r26, 0x1C	; 28
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	22 e0       	ldi	r18, 0x02	; 2
     1f0:	ac e1       	ldi	r26, 0x1C	; 28
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	af 37       	cpi	r26, 0x7F	; 127
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 3a 04 	call	0x874	; 0x874 <main>
     202:	0c 94 46 0c 	jmp	0x188c	; 0x188c <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     20a:	e8 e6       	ldi	r30, 0x68	; 104
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	82 60       	ori	r24, 0x02	; 2
     212:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     214:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     216:	ec e6       	ldi	r30, 0x6C	; 108
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8f 60       	ori	r24, 0x0F	; 15
     21e:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     220:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
     224:	08 95       	ret

00000226 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     226:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
     22a:	08 95       	ret

0000022c <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     22c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     230:	18 16       	cp	r1, r24
     232:	3c f5       	brge	.+78     	; 0x282 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     234:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     238:	6f b7       	in	r22, 0x3f	; 63
		cli();
     23a:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     23c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end>
     240:	92 30       	cpi	r25, 0x02	; 2
     242:	b4 f0       	brlt	.+44     	; 0x270 <button_pushed+0x44>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     24a:	f9 01       	movw	r30, r18
     24c:	e3 5e       	subi	r30, 0xE3	; 227
     24e:	fe 4f       	sbci	r31, 0xFE	; 254
     250:	40 81       	ld	r20, Z
     252:	f9 01       	movw	r30, r18
     254:	e4 5e       	subi	r30, 0xE4	; 228
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     25a:	9f 5f       	subi	r25, 0xFF	; 255
     25c:	29 2f       	mov	r18, r25
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
     264:	04 2e       	mov	r0, r20
     266:	00 0c       	add	r0, r0
     268:	55 0b       	sbc	r21, r21
     26a:	24 17       	cp	r18, r20
     26c:	35 07       	cpc	r19, r21
     26e:	6c f3       	brlt	.-38     	; 0x24a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     270:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end>
     274:	91 50       	subi	r25, 0x01	; 1
     276:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <__data_end>
		
		if(interrupts_were_enabled) {
     27a:	66 23       	and	r22, r22
     27c:	1c f4       	brge	.+6      	; 0x284 <button_pushed+0x58>
			// Turn them back on again
			sei();
     27e:	78 94       	sei
     280:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     282:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     284:	08 95       	ret

00000286 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	2f 93       	push	r18
     292:	3f 93       	push	r19
     294:	4f 93       	push	r20
     296:	5f 93       	push	r21
     298:	6f 93       	push	r22
     29a:	7f 93       	push	r23
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	ef 93       	push	r30
     2a2:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2a4:	43 b1       	in	r20, 0x03	; 3
     2a6:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2a8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     2ac:	88 30       	cpi	r24, 0x08	; 8
     2ae:	64 f5       	brge	.+88     	; 0x308 <__vector_5+0x82>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2b4:	64 2f       	mov	r22, r20
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	9b 01       	movw	r18, r22
     2ba:	08 2e       	mov	r0, r24
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__vector_5+0x3c>
     2be:	35 95       	asr	r19
     2c0:	27 95       	ror	r18
     2c2:	0a 94       	dec	r0
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <__vector_5+0x38>
     2c6:	20 ff       	sbrs	r18, 0
     2c8:	1b c0       	rjmp	.+54     	; 0x300 <__vector_5+0x7a>
     2ca:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <last_button_state>
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	08 2e       	mov	r0, r24
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <__vector_5+0x52>
     2d4:	35 95       	asr	r19
     2d6:	27 95       	ror	r18
     2d8:	0a 94       	dec	r0
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <__vector_5+0x4e>
     2dc:	20 fd       	sbrc	r18, 0
     2de:	10 c0       	rjmp	.+32     	; 0x300 <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2e0:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <__data_end>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	2e 0f       	add	r18, r30
     2e8:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <__data_end>
     2ec:	0e 2e       	mov	r0, r30
     2ee:	00 0c       	add	r0, r0
     2f0:	ff 0b       	sbc	r31, r31
     2f2:	e3 5e       	subi	r30, 0xE3	; 227
     2f4:	fe 4f       	sbci	r31, 0xFE	; 254
     2f6:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     2f8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     2fc:	28 30       	cpi	r18, 0x08	; 8
     2fe:	24 f4       	brge	.+8      	; 0x308 <__vector_5+0x82>
     300:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     302:	84 30       	cpi	r24, 0x04	; 4
     304:	91 05       	cpc	r25, r1
     306:	c1 f6       	brne	.-80     	; 0x2b8 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     308:	40 93 25 01 	sts	0x0125, r20	; 0x800125 <last_button_state>
}
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	9f 91       	pop	r25
     312:	8f 91       	pop	r24
     314:	7f 91       	pop	r23
     316:	6f 91       	pop	r22
     318:	5f 91       	pop	r21
     31a:	4f 91       	pop	r20
     31c:	3f 91       	pop	r19
     31e:	2f 91       	pop	r18
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <init_food>:
/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
}
     32a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <numFoodItems>
     32e:	08 95       	ret

00000330 <food_at>:
     330:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <numFoodItems>
     334:	13 16       	cp	r1, r19
     336:	84 f4       	brge	.+32     	; 0x358 <food_at+0x28>
     338:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <foodPositions>
     33c:	89 17       	cp	r24, r25
     33e:	71 f0       	breq	.+28     	; 0x35c <food_at+0x2c>
     340:	ee e5       	ldi	r30, 0x5E	; 94
     342:	f1 e0       	ldi	r31, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	03 c0       	rjmp	.+6      	; 0x34e <food_at+0x1e>
     348:	21 91       	ld	r18, Z+
     34a:	28 17       	cp	r18, r24
     34c:	49 f0       	breq	.+18     	; 0x360 <food_at+0x30>
     34e:	9f 5f       	subi	r25, 0xFF	; 255
     350:	39 13       	cpse	r19, r25
     352:	fa cf       	rjmp	.-12     	; 0x348 <food_at+0x18>
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	08 95       	ret
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	08 95       	ret
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	08 95       	ret
     360:	89 2f       	mov	r24, r25
     362:	08 95       	ret

00000364 <is_food_at>:
     364:	0e 94 98 01 	call	0x330	; 0x330 <food_at>
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	8f 3f       	cpi	r24, 0xFF	; 255
     36c:	09 f4       	brne	.+2      	; 0x370 <is_food_at+0xc>
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	89 2f       	mov	r24, r25
     372:	08 95       	ret

00000374 <add_food_item>:
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <numFoodItems>
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	d4 f5       	brge	.+116    	; 0x3fa <add_food_item+0x86>
     386:	00 e0       	ldi	r16, 0x00	; 0
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	d0 e0       	ldi	r29, 0x00	; 0
     38c:	c0 e0       	ldi	r28, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <add_food_item+0x20>
     390:	0f 5f       	subi	r16, 0xFF	; 255
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	2c 2f       	mov	r18, r28
     396:	cc 0f       	add	r28, r28
     398:	33 0b       	sbc	r19, r19
     39a:	2d 5f       	subi	r18, 0xFD	; 253
     39c:	3f 4f       	sbci	r19, 0xFF	; 255
     39e:	20 0f       	add	r18, r16
     3a0:	31 1f       	adc	r19, r17
     3a2:	2f 70       	andi	r18, 0x0F	; 15
     3a4:	30 78       	andi	r19, 0x80	; 128
     3a6:	33 23       	and	r19, r19
     3a8:	34 f4       	brge	.+12     	; 0x3b6 <add_food_item+0x42>
     3aa:	21 50       	subi	r18, 0x01	; 1
     3ac:	31 09       	sbc	r19, r1
     3ae:	20 6f       	ori	r18, 0xF0	; 240
     3b0:	3f 6f       	ori	r19, 0xFF	; 255
     3b2:	2f 5f       	subi	r18, 0xFF	; 255
     3b4:	3f 4f       	sbci	r19, 0xFF	; 255
     3b6:	82 2f       	mov	r24, r18
     3b8:	c2 2f       	mov	r28, r18
     3ba:	6d 2f       	mov	r22, r29
     3bc:	dd 0f       	add	r29, r29
     3be:	77 0b       	sbc	r23, r23
     3c0:	6b 5f       	subi	r22, 0xFB	; 251
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	67 70       	andi	r22, 0x07	; 7
     3c6:	70 78       	andi	r23, 0x80	; 128
     3c8:	77 23       	and	r23, r23
     3ca:	34 f4       	brge	.+12     	; 0x3d8 <add_food_item+0x64>
     3cc:	61 50       	subi	r22, 0x01	; 1
     3ce:	71 09       	sbc	r23, r1
     3d0:	68 6f       	ori	r22, 0xF8	; 248
     3d2:	7f 6f       	ori	r23, 0xFF	; 255
     3d4:	6f 5f       	subi	r22, 0xFF	; 255
     3d6:	7f 4f       	sbci	r23, 0xFF	; 255
     3d8:	d6 2f       	mov	r29, r22
     3da:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <position>
     3de:	f8 2e       	mov	r15, r24
     3e0:	03 36       	cpi	r16, 0x63	; 99
     3e2:	11 05       	cpc	r17, r1
     3e4:	61 f0       	breq	.+24     	; 0x3fe <add_food_item+0x8a>
     3e6:	0e 94 41 07 	call	0xe82	; 0xe82 <is_snake_at>
     3ea:	81 11       	cpse	r24, r1
     3ec:	d1 cf       	rjmp	.-94     	; 0x390 <add_food_item+0x1c>
     3ee:	8f 2d       	mov	r24, r15
     3f0:	0e 94 b2 01 	call	0x364	; 0x364 <is_food_at>
     3f4:	81 11       	cpse	r24, r1
     3f6:	cc cf       	rjmp	.-104    	; 0x390 <add_food_item+0x1c>
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fa:	88 e0       	ldi	r24, 0x08	; 8
     3fc:	0f c0       	rjmp	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3fe:	88 e0       	ldi	r24, 0x08	; 8
     400:	0d c0       	rjmp	.+26     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     402:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <numFoodItems>
     406:	e8 2f       	mov	r30, r24
     408:	08 2e       	mov	r0, r24
     40a:	00 0c       	add	r0, r0
     40c:	ff 0b       	sbc	r31, r31
     40e:	e3 5a       	subi	r30, 0xA3	; 163
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	f0 82       	st	Z, r15
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <numFoodItems>
     41a:	8f 2d       	mov	r24, r15
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	08 95       	ret

00000428 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     428:	88 23       	and	r24, r24
     42a:	b4 f0       	brlt	.+44     	; 0x458 <remove_food+0x30>
     42c:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <numFoodItems>
     430:	82 17       	cp	r24, r18
     432:	94 f4       	brge	.+36     	; 0x458 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	82 17       	cp	r24, r18
     438:	64 f4       	brge	.+24     	; 0x452 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     43a:	e8 2f       	mov	r30, r24
     43c:	08 2e       	mov	r0, r24
     43e:	00 0c       	add	r0, r0
     440:	ff 0b       	sbc	r31, r31
     442:	e3 5a       	subi	r30, 0xA3	; 163
     444:	fe 4f       	sbci	r31, 0xFE	; 254
     446:	90 81       	ld	r25, Z
     448:	31 97       	sbiw	r30, 0x01	; 1
     44a:	90 83       	st	Z, r25
     44c:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     44e:	82 17       	cp	r24, r18
     450:	a4 f3       	brlt	.-24     	; 0x43a <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     452:	21 50       	subi	r18, 0x01	; 1
     454:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <numFoodItems>
     458:	08 95       	ret

0000045a <update_display_at_position>:
#define SNAKE_BODY_COLOUR	COLOUR_GREEN
#define FOOD_COLOUR			COLOUR_LIGHT_YELLOW
#define BACKGROUND_COLOUR	COLOUR_BLACK

// Helper function
static void update_display_at_position(PosnType posn, PixelColour colour) {
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	c8 2f       	mov	r28, r24
     462:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     464:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <y_position>
     468:	d8 2f       	mov	r29, r24
     46a:	8c 2f       	mov	r24, r28
     46c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <x_position>
     470:	41 2f       	mov	r20, r17
     472:	6d 2f       	mov	r22, r29
     474:	0e 94 a2 02 	call	0x544	; 0x544 <ledmatrix_update_pixel>
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	08 95       	ret

00000480 <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     484:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ledmatrix_clear>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     488:	0e 94 6d 06 	call	0xcda	; 0xcda <init_snake>
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     48c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_snake_head_position>
     490:	6f e0       	ldi	r22, 0x0F	; 15
     492:	0e 94 2d 02 	call	0x45a	; 0x45a <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     496:	0e 94 97 06 	call	0xd2e	; 0xd2e <get_snake_tail_position>
     49a:	60 ef       	ldi	r22, 0xF0	; 240
     49c:	0e 94 2d 02 	call	0x45a	; 0x45a <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     4a0:	0e 94 95 01 	call	0x32a	; 0x32a <init_food>
     4a4:	c3 e0       	ldi	r28, 0x03	; 3
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     4a6:	0e 94 ba 01 	call	0x374	; 0x374 <add_food_item>
     4aa:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     4ac:	0e 94 ee 02 	call	0x5dc	; 0x5dc <is_position_valid>
     4b0:	88 23       	and	r24, r24
     4b2:	21 f0       	breq	.+8      	; 0x4bc <init_game+0x3c>
			update_display_at_position(food_position, FOOD_COLOUR);
     4b4:	63 e3       	ldi	r22, 0x33	; 51
     4b6:	8d 2f       	mov	r24, r29
     4b8:	0e 94 2d 02 	call	0x45a	; 0x45a <update_display_at_position>
     4bc:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	for(int8_t i = 0; i < 3; i++) {
     4be:	99 f7       	brne	.-26     	; 0x4a6 <init_game+0x26>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <attempt_to_move_snake_forward>:

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     4ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_snake_head_position>
     4d2:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     4d4:	0e 94 a0 06 	call	0xd40	; 0xd40 <advance_snake_head>
     4d8:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     4da:	88 23       	and	r24, r24
     4dc:	4c f1       	brlt	.+82     	; 0x530 <attempt_to_move_snake_forward+0x6a>
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
	}
	PosnType new_head_position = get_snake_head_position();
     4de:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_snake_head_position>
     4e2:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     4e4:	8e ef       	ldi	r24, 0xFE	; 254
     4e6:	8c 0f       	add	r24, r28
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	80 f4       	brcc	.+32     	; 0x50c <attempt_to_move_snake_forward+0x46>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     4ec:	81 2f       	mov	r24, r17
     4ee:	0e 94 98 01 	call	0x330	; 0x330 <food_at>
		remove_food(foodID);
     4f2:	0e 94 14 02 	call	0x428	; 0x428 <remove_food>
		
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     4f6:	0e 94 ba 01 	call	0x374	; 0x374 <add_food_item>
     4fa:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     4fc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <is_position_valid>
     500:	88 23       	and	r24, r24
     502:	21 f0       	breq	.+8      	; 0x50c <attempt_to_move_snake_forward+0x46>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     504:	63 e3       	ldi	r22, 0x33	; 51
     506:	80 2f       	mov	r24, r16
     508:	0e 94 2d 02 	call	0x45a	; 0x45a <update_display_at_position>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     50c:	cd 7f       	andi	r28, 0xFD	; 253
     50e:	c1 30       	cpi	r28, 0x01	; 1
     510:	29 f4       	brne	.+10     	; 0x51c <attempt_to_move_snake_forward+0x56>
		PosnType prev_tail_posn = advance_snake_tail();
     512:	0e 94 13 07 	call	0xe26	; 0xe26 <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	0e 94 2d 02 	call	0x45a	; 0x45a <update_display_at_position>
	}
	
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     51c:	60 ef       	ldi	r22, 0xF0	; 240
     51e:	8d 2f       	mov	r24, r29
     520:	0e 94 2d 02 	call	0x45a	; 0x45a <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     524:	6f e0       	ldi	r22, 0x0F	; 15
     526:	81 2f       	mov	r24, r17
     528:	0e 94 2d 02 	call	0x45a	; 0x45a <update_display_at_position>
	return 1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	01 c0       	rjmp	.+2      	; 0x532 <attempt_to_move_snake_forward+0x6c>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     530:	80 e0       	ldi	r24, 0x00	; 0
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     53c:	80 e8       	ldi	r24, 0x80	; 128
     53e:	0e 94 64 07 	call	0xec8	; 0xec8 <spi_setup_master>
     542:	08 95       	ret

00000544 <ledmatrix_update_pixel>:
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	80 31       	cpi	r24, 0x10	; 16
     54c:	b0 f4       	brcc	.+44     	; 0x57a <ledmatrix_update_pixel+0x36>
     54e:	68 30       	cpi	r22, 0x08	; 8
     550:	a0 f4       	brcc	.+40     	; 0x57a <ledmatrix_update_pixel+0x36>
     552:	14 2f       	mov	r17, r20
     554:	c6 2f       	mov	r28, r22
     556:	d8 2f       	mov	r29, r24
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     55e:	6c 2f       	mov	r22, r28
     560:	67 70       	andi	r22, 0x07	; 7
     562:	80 e1       	ldi	r24, 0x10	; 16
     564:	68 9f       	mul	r22, r24
     566:	90 01       	movw	r18, r0
     568:	11 24       	eor	r1, r1
     56a:	8d 2f       	mov	r24, r29
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	82 2b       	or	r24, r18
     570:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     574:	81 2f       	mov	r24, r17
     576:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	08 95       	ret

00000582 <ledmatrix_update_column>:
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	80 31       	cpi	r24, 0x10	; 16
     58c:	90 f4       	brcc	.+36     	; 0x5b2 <ledmatrix_update_column+0x30>
     58e:	8b 01       	movw	r16, r22
     590:	c8 2f       	mov	r28, r24
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     598:	8c 2f       	mov	r24, r28
     59a:	8f 70       	andi	r24, 0x0F	; 15
     59c:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     5a0:	e8 01       	movw	r28, r16
     5a2:	08 5f       	subi	r16, 0xF8	; 248
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
     5a6:	89 91       	ld	r24, Y+
     5a8:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     5ac:	c0 17       	cp	r28, r16
     5ae:	d1 07       	cpc	r29, r17
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <ledmatrix_update_column+0x24>
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <ledmatrix_shift_display_left>:
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     5c8:	08 95       	ret

000005ca <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     5ca:	8f e0       	ldi	r24, 0x0F	; 15
     5cc:	0e 94 8c 07 	call	0xf18	; 0xf18 <spi_send_byte>
     5d0:	08 95       	ret

000005d2 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     5d2:	82 95       	swap	r24
     5d4:	8f 70       	andi	r24, 0x0F	; 15
     5d6:	08 95       	ret

000005d8 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     5d8:	8f 70       	andi	r24, 0x0F	; 15
     5da:	08 95       	ret

000005dc <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     5dc:	83 fb       	bst	r24, 3
     5de:	88 27       	eor	r24, r24
     5e0:	80 f9       	bld	r24, 0
}
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	89 27       	eor	r24, r25
     5e6:	08 95       	ret

000005e8 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     5e8:	20 e1       	ldi	r18, 0x10	; 16
     5ea:	82 9f       	mul	r24, r18
     5ec:	c0 01       	movw	r24, r0
     5ee:	11 24       	eor	r1, r1
     5f0:	67 70       	andi	r22, 0x07	; 7
}
     5f2:	86 2b       	or	r24, r22
     5f4:	08 95       	ret

000005f6 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     5f6:	0e 94 9e 02 	call	0x53c	; 0x53c <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     5fa:	0e 94 05 01 	call	0x20a	; 0x20a <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	7b e4       	ldi	r23, 0x4B	; 75
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 85 05 	call	0xb0a	; 0xb0a <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     60c:	0e 94 ca 07 	call	0xf94	; 0xf94 <init_timer0>
	
	// Turn on global interrupts
	sei();
     610:	78 94       	sei
     612:	08 95       	ret

00000614 <splash_screen>:
}

void splash_screen(void) {
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 b4 07 	call	0xf68	; 0xf68 <set_display_attribute>
	clear_terminal();
     624:	0e 94 ab 07 	call	0xf56	; 0xf56 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     628:	0e 94 c1 07 	call	0xf82	; 0xf82 <hide_cursor>
	move_cursor(3,3);
     62c:	63 e0       	ldi	r22, 0x03	; 3
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	0e 94 92 07 	call	0xf24	; 0xf24 <move_cursor>
	printf_P(PSTR("Snake"));
     634:	8c ec       	ldi	r24, 0xCC	; 204
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
	
	move_cursor(3,5);
     640:	65 e0       	ldi	r22, 0x05	; 5
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	0e 94 92 07 	call	0xf24	; 0xf24 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     648:	80 e2       	ldi	r24, 0x20	; 32
     64a:	0e 94 b4 07 	call	0xf68	; 0xf68 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Sean Lim"));	
     64e:	84 ea       	ldi	r24, 0xA4	; 164
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     65a:	85 e2       	ldi	r24, 0x25	; 37
     65c:	0e 94 b4 07 	call	0xf68	; 0xf68 <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     660:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ledmatrix_clear>
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     66c:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     66e:	0f 2e       	mov	r0, r31
     670:	ff e0       	ldi	r31, 0x0F	; 15
     672:	ff 2e       	mov	r15, r31
     674:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     676:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     678:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     67a:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
     67c:	6c 2f       	mov	r22, r28
     67e:	83 e1       	ldi	r24, 0x13	; 19
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 4e 04 	call	0x89c	; 0x89c <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     686:	0d c0       	rjmp	.+26     	; 0x6a2 <splash_screen+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     688:	2f e7       	ldi	r18, 0x7F	; 127
     68a:	8c e2       	ldi	r24, 0x2C	; 44
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	21 50       	subi	r18, 0x01	; 1
     690:	80 40       	sbci	r24, 0x00	; 0
     692:	90 40       	sbci	r25, 0x00	; 0
     694:	e1 f7       	brne	.-8      	; 0x68e <splash_screen+0x7a>
     696:	00 c0       	rjmp	.+0      	; 0x698 <splash_screen+0x84>
     698:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     69a:	0e 94 16 01 	call	0x22c	; 0x22c <button_pushed>
     69e:	8f 3f       	cpi	r24, 0xFF	; 255
     6a0:	a9 f5       	brne	.+106    	; 0x70c <splash_screen+0xf8>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     6a2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <scroll_display>
     6a6:	81 11       	cpse	r24, r1
     6a8:	ef cf       	rjmp	.-34     	; 0x688 <splash_screen+0x74>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     6aa:	0e 94 a1 08 	call	0x1142	; 0x1142 <random>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	83 70       	andi	r24, 0x03	; 3
     6b4:	99 27       	eor	r25, r25
     6b6:	aa 27       	eor	r26, r26
     6b8:	b0 78       	andi	r27, 0x80	; 128
     6ba:	bb 23       	and	r27, r27
     6bc:	54 f4       	brge	.+20     	; 0x6d2 <splash_screen+0xbe>
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	a1 09       	sbc	r26, r1
     6c2:	b1 09       	sbc	r27, r1
     6c4:	8c 6f       	ori	r24, 0xFC	; 252
     6c6:	9f 6f       	ori	r25, 0xFF	; 255
     6c8:	af 6f       	ori	r26, 0xFF	; 255
     6ca:	bf 6f       	ori	r27, 0xFF	; 255
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	a1 1d       	adc	r26, r1
     6d0:	b1 1d       	adc	r27, r1
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	91 05       	cpc	r25, r1
     6d6:	a1 05       	cpc	r26, r1
     6d8:	b1 05       	cpc	r27, r1
     6da:	91 f0       	breq	.+36     	; 0x700 <splash_screen+0xec>
     6dc:	2c f4       	brge	.+10     	; 0x6e8 <splash_screen+0xd4>
     6de:	89 2b       	or	r24, r25
     6e0:	8a 2b       	or	r24, r26
     6e2:	8b 2b       	or	r24, r27
     6e4:	59 f0       	breq	.+22     	; 0x6fc <splash_screen+0xe8>
     6e6:	ca cf       	rjmp	.-108    	; 0x67c <splash_screen+0x68>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	91 05       	cpc	r25, r1
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	49 f0       	breq	.+18     	; 0x704 <splash_screen+0xf0>
     6f2:	03 97       	sbiw	r24, 0x03	; 3
     6f4:	a1 05       	cpc	r26, r1
     6f6:	b1 05       	cpc	r27, r1
     6f8:	39 f0       	breq	.+14     	; 0x708 <splash_screen+0xf4>
     6fa:	c0 cf       	rjmp	.-128    	; 0x67c <splash_screen+0x68>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     6fc:	cd 2f       	mov	r28, r29
     6fe:	be cf       	rjmp	.-132    	; 0x67c <splash_screen+0x68>
			case 1: colour = COLOUR_RED; break;
     700:	cf 2d       	mov	r28, r15
     702:	bc cf       	rjmp	.-136    	; 0x67c <splash_screen+0x68>
			case 2: colour = COLOUR_YELLOW; break;
     704:	c0 2f       	mov	r28, r16
     706:	ba cf       	rjmp	.-140    	; 0x67c <splash_screen+0x68>
			case 3: colour = COLOUR_GREEN; break;
     708:	c1 2f       	mov	r28, r17
     70a:	b8 cf       	rjmp	.-144    	; 0x67c <splash_screen+0x68>
		}
	}
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	08 95       	ret

00000718 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     718:	0e 94 ab 07 	call	0xf56	; 0xf56 <clear_terminal>
	
	// Initialise the game and display
	init_game();
     71c:	0e 94 40 02 	call	0x480	; 0x480 <init_game>
		
	// Initialise the score
	init_score();
     720:	0e 94 45 04 	call	0x88a	; 0x88a <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     724:	0e 94 13 01 	call	0x226	; 0x226 <empty_button_queue>
	clear_serial_input_buffer();
     728:	0e 94 d3 05 	call	0xba6	; 0xba6 <clear_serial_input_buffer>
     72c:	08 95       	ret

0000072e <play_game>:
}

void play_game(void) {
     72e:	4f 92       	push	r4
     730:	5f 92       	push	r5
     732:	6f 92       	push	r6
     734:	7f 92       	push	r7
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
     748:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <get_clock_ticks>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     750:	d0 e0       	ldi	r29, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     752:	bb 24       	eor	r11, r11
     754:	ba 94       	dec	r11
		
		if(button == -1) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     756:	09 e7       	ldi	r16, 0x79	; 121
     758:	12 e0       	ldi	r17, 0x02	; 2
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     75a:	0e 94 16 01 	call	0x22c	; 0x22c <button_pushed>
     75e:	c8 2f       	mov	r28, r24
		
		if(button == -1) {
     760:	8f 3f       	cpi	r24, 0xFF	; 255
     762:	09 f0       	breq	.+2      	; 0x766 <play_game+0x38>
     764:	51 c0       	rjmp	.+162    	; 0x808 <play_game+0xda>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     766:	0e 94 cc 05 	call	0xb98	; 0xb98 <serial_input_available>
     76a:	88 23       	and	r24, r24
     76c:	71 f1       	breq	.+92     	; 0x7ca <play_game+0x9c>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     76e:	f8 01       	movw	r30, r16
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     778:	d1 11       	cpse	r29, r1
     77a:	04 c0       	rjmp	.+8      	; 0x784 <play_game+0x56>
     77c:	8b 31       	cpi	r24, 0x1B	; 27
     77e:	f1 f1       	breq	.+124    	; 0x7fc <play_game+0xce>
     780:	8b 2d       	mov	r24, r11
     782:	08 c0       	rjmp	.+16     	; 0x794 <play_game+0x66>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     784:	d1 30       	cpi	r29, 0x01	; 1
     786:	21 f4       	brne	.+8      	; 0x790 <play_game+0x62>
     788:	8b 35       	cpi	r24, 0x5B	; 91
     78a:	d1 f1       	breq	.+116    	; 0x800 <play_game+0xd2>
     78c:	8b 2d       	mov	r24, r11
     78e:	02 c0       	rjmp	.+4      	; 0x794 <play_game+0x66>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     790:	d2 30       	cpi	r29, 0x02	; 2
     792:	c1 f5       	brne	.+112    	; 0x804 <play_game+0xd6>
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     794:	83 34       	cpi	r24, 0x43	; 67
     796:	d9 f5       	brne	.+118    	; 0x80e <play_game+0xe0>
     798:	d0 e0       	ldi	r29, 0x00	; 0
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	0e 94 2a 07 	call	0xe54	; 0xe54 <set_snake_dirn>
     7a0:	14 c0       	rjmp	.+40     	; 0x7ca <play_game+0x9c>
     7a2:	d0 e0       	ldi	r29, 0x00	; 0
		} else  if (button==2 || escape_sequence_char == 'A') {
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 2a 07 	call	0xe54	; 0xe54 <set_snake_dirn>
     7aa:	0f c0       	rjmp	.+30     	; 0x7ca <play_game+0x9c>
		} else if(button==3 || escape_sequence_char=='D') {
     7ac:	c3 30       	cpi	r28, 0x03	; 3
     7ae:	11 f0       	breq	.+4      	; 0x7b4 <play_game+0x86>
     7b0:	84 34       	cpi	r24, 0x44	; 68
     7b2:	21 f4       	brne	.+8      	; 0x7bc <play_game+0x8e>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	0e 94 2a 07 	call	0xe54	; 0xe54 <set_snake_dirn>
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <play_game+0x9c>
		} else if (button==1 || escape_sequence_char == 'B') {
     7bc:	c1 30       	cpi	r28, 0x01	; 1
     7be:	11 f0       	breq	.+4      	; 0x7c4 <play_game+0x96>
     7c0:	82 34       	cpi	r24, 0x42	; 66
     7c2:	19 f4       	brne	.+6      	; 0x7ca <play_game+0x9c>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	0e 94 2a 07 	call	0xe54	; 0xe54 <set_snake_dirn>
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + 600) {
     7ca:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <get_clock_ticks>
     7ce:	26 01       	movw	r4, r12
     7d0:	37 01       	movw	r6, r14
     7d2:	f8 e5       	ldi	r31, 0x58	; 88
     7d4:	4f 0e       	add	r4, r31
     7d6:	f2 e0       	ldi	r31, 0x02	; 2
     7d8:	5f 1e       	adc	r5, r31
     7da:	61 1c       	adc	r6, r1
     7dc:	71 1c       	adc	r7, r1
     7de:	64 15       	cp	r22, r4
     7e0:	75 05       	cpc	r23, r5
     7e2:	86 05       	cpc	r24, r6
     7e4:	97 05       	cpc	r25, r7
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <play_game+0xbc>
     7e8:	b8 cf       	rjmp	.-144    	; 0x75a <play_game+0x2c>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
     7ea:	0e 94 63 02 	call	0x4c6	; 0x4c6 <attempt_to_move_snake_forward>
     7ee:	88 23       	and	r24, r24
     7f0:	b1 f0       	breq	.+44     	; 0x81e <play_game+0xf0>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
     7f2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <get_clock_ticks>
     7f6:	6b 01       	movw	r12, r22
     7f8:	7c 01       	movw	r14, r24
     7fa:	af cf       	rjmp	.-162    	; 0x75a <play_game+0x2c>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     7fc:	d1 e0       	ldi	r29, 0x01	; 1
     7fe:	e5 cf       	rjmp	.-54     	; 0x7ca <play_game+0x9c>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     800:	d2 e0       	ldi	r29, 0x02	; 2
     802:	e3 cf       	rjmp	.-58     	; 0x7ca <play_game+0x9c>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     804:	d0 e0       	ldi	r29, 0x00	; 0
     806:	e1 cf       	rjmp	.-62     	; 0x7ca <play_game+0x9c>
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     808:	88 23       	and	r24, r24
     80a:	39 f2       	breq	.-114    	; 0x79a <play_game+0x6c>
     80c:	04 c0       	rjmp	.+8      	; 0x816 <play_game+0xe8>
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
     80e:	81 34       	cpi	r24, 0x41	; 65
     810:	41 f2       	breq	.-112    	; 0x7a2 <play_game+0x74>
     812:	d0 e0       	ldi	r29, 0x00	; 0
     814:	cb cf       	rjmp	.-106    	; 0x7ac <play_game+0x7e>
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	29 f2       	breq	.-118    	; 0x7a4 <play_game+0x76>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     81a:	8b 2d       	mov	r24, r11
     81c:	c7 cf       	rjmp	.-114    	; 0x7ac <play_game+0x7e>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	5f 90       	pop	r5
     836:	4f 90       	pop	r4
     838:	08 95       	ret

0000083a <handle_game_over>:

void handle_game_over() {
	move_cursor(10,14);
     83a:	6e e0       	ldi	r22, 0x0E	; 14
     83c:	8a e0       	ldi	r24, 0x0A	; 10
     83e:	0e 94 92 07 	call	0xf24	; 0xf24 <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     842:	8a e9       	ldi	r24, 0x9A	; 154
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
	move_cursor(10,15);
     84e:	6f e0       	ldi	r22, 0x0F	; 15
     850:	8a e0       	ldi	r24, 0x0A	; 10
     852:	0e 94 92 07 	call	0xf24	; 0xf24 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     856:	8c e7       	ldi	r24, 0x7C	; 124
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
	while(button_pushed() == -1) {
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0e 94 16 01 	call	0x22c	; 0x22c <button_pushed>
     86e:	8f 3f       	cpi	r24, 0xFF	; 255
     870:	e1 f3       	breq	.-8      	; 0x86a <handle_game_over+0x30>
		; // wait until a button has been pushed
	}
	
     872:	08 95       	ret

00000874 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     874:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     878:	0e 94 0a 03 	call	0x614	; 0x614 <splash_screen>
	
	while(1) {
		new_game();
     87c:	0e 94 8c 03 	call	0x718	; 0x718 <new_game>
		play_game();
     880:	0e 94 97 03 	call	0x72e	; 0x72e <play_game>
		handle_game_over();
     884:	0e 94 1d 04 	call	0x83a	; 0x83a <handle_game_over>
     888:	f9 cf       	rjmp	.-14     	; 0x87c <main+0x8>

0000088a <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
     88a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <score>
     88e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <score+0x1>
     892:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <score+0x2>
     896:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <score+0x3>
     89a:	08 95       	ret

0000089c <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     89c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
     8a0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <display_string+0x1>
     8a4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <display_string>
	next_col_ptr = 0;
     8a8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <next_col_ptr+0x1>
     8ac:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <next_col_ptr>
	next_char_to_display = 0;
     8b0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <next_char_to_display+0x1>
     8b4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <next_char_to_display>
     8b8:	08 95       	ret

000008ba <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	28 97       	sbiw	r28, 0x08	; 8
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     8d2:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <next_col_ptr>
     8d6:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <next_col_ptr+0x1>
     8da:	30 97       	sbiw	r30, 0x00	; 0
     8dc:	81 f0       	breq	.+32     	; 0x8fe <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     8de:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     8e0:	10 ff       	sbrs	r17, 0
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     8e4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <next_col_ptr+0x1>
     8e8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     8ec:	00 e0       	ldi	r16, 0x00	; 0
     8ee:	6b c0       	rjmp	.+214    	; 0x9c6 <__stack+0xc7>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     8f0:	31 96       	adiw	r30, 0x01	; 1
     8f2:	f0 93 30 01 	sts	0x0130, r31	; 0x800130 <next_col_ptr+0x1>
     8f6:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     8fa:	00 e0       	ldi	r16, 0x00	; 0
     8fc:	64 c0       	rjmp	.+200    	; 0x9c6 <__stack+0xc7>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     8fe:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <next_char_to_display>
     902:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <next_char_to_display+0x1>
     906:	30 97       	sbiw	r30, 0x00	; 0
     908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
     90a:	49 c0       	rjmp	.+146    	; 0x99e <__stack+0x9f>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     90c:	cf 01       	movw	r24, r30
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <next_char_to_display+0x1>
     914:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <next_char_to_display>
     918:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     91a:	e1 11       	cpse	r30, r1
     91c:	0a c0       	rjmp	.+20     	; 0x932 <__stack+0x33>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     91e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <next_char_to_display+0x1>
     922:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <next_char_to_display>
			shift_countdown = 16;
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     92c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	4a c0       	rjmp	.+148    	; 0x9c6 <__stack+0xc7>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     932:	8f e9       	ldi	r24, 0x9F	; 159
     934:	8e 0f       	add	r24, r30
     936:	8a 31       	cpi	r24, 0x1A	; 26
     938:	70 f4       	brcc	.+28     	; 0x956 <__stack+0x57>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	ec 5d       	subi	r30, 0xDC	; 220
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	85 91       	lpm	r24, Z+
     946:	94 91       	lpm	r25, Z
     948:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <next_col_ptr+0x1>
     94c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     950:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	38 c0       	rjmp	.+112    	; 0x9c6 <__stack+0xc7>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     956:	8f eb       	ldi	r24, 0xBF	; 191
     958:	8e 0f       	add	r24, r30
     95a:	8a 31       	cpi	r24, 0x1A	; 26
     95c:	70 f4       	brcc	.+28     	; 0x97a <__stack+0x7b>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	ec 59       	subi	r30, 0x9C	; 156
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	85 91       	lpm	r24, Z+
     96a:	94 91       	lpm	r25, Z
     96c:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <next_col_ptr+0x1>
     970:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     974:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	26 c0       	rjmp	.+76     	; 0x9c6 <__stack+0xc7>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     97a:	80 ed       	ldi	r24, 0xD0	; 208
     97c:	8e 0f       	add	r24, r30
     97e:	8a 30       	cpi	r24, 0x0A	; 10
     980:	00 f5       	brcc	.+64     	; 0x9c2 <__stack+0xc3>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	ee 58       	subi	r30, 0x8E	; 142
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	85 91       	lpm	r24, Z+
     98e:	94 91       	lpm	r25, Z
     990:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <next_col_ptr+0x1>
     994:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     998:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	14 c0       	rjmp	.+40     	; 0x9c6 <__stack+0xc7>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     99e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <display_string>
     9a2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9a6:	01 e0       	ldi	r16, 0x01	; 1
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	09 f0       	breq	.+2      	; 0x9ae <__stack+0xaf>
     9ac:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     9ae:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <next_char_to_display+0x1>
     9b2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <next_char_to_display>
		display_string = 0;
     9b6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <display_string+0x1>
     9ba:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     9be:	10 e0       	ldi	r17, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0xc7>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9c2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     9c4:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     9c6:	0e 94 de 02 	call	0x5bc	; 0x5bc <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     9ca:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
     9ce:	fe 01       	movw	r30, r28
     9d0:	38 96       	adiw	r30, 0x08	; 8
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     9d6:	11 23       	and	r17, r17
     9d8:	14 f4       	brge	.+4      	; 0x9de <__stack+0xdf>
			column_colour_data[i] = colour;
     9da:	20 83       	st	Z, r18
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <__stack+0xe1>
		} else {
			column_colour_data[i] = 0;
     9de:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     9e0:	11 0f       	add	r17, r17
     9e2:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     9e4:	e8 17       	cp	r30, r24
     9e6:	f9 07       	cpc	r31, r25
     9e8:	b1 f7       	brne	.-20     	; 0x9d6 <__stack+0xd7>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     9ea:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     9ec:	be 01       	movw	r22, r28
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	8f e0       	ldi	r24, 0x0F	; 15
     9f4:	0e 94 c1 02 	call	0x582	; 0x582 <ledmatrix_update_column>
	if(shift_countdown > 0) {
     9f8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <shift_countdown.1854>
     9fc:	88 23       	and	r24, r24
     9fe:	89 f0       	breq	.+34     	; 0xa22 <__stack+0x123>
		shift_countdown--;
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
     a06:	00 23       	and	r16, r16
     a08:	11 f0       	breq	.+4      	; 0xa0e <__stack+0x10f>
     a0a:	88 23       	and	r24, r24
     a0c:	11 f0       	breq	.+4      	; 0xa12 <__stack+0x113>
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <__stack+0x119>
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <__stack+0x119>
     a16:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	99 23       	and	r25, r25
     a1c:	29 f0       	breq	.+10     	; 0xa28 <__stack+0x129>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <__stack+0x129>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     a22:	00 23       	and	r16, r16
     a24:	a1 f3       	breq	.-24     	; 0xa0e <__stack+0x10f>
     a26:	f7 cf       	rjmp	.-18     	; 0xa16 <__stack+0x117>
	return !finished;
}
     a28:	28 96       	adiw	r28, 0x08	; 8
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     a3e:	cf 93       	push	r28
     a40:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     a42:	8a 30       	cpi	r24, 0x0A	; 10
     a44:	19 f4       	brne	.+6      	; 0xa4c <uart_put_char+0xe>
		uart_put_char('\r', stream);
     a46:	8d e0       	ldi	r24, 0x0D	; 13
     a48:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     a4c:	9f b7       	in	r25, 0x3f	; 63
     a4e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     a52:	99 23       	and	r25, r25
     a54:	29 f1       	breq	.+74     	; 0xaa0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     a56:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <bytes_in_out_buffer>
     a5a:	8f 3f       	cpi	r24, 0xFF	; 255
     a5c:	d1 f3       	breq	.-12     	; 0xa52 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     a5e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     a60:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <out_insert_pos>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	8e 0f       	add	r24, r30
     a68:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <out_insert_pos>
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	e9 59       	subi	r30, 0x99	; 153
     a70:	fe 4f       	sbci	r31, 0xFE	; 254
     a72:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     a74:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <bytes_in_out_buffer>
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     a7e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <out_insert_pos>
     a82:	8f 3f       	cpi	r24, 0xFF	; 255
     a84:	11 f4       	brne	.+4      	; 0xa8a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     a86:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     a8a:	e1 ec       	ldi	r30, 0xC1	; 193
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	80 62       	ori	r24, 0x20	; 32
     a92:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     a94:	99 23       	and	r25, r25
     a96:	39 f0       	breq	.+14     	; 0xaa6 <uart_put_char+0x68>
		sei();
     a98:	78 94       	sei
	}
	return 0;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
}
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     aae:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <bytes_in_input_buffer>
     ab2:	88 23       	and	r24, r24
     ab4:	e1 f3       	breq	.-8      	; 0xaae <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     ab6:	2f b7       	in	r18, 0x3f	; 63
     ab8:	20 78       	andi	r18, 0x80	; 128
	cli();
     aba:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     abc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <input_insert_pos>
     ac0:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <bytes_in_input_buffer>
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	83 1b       	sub	r24, r19
     ac8:	91 09       	sbc	r25, r1
     aca:	5a f4       	brpl	.+22     	; 0xae2 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     acc:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <input_insert_pos>
     ad0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	e8 1b       	sub	r30, r24
     ad8:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     ada:	e9 58       	subi	r30, 0x89	; 137
     adc:	fd 4f       	sbci	r31, 0xFD	; 253
     ade:	80 81       	ld	r24, Z
     ae0:	0a c0       	rjmp	.+20     	; 0xaf6 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     ae2:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <input_insert_pos>
     ae6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <bytes_in_input_buffer>
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	e8 1b       	sub	r30, r24
     aee:	f1 09       	sbc	r31, r1
     af0:	e9 59       	subi	r30, 0x99	; 153
     af2:	fd 4f       	sbci	r31, 0xFD	; 253
     af4:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     af6:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <bytes_in_input_buffer>
     afa:	91 50       	subi	r25, 0x01	; 1
     afc:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <bytes_in_input_buffer>
	if(interrupts_enabled) {
     b00:	22 23       	and	r18, r18
     b02:	09 f0       	breq	.+2      	; 0xb06 <uart_get_char+0x58>
		sei();
     b04:	78 94       	sei
	}	
	return c;
}
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	08 95       	ret

00000b0a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     b0a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <out_insert_pos>
	bytes_in_out_buffer = 0;
     b0e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <bytes_in_out_buffer>
	input_insert_pos = 0;
     b12:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <input_insert_pos>
	bytes_in_input_buffer = 0;
     b16:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <bytes_in_input_buffer>
	input_overrun = 0;
     b1a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     b1e:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	aa 1f       	adc	r26, r26
     b2c:	bb 1f       	adc	r27, r27
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	aa 1f       	adc	r26, r26
     b34:	bb 1f       	adc	r27, r27
     b36:	9c 01       	movw	r18, r24
     b38:	ad 01       	movw	r20, r26
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	44 1f       	adc	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	72 e1       	ldi	r23, 0x12	; 18
     b46:	8a e7       	ldi	r24, 0x7A	; 122
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 15 08 	call	0x102a	; 0x102a <__divmodsi4>
     b4e:	ba 01       	movw	r22, r20
     b50:	a9 01       	movw	r20, r18
     b52:	4f 5f       	subi	r20, 0xFF	; 255
     b54:	5f 4f       	sbci	r21, 0xFF	; 255
     b56:	6f 4f       	sbci	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	db 01       	movw	r26, r22
     b5c:	ca 01       	movw	r24, r20
     b5e:	1a f4       	brpl	.+6      	; 0xb66 <init_serial_stdio+0x5c>
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	a1 1d       	adc	r26, r1
     b64:	b1 1d       	adc	r27, r1
     b66:	b5 95       	asr	r27
     b68:	a7 95       	ror	r26
     b6a:	97 95       	ror	r25
     b6c:	87 95       	ror	r24
     b6e:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     b70:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     b74:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     b78:	e1 ec       	ldi	r30, 0xC1	; 193
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	88 e1       	ldi	r24, 0x18	; 24
     b7e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     b86:	e9 e7       	ldi	r30, 0x79	; 121
     b88:	f2 e0       	ldi	r31, 0x02	; 2
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	93 83       	std	Z+3, r25	; 0x03
     b90:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     b92:	91 83       	std	Z+1, r25	; 0x01
     b94:	80 83       	st	Z, r24
     b96:	08 95       	ret

00000b98 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     b98:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <bytes_in_input_buffer>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	91 11       	cpse	r25, r1
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <serial_input_available+0xc>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
}
     ba4:	08 95       	ret

00000ba6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     ba6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <input_insert_pos>
	bytes_in_input_buffer = 0;
     baa:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <bytes_in_input_buffer>
     bae:	08 95       	ret

00000bb0 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	ef 93       	push	r30
     bc2:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     bc4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <bytes_in_out_buffer>
     bc8:	88 23       	and	r24, r24
     bca:	29 f1       	breq	.+74     	; 0xc16 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     bcc:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <out_insert_pos>
     bd0:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <bytes_in_out_buffer>
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	82 1b       	sub	r24, r18
     bd8:	91 09       	sbc	r25, r1
     bda:	5a f4       	brpl	.+22     	; 0xbf2 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     bdc:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <out_insert_pos>
     be0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	e8 1b       	sub	r30, r24
     be8:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     bea:	ea 59       	subi	r30, 0x9A	; 154
     bec:	fd 4f       	sbci	r31, 0xFD	; 253
     bee:	90 81       	ld	r25, Z
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     bf2:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <out_insert_pos>
     bf6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <bytes_in_out_buffer>
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	e8 1b       	sub	r30, r24
     bfe:	f1 09       	sbc	r31, r1
     c00:	e9 59       	subi	r30, 0x99	; 153
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     c06:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <bytes_in_out_buffer>
     c0a:	81 50       	subi	r24, 0x01	; 1
     c0c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     c10:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     c16:	e1 ec       	ldi	r30, 0xC1	; 193
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7d       	andi	r24, 0xDF	; 223
     c1e:	80 83       	st	Z, r24
	}
}
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	2f 91       	pop	r18
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	2f 93       	push	r18
     c40:	3f 93       	push	r19
     c42:	4f 93       	push	r20
     c44:	5f 93       	push	r21
     c46:	6f 93       	push	r22
     c48:	7f 93       	push	r23
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	cf 93       	push	r28
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     c58:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     c5c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <do_echo>
     c60:	88 23       	and	r24, r24
     c62:	49 f0       	breq	.+18     	; 0xc76 <__vector_20+0x42>
     c64:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <bytes_in_out_buffer>
     c68:	8f 3f       	cpi	r24, 0xFF	; 255
     c6a:	29 f0       	breq	.+10     	; 0xc76 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	8c 2f       	mov	r24, r28
     c72:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     c76:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <bytes_in_input_buffer>
     c7a:	80 31       	cpi	r24, 0x10	; 16
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__vector_20+0x52>
		input_overrun = 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <input_overrun>
     c84:	18 c0       	rjmp	.+48     	; 0xcb6 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     c86:	cd 30       	cpi	r28, 0x0D	; 13
     c88:	09 f4       	brne	.+2      	; 0xc8c <__vector_20+0x58>
			c = '\n';
     c8a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     c8c:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <input_insert_pos>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	8e 0f       	add	r24, r30
     c94:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <input_insert_pos>
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	e9 59       	subi	r30, 0x99	; 153
     c9c:	fd 4f       	sbci	r31, 0xFD	; 253
     c9e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     ca0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <bytes_in_input_buffer>
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     caa:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <input_insert_pos>
     cae:	80 31       	cpi	r24, 0x10	; 16
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     cb2:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <input_insert_pos>
		}
	}
}
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	cf 91       	pop	r28
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	7f 91       	pop	r23
     cc6:	6f 91       	pop	r22
     cc8:	5f 91       	pop	r21
     cca:	4f 91       	pop	r20
     ccc:	3f 91       	pop	r19
     cce:	2f 91       	pop	r18
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <init_snake>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <snakeLength>
     ce6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <snakeTailIndex>
     cea:	c1 e0       	ldi	r28, 0x01	; 1
     cec:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <snakeHeadIndex>
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <position>
     cf8:	07 e3       	ldi	r16, 0x37	; 55
     cfa:	11 e0       	ldi	r17, 0x01	; 1
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <position>
     d08:	f8 01       	movw	r30, r16
     d0a:	81 83       	std	Z+1, r24	; 0x01
     d0c:	c0 93 33 01 	sts	0x0133, r28	; 0x800133 <curSnakeDirn>
     d10:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <nextSnakeDirn>
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <get_snake_head_position>:
     d1c:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <snakeHeadIndex>
     d20:	0e 2e       	mov	r0, r30
     d22:	00 0c       	add	r0, r0
     d24:	ff 0b       	sbc	r31, r31
     d26:	e9 5c       	subi	r30, 0xC9	; 201
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	80 81       	ld	r24, Z
     d2c:	08 95       	ret

00000d2e <get_snake_tail_position>:
     d2e:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <snakeTailIndex>
     d32:	0e 2e       	mov	r0, r30
     d34:	00 0c       	add	r0, r0
     d36:	ff 0b       	sbc	r31, r31
     d38:	e9 5c       	subi	r30, 0xC9	; 201
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	80 81       	ld	r24, Z
     d3e:	08 95       	ret

00000d40 <advance_snake_head>:
** - ATE_FOOD if there was food at the new head position and the snake can grow
** - ATE_FOOD_BUT_CANT_GROW if there was food at the new head position but the
**   snake can't grow.
** (Only the last three of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
     d44:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <snakeLength>
     d48:	81 32       	cpi	r24, 0x21	; 33
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <advance_snake_head+0xe>
     d4c:	64 c0       	rjmp	.+200    	; 0xe16 <advance_snake_head+0xd6>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
     d4e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <snakeHeadIndex>
     d52:	0e 2e       	mov	r0, r30
     d54:	00 0c       	add	r0, r0
     d56:	ff 0b       	sbc	r31, r31
     d58:	e9 5c       	subi	r30, 0xC9	; 201
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	80 81       	ld	r24, Z
     d5e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <x_position>
     d62:	d8 2f       	mov	r29, r24
     d64:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
     d66:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <snakeHeadIndex>
     d6a:	0e 2e       	mov	r0, r30
     d6c:	00 0c       	add	r0, r0
     d6e:	ff 0b       	sbc	r31, r31
     d70:	e9 5c       	subi	r30, 0xC9	; 201
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	80 81       	ld	r24, Z
     d76:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <y_position>
     d7a:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
     d7c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <nextSnakeDirn>
     d80:	91 30       	cpi	r25, 0x01	; 1
     d82:	59 f0       	breq	.+22     	; 0xd9a <advance_snake_head+0x5a>
     d84:	28 f0       	brcs	.+10     	; 0xd90 <advance_snake_head+0x50>
     d86:	92 30       	cpi	r25, 0x02	; 2
     d88:	69 f0       	breq	.+26     	; 0xda4 <advance_snake_head+0x64>
     d8a:	93 30       	cpi	r25, 0x03	; 3
     d8c:	81 f0       	breq	.+32     	; 0xdae <advance_snake_head+0x6e>
     d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
     d90:	87 30       	cpi	r24, 0x07	; 7
     d92:	91 f0       	breq	.+36     	; 0xdb8 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	68 0f       	add	r22, r24
     d98:	16 c0       	rjmp	.+44     	; 0xdc6 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
     d9a:	df 30       	cpi	r29, 0x0F	; 15
     d9c:	79 f0       	breq	.+30     	; 0xdbc <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
     d9e:	c1 e0       	ldi	r28, 0x01	; 1
     da0:	cd 0f       	add	r28, r29
     da2:	11 c0       	rjmp	.+34     	; 0xdc6 <advance_snake_head+0x86>
			}
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
     da4:	88 23       	and	r24, r24
     da6:	61 f0       	breq	.+24     	; 0xdc0 <advance_snake_head+0x80>
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
			} else {
			headY -= 1;
     da8:	6f ef       	ldi	r22, 0xFF	; 255
     daa:	68 0f       	add	r22, r24
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <advance_snake_head+0x86>
			}
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
     dae:	dd 23       	and	r29, r29
     db0:	49 f0       	breq	.+18     	; 0xdc4 <advance_snake_head+0x84>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
			} else {
				headX -= 1;
     db2:	cf ef       	ldi	r28, 0xFF	; 255
     db4:	cd 0f       	add	r28, r29
     db6:	07 c0       	rjmp	.+14     	; 0xdc6 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
     dbc:	c0 e0       	ldi	r28, 0x00	; 0
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <advance_snake_head+0x86>
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
     dc0:	67 e0       	ldi	r22, 0x07	; 7
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <advance_snake_head+0x86>
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
     dc4:	cf e0       	ldi	r28, 0x0F	; 15
				headX -= 1;
			}
		break;
    }

	newHeadPosn = position(headX, headY);
     dc6:	8c 2f       	mov	r24, r28
     dc8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <position>

	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
     dcc:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <nextSnakeDirn>
     dd0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <curSnakeDirn>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	snakeHeadIndex++;
     dd4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <snakeHeadIndex>
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
     dda:	91 32       	cpi	r25, 0x21	; 33
     ddc:	19 f0       	breq	.+6      	; 0xde4 <advance_snake_head+0xa4>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	snakeHeadIndex++;
     dde:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <snakeHeadIndex>
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <advance_snake_head+0xa8>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
     de4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
     de8:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <snakeHeadIndex>
     dec:	0e 2e       	mov	r0, r30
     dee:	00 0c       	add	r0, r0
     df0:	ff 0b       	sbc	r31, r31
     df2:	e9 5c       	subi	r30, 0xC9	; 201
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 83       	st	Z, r24
	/* Update the snake's length */
	snakeLength++;
     df8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <snakeLength>
     dfc:	9f 5f       	subi	r25, 0xFF	; 255
     dfe:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
     e02:	0e 94 b2 01 	call	0x364	; 0x364 <is_food_at>
     e06:	88 23       	and	r24, r24
     e08:	41 f0       	breq	.+16     	; 0xe1a <advance_snake_head+0xda>
		if(snakeLength <= MAX_SNAKE_SIZE) {
     e0a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <snakeLength>
     e0e:	81 32       	cpi	r24, 0x21	; 33
     e10:	30 f0       	brcs	.+12     	; 0xe1e <advance_snake_head+0xde>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <advance_snake_head+0xe0>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
     e16:	8d ef       	ldi	r24, 0xFD	; 253
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <advance_snake_head+0xe0>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <advance_snake_head+0xe0>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
     e26:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <snakeTailIndex>
     e2a:	e9 2f       	mov	r30, r25
     e2c:	09 2e       	mov	r0, r25
     e2e:	00 0c       	add	r0, r0
     e30:	ff 0b       	sbc	r31, r31
     e32:	e9 5c       	subi	r30, 0xC9	; 201
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
     e38:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
     e3a:	91 32       	cpi	r25, 0x21	; 33
     e3c:	19 f0       	breq	.+6      	; 0xe44 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
     e3e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <snakeTailIndex>
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
     e44:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <snakeTailIndex>
	}
	snakeLength--;
     e48:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <snakeLength>
     e4c:	91 50       	subi	r25, 0x01	; 1
     e4e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <snakeLength>
	
	return prev_tail_position;
}
     e52:	08 95       	ret

00000e54 <set_snake_dirn>:
	** is not opposite to the current direction (stored in curSnakeDirn). 
	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	if ((curSnakeDirn == SNAKE_LEFT && dirn == SNAKE_RIGHT) || (curSnakeDirn == SNAKE_RIGHT && dirn == SNAKE_LEFT) ||
     e54:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <curSnakeDirn>
     e58:	93 30       	cpi	r25, 0x03	; 3
     e5a:	19 f4       	brne	.+6      	; 0xe62 <set_snake_dirn+0xe>
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	71 f4       	brne	.+28     	; 0xe7c <set_snake_dirn+0x28>
     e60:	08 95       	ret
     e62:	91 30       	cpi	r25, 0x01	; 1
     e64:	19 f4       	brne	.+6      	; 0xe6c <set_snake_dirn+0x18>
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	49 f4       	brne	.+18     	; 0xe7c <set_snake_dirn+0x28>
     e6a:	08 95       	ret
     e6c:	91 11       	cpse	r25, r1
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <set_snake_dirn+0x22>
		(curSnakeDirn == SNAKE_UP && dirn == SNAKE_DOWN) || (curSnakeDirn == SNAKE_DOWN && dirn == SNAKE_UP)) {
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	21 f4       	brne	.+8      	; 0xe7c <set_snake_dirn+0x28>
     e74:	08 95       	ret
     e76:	92 30       	cpi	r25, 0x02	; 2
     e78:	09 f4       	brne	.+2      	; 0xe7c <set_snake_dirn+0x28>
     e7a:	81 11       	cpse	r24, r1
			return;	
		}
    
    nextSnakeDirn = dirn;
     e7c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <nextSnakeDirn>
     e80:	08 95       	ret

00000e82 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
     e82:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <snakeTailIndex>
	while(index != snakeHeadIndex) {
     e86:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
     e8a:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     e8c:	0d c0       	rjmp	.+26     	; 0xea8 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
     e8e:	e9 2f       	mov	r30, r25
     e90:	09 2e       	mov	r0, r25
     e92:	00 0c       	add	r0, r0
     e94:	ff 0b       	sbc	r31, r31
     e96:	e9 5c       	subi	r30, 0xC9	; 201
     e98:	fe 4f       	sbci	r31, 0xFE	; 254
     e9a:	20 81       	ld	r18, Z
     e9c:	28 17       	cp	r18, r24
     e9e:	89 f0       	breq	.+34     	; 0xec2 <is_snake_at+0x40>
     ea0:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
     ea2:	91 32       	cpi	r25, 0x21	; 33
     ea4:	0c f0       	brlt	.+2      	; 0xea8 <is_snake_at+0x26>
			index = 0;
     ea6:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     ea8:	93 13       	cpse	r25, r19
     eaa:	f1 cf       	rjmp	.-30     	; 0xe8e <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
     eac:	e3 2f       	mov	r30, r19
     eae:	33 0f       	add	r19, r19
     eb0:	ff 0b       	sbc	r31, r31
     eb2:	e9 5c       	subi	r30, 0xC9	; 201
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	20 81       	ld	r18, Z
     eba:	28 17       	cp	r18, r24
     ebc:	19 f0       	breq	.+6      	; 0xec4 <is_snake_at+0x42>
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <is_snake_at+0x42>
     ec2:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
     ec4:	89 2f       	mov	r24, r25
     ec6:	08 95       	ret

00000ec8 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     ec8:	94 b1       	in	r25, 0x04	; 4
     eca:	90 6b       	ori	r25, 0xB0	; 176
     ecc:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     ece:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     ed0:	90 e5       	ldi	r25, 0x50	; 80
     ed2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     ed4:	88 30       	cpi	r24, 0x08	; 8
     ed6:	21 f0       	breq	.+8      	; 0xee0 <spi_setup_master+0x18>
     ed8:	80 32       	cpi	r24, 0x20	; 32
     eda:	11 f0       	breq	.+4      	; 0xee0 <spi_setup_master+0x18>
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	19 f4       	brne	.+6      	; 0xee6 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	9d bd       	out	0x2d, r25	; 45
			break;
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
     ee6:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     ee8:	80 32       	cpi	r24, 0x20	; 32
     eea:	69 f0       	breq	.+26     	; 0xf06 <spi_setup_master+0x3e>
     eec:	28 f4       	brcc	.+10     	; 0xef8 <spi_setup_master+0x30>
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	71 f0       	breq	.+28     	; 0xf0e <spi_setup_master+0x46>
     ef2:	80 31       	cpi	r24, 0x10	; 16
     ef4:	61 f0       	breq	.+24     	; 0xf0e <spi_setup_master+0x46>
     ef6:	0e c0       	rjmp	.+28     	; 0xf14 <spi_setup_master+0x4c>
     ef8:	80 34       	cpi	r24, 0x40	; 64
     efa:	29 f0       	breq	.+10     	; 0xf06 <spi_setup_master+0x3e>
     efc:	80 38       	cpi	r24, 0x80	; 128
     efe:	51 f4       	brne	.+20     	; 0xf14 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
     f00:	8c b5       	in	r24, 0x2c	; 44
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     f06:	8c b5       	in	r24, 0x2c	; 44
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	8c bd       	out	0x2c, r24	; 44
			break;
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     f0e:	8c b5       	in	r24, 0x2c	; 44
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     f14:	2c 98       	cbi	0x05, 4	; 5
     f16:	08 95       	ret

00000f18 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
     f18:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     f1a:	0d b4       	in	r0, 0x2d	; 45
     f1c:	07 fe       	sbrs	r0, 7
     f1e:	fd cf       	rjmp	.-6      	; 0xf1a <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     f20:	8e b5       	in	r24, 0x2e	; 46
     f22:	08 95       	ret

00000f24 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
     f24:	28 2f       	mov	r18, r24
     f26:	08 2e       	mov	r0, r24
     f28:	00 0c       	add	r0, r0
     f2a:	33 0b       	sbc	r19, r19
     f2c:	3f 93       	push	r19
     f2e:	8f 93       	push	r24
     f30:	86 2f       	mov	r24, r22
     f32:	06 2e       	mov	r0, r22
     f34:	00 0c       	add	r0, r0
     f36:	99 0b       	sbc	r25, r25
     f38:	9f 93       	push	r25
     f3a:	6f 93       	push	r22
     f3c:	82 ec       	ldi	r24, 0xC2	; 194
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	9f 93       	push	r25
     f42:	8f 93       	push	r24
     f44:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	08 95       	ret

00000f56 <clear_terminal>:
     f56:	8d eb       	ldi	r24, 0xBD	; 189
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	08 95       	ret

00000f68 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
     f68:	1f 92       	push	r1
     f6a:	8f 93       	push	r24
     f6c:	87 eb       	ldi	r24, 0xB7	; 183
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	08 95       	ret

00000f82 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
     f82:	80 eb       	ldi	r24, 0xB0	; 176
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	9f 93       	push	r25
     f88:	8f 93       	push	r24
     f8a:	0e 94 36 09 	call	0x126c	; 0x126c <printf_P>
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	08 95       	ret

00000f94 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
     f94:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <clock_ticks>
     f98:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <clock_ticks+0x1>
     f9c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <clock_ticks+0x2>
     fa0:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     fa4:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     fa6:	8c e7       	ldi	r24, 0x7C	; 124
     fa8:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     fb2:	ee e6       	ldi	r30, 0x6E	; 110
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     fbc:	85 b3       	in	r24, 0x15	; 21
     fbe:	82 70       	andi	r24, 0x02	; 2
     fc0:	85 bb       	out	0x15, r24	; 21
     fc2:	08 95       	ret

00000fc4 <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
     fc4:	2f b7       	in	r18, 0x3f	; 63
	cli();
     fc6:	f8 94       	cli
	return_value = clock_ticks;
     fc8:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <clock_ticks>
     fcc:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <clock_ticks+0x1>
     fd0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <clock_ticks+0x2>
     fd4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <clock_ticks+0x3>
	if(interrupts_were_on) {
     fd8:	22 23       	and	r18, r18
     fda:	0c f4       	brge	.+2      	; 0xfde <get_clock_ticks+0x1a>
		sei();
     fdc:	78 94       	sei
	}
	return return_value;
}
     fde:	08 95       	ret

00000fe0 <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	af 93       	push	r26
     ff0:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
     ff2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <clock_ticks>
     ff6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <clock_ticks+0x1>
     ffa:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <clock_ticks+0x2>
     ffe:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <clock_ticks+0x3>
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	a1 1d       	adc	r26, r1
    1006:	b1 1d       	adc	r27, r1
    1008:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <clock_ticks>
    100c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <clock_ticks+0x1>
    1010:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <clock_ticks+0x2>
    1014:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <clock_ticks+0x3>
}
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <__divmodsi4>:
    102a:	05 2e       	mov	r0, r21
    102c:	97 fb       	bst	r25, 7
    102e:	1e f4       	brtc	.+6      	; 0x1036 <__divmodsi4+0xc>
    1030:	00 94       	com	r0
    1032:	0e 94 2c 08 	call	0x1058	; 0x1058 <__negsi2>
    1036:	57 fd       	sbrc	r21, 7
    1038:	07 d0       	rcall	.+14     	; 0x1048 <__divmodsi4_neg2>
    103a:	0e 94 34 08 	call	0x1068	; 0x1068 <__udivmodsi4>
    103e:	07 fc       	sbrc	r0, 7
    1040:	03 d0       	rcall	.+6      	; 0x1048 <__divmodsi4_neg2>
    1042:	4e f4       	brtc	.+18     	; 0x1056 <__divmodsi4_exit>
    1044:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__negsi2>

00001048 <__divmodsi4_neg2>:
    1048:	50 95       	com	r21
    104a:	40 95       	com	r20
    104c:	30 95       	com	r19
    104e:	21 95       	neg	r18
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
    1052:	4f 4f       	sbci	r20, 0xFF	; 255
    1054:	5f 4f       	sbci	r21, 0xFF	; 255

00001056 <__divmodsi4_exit>:
    1056:	08 95       	ret

00001058 <__negsi2>:
    1058:	90 95       	com	r25
    105a:	80 95       	com	r24
    105c:	70 95       	com	r23
    105e:	61 95       	neg	r22
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	8f 4f       	sbci	r24, 0xFF	; 255
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	08 95       	ret

00001068 <__udivmodsi4>:
    1068:	a1 e2       	ldi	r26, 0x21	; 33
    106a:	1a 2e       	mov	r1, r26
    106c:	aa 1b       	sub	r26, r26
    106e:	bb 1b       	sub	r27, r27
    1070:	fd 01       	movw	r30, r26
    1072:	0d c0       	rjmp	.+26     	; 0x108e <__udivmodsi4_ep>

00001074 <__udivmodsi4_loop>:
    1074:	aa 1f       	adc	r26, r26
    1076:	bb 1f       	adc	r27, r27
    1078:	ee 1f       	adc	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	a2 17       	cp	r26, r18
    107e:	b3 07       	cpc	r27, r19
    1080:	e4 07       	cpc	r30, r20
    1082:	f5 07       	cpc	r31, r21
    1084:	20 f0       	brcs	.+8      	; 0x108e <__udivmodsi4_ep>
    1086:	a2 1b       	sub	r26, r18
    1088:	b3 0b       	sbc	r27, r19
    108a:	e4 0b       	sbc	r30, r20
    108c:	f5 0b       	sbc	r31, r21

0000108e <__udivmodsi4_ep>:
    108e:	66 1f       	adc	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	1a 94       	dec	r1
    1098:	69 f7       	brne	.-38     	; 0x1074 <__udivmodsi4_loop>
    109a:	60 95       	com	r22
    109c:	70 95       	com	r23
    109e:	80 95       	com	r24
    10a0:	90 95       	com	r25
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	bd 01       	movw	r22, r26
    10a8:	cf 01       	movw	r24, r30
    10aa:	08 95       	ret

000010ac <random_r>:
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	ec 01       	movw	r28, r24
    10c2:	68 81       	ld	r22, Y
    10c4:	79 81       	ldd	r23, Y+1	; 0x01
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	61 15       	cp	r22, r1
    10cc:	71 05       	cpc	r23, r1
    10ce:	81 05       	cpc	r24, r1
    10d0:	91 05       	cpc	r25, r1
    10d2:	21 f4       	brne	.+8      	; 0x10dc <random_r+0x30>
    10d4:	64 e2       	ldi	r22, 0x24	; 36
    10d6:	79 ed       	ldi	r23, 0xD9	; 217
    10d8:	8b e5       	ldi	r24, 0x5B	; 91
    10da:	97 e0       	ldi	r25, 0x07	; 7
    10dc:	2d e1       	ldi	r18, 0x1D	; 29
    10de:	33 ef       	ldi	r19, 0xF3	; 243
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	0e 94 15 08 	call	0x102a	; 0x102a <__divmodsi4>
    10e8:	49 01       	movw	r8, r18
    10ea:	5a 01       	movw	r10, r20
    10ec:	9b 01       	movw	r18, r22
    10ee:	ac 01       	movw	r20, r24
    10f0:	a7 ea       	ldi	r26, 0xA7	; 167
    10f2:	b1 e4       	ldi	r27, 0x41	; 65
    10f4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__muluhisi3>
    10f8:	6b 01       	movw	r12, r22
    10fa:	7c 01       	movw	r14, r24
    10fc:	ac ee       	ldi	r26, 0xEC	; 236
    10fe:	b4 ef       	ldi	r27, 0xF4	; 244
    1100:	a5 01       	movw	r20, r10
    1102:	94 01       	movw	r18, r8
    1104:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulohisi3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	8c 0d       	add	r24, r12
    110e:	9d 1d       	adc	r25, r13
    1110:	ae 1d       	adc	r26, r14
    1112:	bf 1d       	adc	r27, r15
    1114:	b7 ff       	sbrs	r27, 7
    1116:	03 c0       	rjmp	.+6      	; 0x111e <random_r+0x72>
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	a1 09       	sbc	r26, r1
    111c:	b0 48       	sbci	r27, 0x80	; 128
    111e:	88 83       	st	Y, r24
    1120:	99 83       	std	Y+1, r25	; 0x01
    1122:	aa 83       	std	Y+2, r26	; 0x02
    1124:	bb 83       	std	Y+3, r27	; 0x03
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	9f 77       	andi	r25, 0x7F	; 127
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	08 95       	ret

00001142 <random>:
    1142:	8f 92       	push	r8
    1144:	9f 92       	push	r9
    1146:	af 92       	push	r10
    1148:	bf 92       	push	r11
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1156:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    115a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    115e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1162:	61 15       	cp	r22, r1
    1164:	71 05       	cpc	r23, r1
    1166:	81 05       	cpc	r24, r1
    1168:	91 05       	cpc	r25, r1
    116a:	21 f4       	brne	.+8      	; 0x1174 <random+0x32>
    116c:	64 e2       	ldi	r22, 0x24	; 36
    116e:	79 ed       	ldi	r23, 0xD9	; 217
    1170:	8b e5       	ldi	r24, 0x5B	; 91
    1172:	97 e0       	ldi	r25, 0x07	; 7
    1174:	2d e1       	ldi	r18, 0x1D	; 29
    1176:	33 ef       	ldi	r19, 0xF3	; 243
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	0e 94 15 08 	call	0x102a	; 0x102a <__divmodsi4>
    1180:	49 01       	movw	r8, r18
    1182:	5a 01       	movw	r10, r20
    1184:	9b 01       	movw	r18, r22
    1186:	ac 01       	movw	r20, r24
    1188:	a7 ea       	ldi	r26, 0xA7	; 167
    118a:	b1 e4       	ldi	r27, 0x41	; 65
    118c:	0e 94 ed 0b 	call	0x17da	; 0x17da <__muluhisi3>
    1190:	6b 01       	movw	r12, r22
    1192:	7c 01       	movw	r14, r24
    1194:	ac ee       	ldi	r26, 0xEC	; 236
    1196:	b4 ef       	ldi	r27, 0xF4	; 244
    1198:	a5 01       	movw	r20, r10
    119a:	94 01       	movw	r18, r8
    119c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulohisi3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8c 0d       	add	r24, r12
    11a6:	9d 1d       	adc	r25, r13
    11a8:	ae 1d       	adc	r26, r14
    11aa:	bf 1d       	adc	r27, r15
    11ac:	b7 ff       	sbrs	r27, 7
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <random+0x74>
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	a1 09       	sbc	r26, r1
    11b4:	b0 48       	sbci	r27, 0x80	; 128
    11b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    11ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    11be:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    11c2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	9f 77       	andi	r25, 0x7F	; 127
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	08 95       	ret

000011de <srandom>:
    11de:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    11e2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    11e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    11ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    11ee:	08 95       	ret

000011f0 <fgetc>:
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	ec 01       	movw	r28, r24
    11f6:	2b 81       	ldd	r18, Y+3	; 0x03
    11f8:	20 ff       	sbrs	r18, 0
    11fa:	33 c0       	rjmp	.+102    	; 0x1262 <fgetc+0x72>
    11fc:	26 ff       	sbrs	r18, 6
    11fe:	0a c0       	rjmp	.+20     	; 0x1214 <fgetc+0x24>
    1200:	2f 7b       	andi	r18, 0xBF	; 191
    1202:	2b 83       	std	Y+3, r18	; 0x03
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	9f 83       	std	Y+7, r25	; 0x07
    120c:	8e 83       	std	Y+6, r24	; 0x06
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	29 c0       	rjmp	.+82     	; 0x1266 <fgetc+0x76>
    1214:	22 ff       	sbrs	r18, 2
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <fgetc+0x46>
    1218:	e8 81       	ld	r30, Y
    121a:	f9 81       	ldd	r31, Y+1	; 0x01
    121c:	80 81       	ld	r24, Z
    121e:	08 2e       	mov	r0, r24
    1220:	00 0c       	add	r0, r0
    1222:	99 0b       	sbc	r25, r25
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	19 f4       	brne	.+6      	; 0x122e <fgetc+0x3e>
    1228:	20 62       	ori	r18, 0x20	; 32
    122a:	2b 83       	std	Y+3, r18	; 0x03
    122c:	1a c0       	rjmp	.+52     	; 0x1262 <fgetc+0x72>
    122e:	31 96       	adiw	r30, 0x01	; 1
    1230:	f9 83       	std	Y+1, r31	; 0x01
    1232:	e8 83       	st	Y, r30
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <fgetc+0x62>
    1236:	ea 85       	ldd	r30, Y+10	; 0x0a
    1238:	fb 85       	ldd	r31, Y+11	; 0x0b
    123a:	09 95       	icall
    123c:	97 ff       	sbrs	r25, 7
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <fgetc+0x62>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	11 f0       	breq	.+4      	; 0x124a <fgetc+0x5a>
    1246:	80 e2       	ldi	r24, 0x20	; 32
    1248:	01 c0       	rjmp	.+2      	; 0x124c <fgetc+0x5c>
    124a:	80 e1       	ldi	r24, 0x10	; 16
    124c:	82 2b       	or	r24, r18
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <fgetc+0x72>
    1252:	2e 81       	ldd	r18, Y+6	; 0x06
    1254:	3f 81       	ldd	r19, Y+7	; 0x07
    1256:	2f 5f       	subi	r18, 0xFF	; 255
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	3f 83       	std	Y+7, r19	; 0x07
    125c:	2e 83       	std	Y+6, r18	; 0x06
    125e:	99 27       	eor	r25, r25
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <fgetc+0x76>
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <printf_P>:
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ec e3       	ldi	r30, 0x3C	; 60
    1272:	f9 e0       	ldi	r31, 0x09	; 9
    1274:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__prologue_saves__+0x1c>
    1278:	ae 01       	movw	r20, r28
    127a:	49 5f       	subi	r20, 0xF9	; 249
    127c:	5f 4f       	sbci	r21, 0xFF	; 255
    127e:	da 01       	movw	r26, r20
    1280:	6d 91       	ld	r22, X+
    1282:	7d 91       	ld	r23, X+
    1284:	ad 01       	movw	r20, r26
    1286:	09 e7       	ldi	r16, 0x79	; 121
    1288:	12 e0       	ldi	r17, 0x02	; 2
    128a:	f8 01       	movw	r30, r16
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	dc 01       	movw	r26, r24
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	2c 91       	ld	r18, X
    1296:	13 97       	sbiw	r26, 0x03	; 3
    1298:	28 60       	ori	r18, 0x08	; 8
    129a:	13 96       	adiw	r26, 0x03	; 3
    129c:	2c 93       	st	X, r18
    129e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <vfprintf>
    12a2:	d8 01       	movw	r26, r16
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	ed 91       	ld	r30, X+
    12a8:	fc 91       	ld	r31, X
    12aa:	13 97       	sbiw	r26, 0x03	; 3
    12ac:	23 81       	ldd	r18, Z+3	; 0x03
    12ae:	27 7f       	andi	r18, 0xF7	; 247
    12b0:	23 83       	std	Z+3, r18	; 0x03
    12b2:	e4 e0       	ldi	r30, 0x04	; 4
    12b4:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__epilogue_restores__+0x1c>

000012b8 <vfprintf>:
    12b8:	ab e0       	ldi	r26, 0x0B	; 11
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e2 e6       	ldi	r30, 0x62	; 98
    12be:	f9 e0       	ldi	r31, 0x09	; 9
    12c0:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__prologue_saves__>
    12c4:	6c 01       	movw	r12, r24
    12c6:	7b 01       	movw	r14, r22
    12c8:	8a 01       	movw	r16, r20
    12ca:	fc 01       	movw	r30, r24
    12cc:	17 82       	std	Z+7, r1	; 0x07
    12ce:	16 82       	std	Z+6, r1	; 0x06
    12d0:	83 81       	ldd	r24, Z+3	; 0x03
    12d2:	81 ff       	sbrs	r24, 1
    12d4:	cc c1       	rjmp	.+920    	; 0x166e <vfprintf+0x3b6>
    12d6:	ce 01       	movw	r24, r28
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	3c 01       	movw	r6, r24
    12dc:	f6 01       	movw	r30, r12
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	f7 01       	movw	r30, r14
    12e2:	93 fd       	sbrc	r25, 3
    12e4:	85 91       	lpm	r24, Z+
    12e6:	93 ff       	sbrs	r25, 3
    12e8:	81 91       	ld	r24, Z+
    12ea:	7f 01       	movw	r14, r30
    12ec:	88 23       	and	r24, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <vfprintf+0x3a>
    12f0:	ba c1       	rjmp	.+884    	; 0x1666 <vfprintf+0x3ae>
    12f2:	85 32       	cpi	r24, 0x25	; 37
    12f4:	39 f4       	brne	.+14     	; 0x1304 <vfprintf+0x4c>
    12f6:	93 fd       	sbrc	r25, 3
    12f8:	85 91       	lpm	r24, Z+
    12fa:	93 ff       	sbrs	r25, 3
    12fc:	81 91       	ld	r24, Z+
    12fe:	7f 01       	movw	r14, r30
    1300:	85 32       	cpi	r24, 0x25	; 37
    1302:	29 f4       	brne	.+10     	; 0x130e <vfprintf+0x56>
    1304:	b6 01       	movw	r22, r12
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    130c:	e7 cf       	rjmp	.-50     	; 0x12dc <vfprintf+0x24>
    130e:	91 2c       	mov	r9, r1
    1310:	21 2c       	mov	r2, r1
    1312:	31 2c       	mov	r3, r1
    1314:	ff e1       	ldi	r31, 0x1F	; 31
    1316:	f3 15       	cp	r31, r3
    1318:	d8 f0       	brcs	.+54     	; 0x1350 <vfprintf+0x98>
    131a:	8b 32       	cpi	r24, 0x2B	; 43
    131c:	79 f0       	breq	.+30     	; 0x133c <vfprintf+0x84>
    131e:	38 f4       	brcc	.+14     	; 0x132e <vfprintf+0x76>
    1320:	80 32       	cpi	r24, 0x20	; 32
    1322:	79 f0       	breq	.+30     	; 0x1342 <vfprintf+0x8a>
    1324:	83 32       	cpi	r24, 0x23	; 35
    1326:	a1 f4       	brne	.+40     	; 0x1350 <vfprintf+0x98>
    1328:	23 2d       	mov	r18, r3
    132a:	20 61       	ori	r18, 0x10	; 16
    132c:	1d c0       	rjmp	.+58     	; 0x1368 <vfprintf+0xb0>
    132e:	8d 32       	cpi	r24, 0x2D	; 45
    1330:	61 f0       	breq	.+24     	; 0x134a <vfprintf+0x92>
    1332:	80 33       	cpi	r24, 0x30	; 48
    1334:	69 f4       	brne	.+26     	; 0x1350 <vfprintf+0x98>
    1336:	23 2d       	mov	r18, r3
    1338:	21 60       	ori	r18, 0x01	; 1
    133a:	16 c0       	rjmp	.+44     	; 0x1368 <vfprintf+0xb0>
    133c:	83 2d       	mov	r24, r3
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	38 2e       	mov	r3, r24
    1342:	e3 2d       	mov	r30, r3
    1344:	e4 60       	ori	r30, 0x04	; 4
    1346:	3e 2e       	mov	r3, r30
    1348:	2a c0       	rjmp	.+84     	; 0x139e <vfprintf+0xe6>
    134a:	f3 2d       	mov	r31, r3
    134c:	f8 60       	ori	r31, 0x08	; 8
    134e:	1d c0       	rjmp	.+58     	; 0x138a <vfprintf+0xd2>
    1350:	37 fc       	sbrc	r3, 7
    1352:	2d c0       	rjmp	.+90     	; 0x13ae <vfprintf+0xf6>
    1354:	20 ed       	ldi	r18, 0xD0	; 208
    1356:	28 0f       	add	r18, r24
    1358:	2a 30       	cpi	r18, 0x0A	; 10
    135a:	40 f0       	brcs	.+16     	; 0x136c <vfprintf+0xb4>
    135c:	8e 32       	cpi	r24, 0x2E	; 46
    135e:	b9 f4       	brne	.+46     	; 0x138e <vfprintf+0xd6>
    1360:	36 fc       	sbrc	r3, 6
    1362:	81 c1       	rjmp	.+770    	; 0x1666 <vfprintf+0x3ae>
    1364:	23 2d       	mov	r18, r3
    1366:	20 64       	ori	r18, 0x40	; 64
    1368:	32 2e       	mov	r3, r18
    136a:	19 c0       	rjmp	.+50     	; 0x139e <vfprintf+0xe6>
    136c:	36 fe       	sbrs	r3, 6
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0xc4>
    1370:	8a e0       	ldi	r24, 0x0A	; 10
    1372:	98 9e       	mul	r9, r24
    1374:	20 0d       	add	r18, r0
    1376:	11 24       	eor	r1, r1
    1378:	92 2e       	mov	r9, r18
    137a:	11 c0       	rjmp	.+34     	; 0x139e <vfprintf+0xe6>
    137c:	ea e0       	ldi	r30, 0x0A	; 10
    137e:	2e 9e       	mul	r2, r30
    1380:	20 0d       	add	r18, r0
    1382:	11 24       	eor	r1, r1
    1384:	22 2e       	mov	r2, r18
    1386:	f3 2d       	mov	r31, r3
    1388:	f0 62       	ori	r31, 0x20	; 32
    138a:	3f 2e       	mov	r3, r31
    138c:	08 c0       	rjmp	.+16     	; 0x139e <vfprintf+0xe6>
    138e:	8c 36       	cpi	r24, 0x6C	; 108
    1390:	21 f4       	brne	.+8      	; 0x139a <vfprintf+0xe2>
    1392:	83 2d       	mov	r24, r3
    1394:	80 68       	ori	r24, 0x80	; 128
    1396:	38 2e       	mov	r3, r24
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0xe6>
    139a:	88 36       	cpi	r24, 0x68	; 104
    139c:	41 f4       	brne	.+16     	; 0x13ae <vfprintf+0xf6>
    139e:	f7 01       	movw	r30, r14
    13a0:	93 fd       	sbrc	r25, 3
    13a2:	85 91       	lpm	r24, Z+
    13a4:	93 ff       	sbrs	r25, 3
    13a6:	81 91       	ld	r24, Z+
    13a8:	7f 01       	movw	r14, r30
    13aa:	81 11       	cpse	r24, r1
    13ac:	b3 cf       	rjmp	.-154    	; 0x1314 <vfprintf+0x5c>
    13ae:	98 2f       	mov	r25, r24
    13b0:	9f 7d       	andi	r25, 0xDF	; 223
    13b2:	95 54       	subi	r25, 0x45	; 69
    13b4:	93 30       	cpi	r25, 0x03	; 3
    13b6:	28 f4       	brcc	.+10     	; 0x13c2 <vfprintf+0x10a>
    13b8:	0c 5f       	subi	r16, 0xFC	; 252
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	9f e3       	ldi	r25, 0x3F	; 63
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	0d c0       	rjmp	.+26     	; 0x13dc <vfprintf+0x124>
    13c2:	83 36       	cpi	r24, 0x63	; 99
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <vfprintf+0x11a>
    13c6:	83 37       	cpi	r24, 0x73	; 115
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <vfprintf+0x12e>
    13ca:	83 35       	cpi	r24, 0x53	; 83
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0x118>
    13ce:	59 c0       	rjmp	.+178    	; 0x1482 <vfprintf+0x1ca>
    13d0:	21 c0       	rjmp	.+66     	; 0x1414 <vfprintf+0x15c>
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0e 5f       	subi	r16, 0xFE	; 254
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	88 24       	eor	r8, r8
    13de:	83 94       	inc	r8
    13e0:	91 2c       	mov	r9, r1
    13e2:	53 01       	movw	r10, r6
    13e4:	13 c0       	rjmp	.+38     	; 0x140c <vfprintf+0x154>
    13e6:	28 01       	movw	r4, r16
    13e8:	f2 e0       	ldi	r31, 0x02	; 2
    13ea:	4f 0e       	add	r4, r31
    13ec:	51 1c       	adc	r5, r1
    13ee:	f8 01       	movw	r30, r16
    13f0:	a0 80       	ld	r10, Z
    13f2:	b1 80       	ldd	r11, Z+1	; 0x01
    13f4:	36 fe       	sbrs	r3, 6
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <vfprintf+0x146>
    13f8:	69 2d       	mov	r22, r9
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x14a>
    13fe:	6f ef       	ldi	r22, 0xFF	; 255
    1400:	7f ef       	ldi	r23, 0xFF	; 255
    1402:	c5 01       	movw	r24, r10
    1404:	0e 94 48 0b 	call	0x1690	; 0x1690 <strnlen>
    1408:	4c 01       	movw	r8, r24
    140a:	82 01       	movw	r16, r4
    140c:	f3 2d       	mov	r31, r3
    140e:	ff 77       	andi	r31, 0x7F	; 127
    1410:	3f 2e       	mov	r3, r31
    1412:	16 c0       	rjmp	.+44     	; 0x1440 <vfprintf+0x188>
    1414:	28 01       	movw	r4, r16
    1416:	22 e0       	ldi	r18, 0x02	; 2
    1418:	42 0e       	add	r4, r18
    141a:	51 1c       	adc	r5, r1
    141c:	f8 01       	movw	r30, r16
    141e:	a0 80       	ld	r10, Z
    1420:	b1 80       	ldd	r11, Z+1	; 0x01
    1422:	36 fe       	sbrs	r3, 6
    1424:	03 c0       	rjmp	.+6      	; 0x142c <vfprintf+0x174>
    1426:	69 2d       	mov	r22, r9
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <vfprintf+0x178>
    142c:	6f ef       	ldi	r22, 0xFF	; 255
    142e:	7f ef       	ldi	r23, 0xFF	; 255
    1430:	c5 01       	movw	r24, r10
    1432:	0e 94 3d 0b 	call	0x167a	; 0x167a <strnlen_P>
    1436:	4c 01       	movw	r8, r24
    1438:	f3 2d       	mov	r31, r3
    143a:	f0 68       	ori	r31, 0x80	; 128
    143c:	3f 2e       	mov	r3, r31
    143e:	82 01       	movw	r16, r4
    1440:	33 fc       	sbrc	r3, 3
    1442:	1b c0       	rjmp	.+54     	; 0x147a <vfprintf+0x1c2>
    1444:	82 2d       	mov	r24, r2
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	88 16       	cp	r8, r24
    144a:	99 06       	cpc	r9, r25
    144c:	b0 f4       	brcc	.+44     	; 0x147a <vfprintf+0x1c2>
    144e:	b6 01       	movw	r22, r12
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    1458:	2a 94       	dec	r2
    145a:	f4 cf       	rjmp	.-24     	; 0x1444 <vfprintf+0x18c>
    145c:	f5 01       	movw	r30, r10
    145e:	37 fc       	sbrc	r3, 7
    1460:	85 91       	lpm	r24, Z+
    1462:	37 fe       	sbrs	r3, 7
    1464:	81 91       	ld	r24, Z+
    1466:	5f 01       	movw	r10, r30
    1468:	b6 01       	movw	r22, r12
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    1470:	21 10       	cpse	r2, r1
    1472:	2a 94       	dec	r2
    1474:	21 e0       	ldi	r18, 0x01	; 1
    1476:	82 1a       	sub	r8, r18
    1478:	91 08       	sbc	r9, r1
    147a:	81 14       	cp	r8, r1
    147c:	91 04       	cpc	r9, r1
    147e:	71 f7       	brne	.-36     	; 0x145c <vfprintf+0x1a4>
    1480:	e8 c0       	rjmp	.+464    	; 0x1652 <vfprintf+0x39a>
    1482:	84 36       	cpi	r24, 0x64	; 100
    1484:	11 f0       	breq	.+4      	; 0x148a <vfprintf+0x1d2>
    1486:	89 36       	cpi	r24, 0x69	; 105
    1488:	41 f5       	brne	.+80     	; 0x14da <vfprintf+0x222>
    148a:	f8 01       	movw	r30, r16
    148c:	37 fe       	sbrs	r3, 7
    148e:	07 c0       	rjmp	.+14     	; 0x149e <vfprintf+0x1e6>
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	0c 5f       	subi	r16, 0xFC	; 252
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <vfprintf+0x1f6>
    149e:	60 81       	ld	r22, Z
    14a0:	71 81       	ldd	r23, Z+1	; 0x01
    14a2:	07 2e       	mov	r0, r23
    14a4:	00 0c       	add	r0, r0
    14a6:	88 0b       	sbc	r24, r24
    14a8:	99 0b       	sbc	r25, r25
    14aa:	0e 5f       	subi	r16, 0xFE	; 254
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	f3 2d       	mov	r31, r3
    14b0:	ff 76       	andi	r31, 0x6F	; 111
    14b2:	3f 2e       	mov	r3, r31
    14b4:	97 ff       	sbrs	r25, 7
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <vfprintf+0x212>
    14b8:	90 95       	com	r25
    14ba:	80 95       	com	r24
    14bc:	70 95       	com	r23
    14be:	61 95       	neg	r22
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	f0 68       	ori	r31, 0x80	; 128
    14c8:	3f 2e       	mov	r3, r31
    14ca:	2a e0       	ldi	r18, 0x0A	; 10
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	a3 01       	movw	r20, r6
    14d0:	0e 94 8f 0b 	call	0x171e	; 0x171e <__ultoa_invert>
    14d4:	88 2e       	mov	r8, r24
    14d6:	86 18       	sub	r8, r6
    14d8:	45 c0       	rjmp	.+138    	; 0x1564 <vfprintf+0x2ac>
    14da:	85 37       	cpi	r24, 0x75	; 117
    14dc:	31 f4       	brne	.+12     	; 0x14ea <vfprintf+0x232>
    14de:	23 2d       	mov	r18, r3
    14e0:	2f 7e       	andi	r18, 0xEF	; 239
    14e2:	b2 2e       	mov	r11, r18
    14e4:	2a e0       	ldi	r18, 0x0A	; 10
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	25 c0       	rjmp	.+74     	; 0x1534 <vfprintf+0x27c>
    14ea:	93 2d       	mov	r25, r3
    14ec:	99 7f       	andi	r25, 0xF9	; 249
    14ee:	b9 2e       	mov	r11, r25
    14f0:	8f 36       	cpi	r24, 0x6F	; 111
    14f2:	c1 f0       	breq	.+48     	; 0x1524 <vfprintf+0x26c>
    14f4:	18 f4       	brcc	.+6      	; 0x14fc <vfprintf+0x244>
    14f6:	88 35       	cpi	r24, 0x58	; 88
    14f8:	79 f0       	breq	.+30     	; 0x1518 <vfprintf+0x260>
    14fa:	b5 c0       	rjmp	.+362    	; 0x1666 <vfprintf+0x3ae>
    14fc:	80 37       	cpi	r24, 0x70	; 112
    14fe:	19 f0       	breq	.+6      	; 0x1506 <vfprintf+0x24e>
    1500:	88 37       	cpi	r24, 0x78	; 120
    1502:	21 f0       	breq	.+8      	; 0x150c <vfprintf+0x254>
    1504:	b0 c0       	rjmp	.+352    	; 0x1666 <vfprintf+0x3ae>
    1506:	e9 2f       	mov	r30, r25
    1508:	e0 61       	ori	r30, 0x10	; 16
    150a:	be 2e       	mov	r11, r30
    150c:	b4 fe       	sbrs	r11, 4
    150e:	0d c0       	rjmp	.+26     	; 0x152a <vfprintf+0x272>
    1510:	fb 2d       	mov	r31, r11
    1512:	f4 60       	ori	r31, 0x04	; 4
    1514:	bf 2e       	mov	r11, r31
    1516:	09 c0       	rjmp	.+18     	; 0x152a <vfprintf+0x272>
    1518:	34 fe       	sbrs	r3, 4
    151a:	0a c0       	rjmp	.+20     	; 0x1530 <vfprintf+0x278>
    151c:	29 2f       	mov	r18, r25
    151e:	26 60       	ori	r18, 0x06	; 6
    1520:	b2 2e       	mov	r11, r18
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <vfprintf+0x278>
    1524:	28 e0       	ldi	r18, 0x08	; 8
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <vfprintf+0x27c>
    152a:	20 e1       	ldi	r18, 0x10	; 16
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x27c>
    1530:	20 e1       	ldi	r18, 0x10	; 16
    1532:	32 e0       	ldi	r19, 0x02	; 2
    1534:	f8 01       	movw	r30, r16
    1536:	b7 fe       	sbrs	r11, 7
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <vfprintf+0x290>
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	0c 5f       	subi	r16, 0xFC	; 252
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <vfprintf+0x29c>
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 5f       	subi	r16, 0xFE	; 254
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	a3 01       	movw	r20, r6
    1556:	0e 94 8f 0b 	call	0x171e	; 0x171e <__ultoa_invert>
    155a:	88 2e       	mov	r8, r24
    155c:	86 18       	sub	r8, r6
    155e:	fb 2d       	mov	r31, r11
    1560:	ff 77       	andi	r31, 0x7F	; 127
    1562:	3f 2e       	mov	r3, r31
    1564:	36 fe       	sbrs	r3, 6
    1566:	0d c0       	rjmp	.+26     	; 0x1582 <vfprintf+0x2ca>
    1568:	23 2d       	mov	r18, r3
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	a2 2e       	mov	r10, r18
    156e:	89 14       	cp	r8, r9
    1570:	58 f4       	brcc	.+22     	; 0x1588 <vfprintf+0x2d0>
    1572:	34 fe       	sbrs	r3, 4
    1574:	0b c0       	rjmp	.+22     	; 0x158c <vfprintf+0x2d4>
    1576:	32 fc       	sbrc	r3, 2
    1578:	09 c0       	rjmp	.+18     	; 0x158c <vfprintf+0x2d4>
    157a:	83 2d       	mov	r24, r3
    157c:	8e 7e       	andi	r24, 0xEE	; 238
    157e:	a8 2e       	mov	r10, r24
    1580:	05 c0       	rjmp	.+10     	; 0x158c <vfprintf+0x2d4>
    1582:	b8 2c       	mov	r11, r8
    1584:	a3 2c       	mov	r10, r3
    1586:	03 c0       	rjmp	.+6      	; 0x158e <vfprintf+0x2d6>
    1588:	b8 2c       	mov	r11, r8
    158a:	01 c0       	rjmp	.+2      	; 0x158e <vfprintf+0x2d6>
    158c:	b9 2c       	mov	r11, r9
    158e:	a4 fe       	sbrs	r10, 4
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <vfprintf+0x2f8>
    1592:	fe 01       	movw	r30, r28
    1594:	e8 0d       	add	r30, r8
    1596:	f1 1d       	adc	r31, r1
    1598:	80 81       	ld	r24, Z
    159a:	80 33       	cpi	r24, 0x30	; 48
    159c:	21 f4       	brne	.+8      	; 0x15a6 <vfprintf+0x2ee>
    159e:	9a 2d       	mov	r25, r10
    15a0:	99 7e       	andi	r25, 0xE9	; 233
    15a2:	a9 2e       	mov	r10, r25
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <vfprintf+0x300>
    15a6:	a2 fe       	sbrs	r10, 2
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <vfprintf+0x2fe>
    15aa:	b3 94       	inc	r11
    15ac:	b3 94       	inc	r11
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <vfprintf+0x300>
    15b0:	8a 2d       	mov	r24, r10
    15b2:	86 78       	andi	r24, 0x86	; 134
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <vfprintf+0x300>
    15b6:	b3 94       	inc	r11
    15b8:	a3 fc       	sbrc	r10, 3
    15ba:	11 c0       	rjmp	.+34     	; 0x15de <vfprintf+0x326>
    15bc:	a0 fe       	sbrs	r10, 0
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x314>
    15c0:	b2 14       	cp	r11, r2
    15c2:	88 f4       	brcc	.+34     	; 0x15e6 <vfprintf+0x32e>
    15c4:	28 0c       	add	r2, r8
    15c6:	92 2c       	mov	r9, r2
    15c8:	9b 18       	sub	r9, r11
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <vfprintf+0x330>
    15cc:	b2 14       	cp	r11, r2
    15ce:	60 f4       	brcc	.+24     	; 0x15e8 <vfprintf+0x330>
    15d0:	b6 01       	movw	r22, r12
    15d2:	80 e2       	ldi	r24, 0x20	; 32
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    15da:	b3 94       	inc	r11
    15dc:	f7 cf       	rjmp	.-18     	; 0x15cc <vfprintf+0x314>
    15de:	b2 14       	cp	r11, r2
    15e0:	18 f4       	brcc	.+6      	; 0x15e8 <vfprintf+0x330>
    15e2:	2b 18       	sub	r2, r11
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <vfprintf+0x332>
    15e6:	98 2c       	mov	r9, r8
    15e8:	21 2c       	mov	r2, r1
    15ea:	a4 fe       	sbrs	r10, 4
    15ec:	10 c0       	rjmp	.+32     	; 0x160e <vfprintf+0x356>
    15ee:	b6 01       	movw	r22, r12
    15f0:	80 e3       	ldi	r24, 0x30	; 48
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    15f8:	a2 fe       	sbrs	r10, 2
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <vfprintf+0x372>
    15fc:	a1 fc       	sbrc	r10, 1
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <vfprintf+0x34e>
    1600:	88 e7       	ldi	r24, 0x78	; 120
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 c0       	rjmp	.+4      	; 0x160a <vfprintf+0x352>
    1606:	88 e5       	ldi	r24, 0x58	; 88
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b6 01       	movw	r22, r12
    160c:	0c c0       	rjmp	.+24     	; 0x1626 <vfprintf+0x36e>
    160e:	8a 2d       	mov	r24, r10
    1610:	86 78       	andi	r24, 0x86	; 134
    1612:	59 f0       	breq	.+22     	; 0x162a <vfprintf+0x372>
    1614:	a1 fe       	sbrs	r10, 1
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x364>
    1618:	8b e2       	ldi	r24, 0x2B	; 43
    161a:	01 c0       	rjmp	.+2      	; 0x161e <vfprintf+0x366>
    161c:	80 e2       	ldi	r24, 0x20	; 32
    161e:	a7 fc       	sbrc	r10, 7
    1620:	8d e2       	ldi	r24, 0x2D	; 45
    1622:	b6 01       	movw	r22, r12
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    162a:	89 14       	cp	r8, r9
    162c:	38 f4       	brcc	.+14     	; 0x163c <vfprintf+0x384>
    162e:	b6 01       	movw	r22, r12
    1630:	80 e3       	ldi	r24, 0x30	; 48
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    1638:	9a 94       	dec	r9
    163a:	f7 cf       	rjmp	.-18     	; 0x162a <vfprintf+0x372>
    163c:	8a 94       	dec	r8
    163e:	f3 01       	movw	r30, r6
    1640:	e8 0d       	add	r30, r8
    1642:	f1 1d       	adc	r31, r1
    1644:	80 81       	ld	r24, Z
    1646:	b6 01       	movw	r22, r12
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    164e:	81 10       	cpse	r8, r1
    1650:	f5 cf       	rjmp	.-22     	; 0x163c <vfprintf+0x384>
    1652:	22 20       	and	r2, r2
    1654:	09 f4       	brne	.+2      	; 0x1658 <vfprintf+0x3a0>
    1656:	42 ce       	rjmp	.-892    	; 0x12dc <vfprintf+0x24>
    1658:	b6 01       	movw	r22, r12
    165a:	80 e2       	ldi	r24, 0x20	; 32
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fputc>
    1662:	2a 94       	dec	r2
    1664:	f6 cf       	rjmp	.-20     	; 0x1652 <vfprintf+0x39a>
    1666:	f6 01       	movw	r30, r12
    1668:	86 81       	ldd	r24, Z+6	; 0x06
    166a:	97 81       	ldd	r25, Z+7	; 0x07
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x3ba>
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	9f ef       	ldi	r25, 0xFF	; 255
    1672:	2b 96       	adiw	r28, 0x0b	; 11
    1674:	e2 e1       	ldi	r30, 0x12	; 18
    1676:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__epilogue_restores__>

0000167a <strnlen_P>:
    167a:	fc 01       	movw	r30, r24
    167c:	05 90       	lpm	r0, Z+
    167e:	61 50       	subi	r22, 0x01	; 1
    1680:	70 40       	sbci	r23, 0x00	; 0
    1682:	01 10       	cpse	r0, r1
    1684:	d8 f7       	brcc	.-10     	; 0x167c <strnlen_P+0x2>
    1686:	80 95       	com	r24
    1688:	90 95       	com	r25
    168a:	8e 0f       	add	r24, r30
    168c:	9f 1f       	adc	r25, r31
    168e:	08 95       	ret

00001690 <strnlen>:
    1690:	fc 01       	movw	r30, r24
    1692:	61 50       	subi	r22, 0x01	; 1
    1694:	70 40       	sbci	r23, 0x00	; 0
    1696:	01 90       	ld	r0, Z+
    1698:	01 10       	cpse	r0, r1
    169a:	d8 f7       	brcc	.-10     	; 0x1692 <strnlen+0x2>
    169c:	80 95       	com	r24
    169e:	90 95       	com	r25
    16a0:	8e 0f       	add	r24, r30
    16a2:	9f 1f       	adc	r25, r31
    16a4:	08 95       	ret

000016a6 <fputc>:
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	fb 01       	movw	r30, r22
    16b0:	23 81       	ldd	r18, Z+3	; 0x03
    16b2:	21 fd       	sbrc	r18, 1
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <fputc+0x16>
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	9f ef       	ldi	r25, 0xFF	; 255
    16ba:	2c c0       	rjmp	.+88     	; 0x1714 <fputc+0x6e>
    16bc:	22 ff       	sbrs	r18, 2
    16be:	16 c0       	rjmp	.+44     	; 0x16ec <fputc+0x46>
    16c0:	46 81       	ldd	r20, Z+6	; 0x06
    16c2:	57 81       	ldd	r21, Z+7	; 0x07
    16c4:	24 81       	ldd	r18, Z+4	; 0x04
    16c6:	35 81       	ldd	r19, Z+5	; 0x05
    16c8:	42 17       	cp	r20, r18
    16ca:	53 07       	cpc	r21, r19
    16cc:	44 f4       	brge	.+16     	; 0x16de <fputc+0x38>
    16ce:	a0 81       	ld	r26, Z
    16d0:	b1 81       	ldd	r27, Z+1	; 0x01
    16d2:	9d 01       	movw	r18, r26
    16d4:	2f 5f       	subi	r18, 0xFF	; 255
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	31 83       	std	Z+1, r19	; 0x01
    16da:	20 83       	st	Z, r18
    16dc:	8c 93       	st	X, r24
    16de:	26 81       	ldd	r18, Z+6	; 0x06
    16e0:	37 81       	ldd	r19, Z+7	; 0x07
    16e2:	2f 5f       	subi	r18, 0xFF	; 255
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	37 83       	std	Z+7, r19	; 0x07
    16e8:	26 83       	std	Z+6, r18	; 0x06
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <fputc+0x6e>
    16ec:	8b 01       	movw	r16, r22
    16ee:	ec 01       	movw	r28, r24
    16f0:	fb 01       	movw	r30, r22
    16f2:	00 84       	ldd	r0, Z+8	; 0x08
    16f4:	f1 85       	ldd	r31, Z+9	; 0x09
    16f6:	e0 2d       	mov	r30, r0
    16f8:	09 95       	icall
    16fa:	89 2b       	or	r24, r25
    16fc:	e1 f6       	brne	.-72     	; 0x16b6 <fputc+0x10>
    16fe:	d8 01       	movw	r26, r16
    1700:	16 96       	adiw	r26, 0x06	; 6
    1702:	8d 91       	ld	r24, X+
    1704:	9c 91       	ld	r25, X
    1706:	17 97       	sbiw	r26, 0x07	; 7
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	17 96       	adiw	r26, 0x07	; 7
    170c:	9c 93       	st	X, r25
    170e:	8e 93       	st	-X, r24
    1710:	16 97       	sbiw	r26, 0x06	; 6
    1712:	ce 01       	movw	r24, r28
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <__ultoa_invert>:
    171e:	fa 01       	movw	r30, r20
    1720:	aa 27       	eor	r26, r26
    1722:	28 30       	cpi	r18, 0x08	; 8
    1724:	51 f1       	breq	.+84     	; 0x177a <__ultoa_invert+0x5c>
    1726:	20 31       	cpi	r18, 0x10	; 16
    1728:	81 f1       	breq	.+96     	; 0x178a <__ultoa_invert+0x6c>
    172a:	e8 94       	clt
    172c:	6f 93       	push	r22
    172e:	6e 7f       	andi	r22, 0xFE	; 254
    1730:	6e 5f       	subi	r22, 0xFE	; 254
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	8f 4f       	sbci	r24, 0xFF	; 255
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	af 4f       	sbci	r26, 0xFF	; 255
    173a:	b1 e0       	ldi	r27, 0x01	; 1
    173c:	3e d0       	rcall	.+124    	; 0x17ba <__ultoa_invert+0x9c>
    173e:	b4 e0       	ldi	r27, 0x04	; 4
    1740:	3c d0       	rcall	.+120    	; 0x17ba <__ultoa_invert+0x9c>
    1742:	67 0f       	add	r22, r23
    1744:	78 1f       	adc	r23, r24
    1746:	89 1f       	adc	r24, r25
    1748:	9a 1f       	adc	r25, r26
    174a:	a1 1d       	adc	r26, r1
    174c:	68 0f       	add	r22, r24
    174e:	79 1f       	adc	r23, r25
    1750:	8a 1f       	adc	r24, r26
    1752:	91 1d       	adc	r25, r1
    1754:	a1 1d       	adc	r26, r1
    1756:	6a 0f       	add	r22, r26
    1758:	71 1d       	adc	r23, r1
    175a:	81 1d       	adc	r24, r1
    175c:	91 1d       	adc	r25, r1
    175e:	a1 1d       	adc	r26, r1
    1760:	20 d0       	rcall	.+64     	; 0x17a2 <__ultoa_invert+0x84>
    1762:	09 f4       	brne	.+2      	; 0x1766 <__ultoa_invert+0x48>
    1764:	68 94       	set
    1766:	3f 91       	pop	r19
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	26 9f       	mul	r18, r22
    176c:	11 24       	eor	r1, r1
    176e:	30 19       	sub	r19, r0
    1770:	30 5d       	subi	r19, 0xD0	; 208
    1772:	31 93       	st	Z+, r19
    1774:	de f6       	brtc	.-74     	; 0x172c <__ultoa_invert+0xe>
    1776:	cf 01       	movw	r24, r30
    1778:	08 95       	ret
    177a:	46 2f       	mov	r20, r22
    177c:	47 70       	andi	r20, 0x07	; 7
    177e:	40 5d       	subi	r20, 0xD0	; 208
    1780:	41 93       	st	Z+, r20
    1782:	b3 e0       	ldi	r27, 0x03	; 3
    1784:	0f d0       	rcall	.+30     	; 0x17a4 <__ultoa_invert+0x86>
    1786:	c9 f7       	brne	.-14     	; 0x177a <__ultoa_invert+0x5c>
    1788:	f6 cf       	rjmp	.-20     	; 0x1776 <__ultoa_invert+0x58>
    178a:	46 2f       	mov	r20, r22
    178c:	4f 70       	andi	r20, 0x0F	; 15
    178e:	40 5d       	subi	r20, 0xD0	; 208
    1790:	4a 33       	cpi	r20, 0x3A	; 58
    1792:	18 f0       	brcs	.+6      	; 0x179a <__ultoa_invert+0x7c>
    1794:	49 5d       	subi	r20, 0xD9	; 217
    1796:	31 fd       	sbrc	r19, 1
    1798:	40 52       	subi	r20, 0x20	; 32
    179a:	41 93       	st	Z+, r20
    179c:	02 d0       	rcall	.+4      	; 0x17a2 <__ultoa_invert+0x84>
    179e:	a9 f7       	brne	.-22     	; 0x178a <__ultoa_invert+0x6c>
    17a0:	ea cf       	rjmp	.-44     	; 0x1776 <__ultoa_invert+0x58>
    17a2:	b4 e0       	ldi	r27, 0x04	; 4
    17a4:	a6 95       	lsr	r26
    17a6:	97 95       	ror	r25
    17a8:	87 95       	ror	r24
    17aa:	77 95       	ror	r23
    17ac:	67 95       	ror	r22
    17ae:	ba 95       	dec	r27
    17b0:	c9 f7       	brne	.-14     	; 0x17a4 <__ultoa_invert+0x86>
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	61 05       	cpc	r22, r1
    17b6:	71 05       	cpc	r23, r1
    17b8:	08 95       	ret
    17ba:	9b 01       	movw	r18, r22
    17bc:	ac 01       	movw	r20, r24
    17be:	0a 2e       	mov	r0, r26
    17c0:	06 94       	lsr	r0
    17c2:	57 95       	ror	r21
    17c4:	47 95       	ror	r20
    17c6:	37 95       	ror	r19
    17c8:	27 95       	ror	r18
    17ca:	ba 95       	dec	r27
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__ultoa_invert+0xa2>
    17ce:	62 0f       	add	r22, r18
    17d0:	73 1f       	adc	r23, r19
    17d2:	84 1f       	adc	r24, r20
    17d4:	95 1f       	adc	r25, r21
    17d6:	a0 1d       	adc	r26, r0
    17d8:	08 95       	ret

000017da <__muluhisi3>:
    17da:	0e 94 37 0c 	call	0x186e	; 0x186e <__umulhisi3>
    17de:	a5 9f       	mul	r26, r21
    17e0:	90 0d       	add	r25, r0
    17e2:	b4 9f       	mul	r27, r20
    17e4:	90 0d       	add	r25, r0
    17e6:	a4 9f       	mul	r26, r20
    17e8:	80 0d       	add	r24, r0
    17ea:	91 1d       	adc	r25, r1
    17ec:	11 24       	eor	r1, r1
    17ee:	08 95       	ret

000017f0 <__mulshisi3>:
    17f0:	b7 ff       	sbrs	r27, 7
    17f2:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__muluhisi3>

000017f6 <__mulohisi3>:
    17f6:	0e 94 ed 0b 	call	0x17da	; 0x17da <__muluhisi3>
    17fa:	82 1b       	sub	r24, r18
    17fc:	93 0b       	sbc	r25, r19
    17fe:	08 95       	ret

00001800 <__prologue_saves__>:
    1800:	2f 92       	push	r2
    1802:	3f 92       	push	r3
    1804:	4f 92       	push	r4
    1806:	5f 92       	push	r5
    1808:	6f 92       	push	r6
    180a:	7f 92       	push	r7
    180c:	8f 92       	push	r8
    180e:	9f 92       	push	r9
    1810:	af 92       	push	r10
    1812:	bf 92       	push	r11
    1814:	cf 92       	push	r12
    1816:	df 92       	push	r13
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	ca 1b       	sub	r28, r26
    182a:	db 0b       	sbc	r29, r27
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	09 94       	ijmp

00001838 <__epilogue_restores__>:
    1838:	2a 88       	ldd	r2, Y+18	; 0x12
    183a:	39 88       	ldd	r3, Y+17	; 0x11
    183c:	48 88       	ldd	r4, Y+16	; 0x10
    183e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1840:	6e 84       	ldd	r6, Y+14	; 0x0e
    1842:	7d 84       	ldd	r7, Y+13	; 0x0d
    1844:	8c 84       	ldd	r8, Y+12	; 0x0c
    1846:	9b 84       	ldd	r9, Y+11	; 0x0b
    1848:	aa 84       	ldd	r10, Y+10	; 0x0a
    184a:	b9 84       	ldd	r11, Y+9	; 0x09
    184c:	c8 84       	ldd	r12, Y+8	; 0x08
    184e:	df 80       	ldd	r13, Y+7	; 0x07
    1850:	ee 80       	ldd	r14, Y+6	; 0x06
    1852:	fd 80       	ldd	r15, Y+5	; 0x05
    1854:	0c 81       	ldd	r16, Y+4	; 0x04
    1856:	1b 81       	ldd	r17, Y+3	; 0x03
    1858:	aa 81       	ldd	r26, Y+2	; 0x02
    185a:	b9 81       	ldd	r27, Y+1	; 0x01
    185c:	ce 0f       	add	r28, r30
    185e:	d1 1d       	adc	r29, r1
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	ed 01       	movw	r28, r26
    186c:	08 95       	ret

0000186e <__umulhisi3>:
    186e:	a2 9f       	mul	r26, r18
    1870:	b0 01       	movw	r22, r0
    1872:	b3 9f       	mul	r27, r19
    1874:	c0 01       	movw	r24, r0
    1876:	a3 9f       	mul	r26, r19
    1878:	70 0d       	add	r23, r0
    187a:	81 1d       	adc	r24, r1
    187c:	11 24       	eor	r1, r1
    187e:	91 1d       	adc	r25, r1
    1880:	b2 9f       	mul	r27, r18
    1882:	70 0d       	add	r23, r0
    1884:	81 1d       	adc	r24, r1
    1886:	11 24       	eor	r1, r1
    1888:	91 1d       	adc	r25, r1
    188a:	08 95       	ret

0000188c <_exit>:
    188c:	f8 94       	cli

0000188e <__stop_program>:
    188e:	ff cf       	rjmp	.-2      	; 0x188e <__stop_program>
