
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001ada  00001b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000163  00800128  00800128  00001b96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003447  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001616  00000000  00000000  0000542b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dda  00000000  00000000  00006a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000934  00000000  00000000  0000881c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fd8  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dce  00000000  00000000  0000a128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000bef6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__ctors_end>
       4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      14:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_5>
      18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      40:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_16>
      44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      4c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      50:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_20>
      54:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_21>
      58:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      5c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      60:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      64:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      68:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      6c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      70:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      74:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      78:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2478>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2468>:
      a4:	25 64 00                                            %d.

000000a7 <__c.2466>:
      a7:	25 64 00                                            %d.

000000aa <__c.2441>:
      aa:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
      ba:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 53     ake Project by S
      ca:	65 61 6e 20 4c 69 6d 00                             ean Lim.

000000d2 <__c.2439>:
      d2:	53 6e 61 6b 65 00                                   Snake.

000000d8 <__c.2034>:
      d8:	53 63 6f 72 65 3a 20 25 6c 64 00                    Score: %ld.

000000e3 <numbers>:
      e3:	4e 01 4b 01 47 01 43 01 3f 01 3b 01 37 01 33 01     N.K.G.C.?.;.7.3.
      f3:	2f 01 2b 01                                         /.+.

000000f7 <letters>:
      f7:	bd 01 b9 01 b5 01 b1 01 ad 01 a9 01 a5 01 a1 01     ................
     107:	9e 01 9a 01 96 01 92 01 8d 01 89 01 85 01 81 01     ................
     117:	7c 01 78 01 74 01 6f 01 6b 01 66 01 61 01 5c 01     |.x.t.o.k.f.a.\.
     127:	57 01 52 01                                         W.R.

0000012b <cols_9>:
     12b:	64 92 92 7d                                         d..}

0000012f <cols_8>:
     12f:	6c 92 92 6d                                         l..m

00000133 <cols_7>:
     133:	80 9e a0 c1                                         ....

00000137 <cols_6>:
     137:	7c 92 92 4d                                         |..M

0000013b <cols_5>:
     13b:	e4 a2 a2 9d                                         ....

0000013f <cols_4>:
     13f:	18 28 48 ff                                         .(H.

00000143 <cols_3>:
     143:	44 92 92 6d                                         D..m

00000147 <cols_2>:
     147:	46 8a 92 63                                         F..c

0000014b <cols_1>:
     14b:	42 fe 03                                            B..

0000014e <cols_0>:
     14e:	7c 92 a2 7d                                         |..}

00000152 <cols_Z>:
     152:	86 8a 92 a2 c3                                      .....

00000157 <cols_Y>:
     157:	e0 10 0e 10 e1                                      .....

0000015c <cols_X>:
     15c:	c6 28 10 28 c7                                      .(.(.

00000161 <cols_W>:
     161:	fc 02 1c 02 fd                                      .....

00000166 <cols_V>:
     166:	f8 04 02 04 f9                                      .....

0000016b <cols_U>:
     16b:	fc 02 02 fd                                         ....

0000016f <cols_T>:
     16f:	80 80 fe 80 81                                      .....

00000174 <cols_S>:
     174:	64 92 92 4d                                         d..M

00000178 <cols_R>:
     178:	fe 90 98 67                                         ...g

0000017c <cols_Q>:
     17c:	7c 82 8a 7c 03                                      |..|.

00000181 <cols_P>:
     181:	fe 90 90 61                                         ...a

00000185 <cols_O>:
     185:	7c 82 82 7d                                         |..}

00000189 <cols_N>:
     189:	fe 20 10 ff                                         . ..

0000018d <cols_M>:
     18d:	fe 40 30 40 ff                                      .@0@.

00000192 <cols_L>:
     192:	fe 02 02 03                                         ....

00000196 <cols_K>:
     196:	fe 10 28 c7                                         ..(.

0000019a <cols_J>:
     19a:	04 02 02 fd                                         ....

0000019e <cols_I>:
     19e:	82 fe 83                                            ...

000001a1 <cols_H>:
     1a1:	fe 10 10 ff                                         ....

000001a5 <cols_G>:
     1a5:	7c 82 92 5d                                         |..]

000001a9 <cols_F>:
     1a9:	fe 90 90 81                                         ....

000001ad <cols_E>:
     1ad:	fe 92 92 83                                         ....

000001b1 <cols_D>:
     1b1:	fe 82 82 7d                                         ...}

000001b5 <cols_C>:
     1b5:	7c 82 82 45                                         |..E

000001b9 <cols_B>:
     1b9:	fe 92 92 6d                                         ...m

000001bd <cols_A>:
     1bd:	7e 90 90 7f                                         ~...

000001c1 <__c.2054>:
     1c1:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001c8 <__c.2050>:
     1c8:	1b 5b 25 64 6d 00                                   .[%dm.

000001ce <__c.2040>:
     1ce:	1b 5b 32 4a 00                                      .[2J.

000001d3 <__c.2025>:
     1d3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001dc <__ctors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	d8 e0       	ldi	r29, 0x08	; 8
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	ea ed       	ldi	r30, 0xDA	; 218
     1f0:	fa e1       	ldi	r31, 0x1A	; 26
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a8 32       	cpi	r26, 0x28	; 40
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	22 e0       	ldi	r18, 0x02	; 2
     200:	a8 e2       	ldi	r26, 0x28	; 40
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	ab 38       	cpi	r26, 0x8B	; 139
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <main>
     212:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <_exit>

00000216 <__bad_interrupt>:
     216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     21a:	e8 e6       	ldi	r30, 0x68	; 104
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	82 60       	ori	r24, 0x02	; 2
     222:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     224:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     226:	ec e6       	ldi	r30, 0x6C	; 108
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	8f 60       	ori	r24, 0x0F	; 15
     22e:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     230:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     234:	08 95       	ret

00000236 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     236:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     23a:	08 95       	ret

0000023c <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     23c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     240:	18 16       	cp	r1, r24
     242:	3c f5       	brge	.+78     	; 0x292 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     244:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     248:	6f b7       	in	r22, 0x3f	; 63
		cli();
     24a:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     24c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <__data_end>
     250:	92 30       	cpi	r25, 0x02	; 2
     252:	b4 f0       	brlt	.+44     	; 0x280 <button_pushed+0x44>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     25a:	f9 01       	movw	r30, r18
     25c:	e7 5d       	subi	r30, 0xD7	; 215
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	40 81       	ld	r20, Z
     262:	f9 01       	movw	r30, r18
     264:	e8 5d       	subi	r30, 0xD8	; 216
     266:	fe 4f       	sbci	r31, 0xFE	; 254
     268:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     26a:	9f 5f       	subi	r25, 0xFF	; 255
     26c:	29 2f       	mov	r18, r25
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <__data_end>
     274:	04 2e       	mov	r0, r20
     276:	00 0c       	add	r0, r0
     278:	55 0b       	sbc	r21, r21
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	6c f3       	brlt	.-38     	; 0x25a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     280:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <__data_end>
     284:	91 50       	subi	r25, 0x01	; 1
     286:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__data_end>
		
		if(interrupts_were_enabled) {
     28a:	66 23       	and	r22, r22
     28c:	1c f4       	brge	.+6      	; 0x294 <button_pushed+0x58>
			// Turn them back on again
			sei();
     28e:	78 94       	sei
     290:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     292:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     294:	08 95       	ret

00000296 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	2f 93       	push	r18
     2a2:	3f 93       	push	r19
     2a4:	4f 93       	push	r20
     2a6:	5f 93       	push	r21
     2a8:	6f 93       	push	r22
     2aa:	7f 93       	push	r23
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
     2b0:	ef 93       	push	r30
     2b2:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2b4:	43 b1       	in	r20, 0x03	; 3
     2b6:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2b8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     2bc:	88 30       	cpi	r24, 0x08	; 8
     2be:	64 f5       	brge	.+88     	; 0x318 <__vector_5+0x82>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2c4:	64 2f       	mov	r22, r20
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	9b 01       	movw	r18, r22
     2ca:	08 2e       	mov	r0, r24
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <__vector_5+0x3c>
     2ce:	35 95       	asr	r19
     2d0:	27 95       	ror	r18
     2d2:	0a 94       	dec	r0
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <__vector_5+0x38>
     2d6:	20 ff       	sbrs	r18, 0
     2d8:	1b c0       	rjmp	.+54     	; 0x310 <__vector_5+0x7a>
     2da:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <last_button_state>
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	08 2e       	mov	r0, r24
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__vector_5+0x52>
     2e4:	35 95       	asr	r19
     2e6:	27 95       	ror	r18
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <__vector_5+0x4e>
     2ec:	20 fd       	sbrc	r18, 0
     2ee:	10 c0       	rjmp	.+32     	; 0x310 <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2f0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <__data_end>
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	2e 0f       	add	r18, r30
     2f8:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__data_end>
     2fc:	0e 2e       	mov	r0, r30
     2fe:	00 0c       	add	r0, r0
     300:	ff 0b       	sbc	r31, r31
     302:	e7 5d       	subi	r30, 0xD7	; 215
     304:	fe 4f       	sbci	r31, 0xFE	; 254
     306:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     308:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__data_end>
     30c:	28 30       	cpi	r18, 0x08	; 8
     30e:	24 f4       	brge	.+8      	; 0x318 <__vector_5+0x82>
     310:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	91 05       	cpc	r25, r1
     316:	c1 f6       	brne	.-80     	; 0x2c8 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     318:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <last_button_state>
}
     31c:	ff 91       	pop	r31
     31e:	ef 91       	pop	r30
     320:	9f 91       	pop	r25
     322:	8f 91       	pop	r24
     324:	7f 91       	pop	r23
     326:	6f 91       	pop	r22
     328:	5f 91       	pop	r21
     32a:	4f 91       	pop	r20
     32c:	3f 91       	pop	r19
     32e:	2f 91       	pop	r18
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <init_food>:
/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
}
     33a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <numFoodItems>
     33e:	08 95       	ret

00000340 <food_at>:
     340:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <numFoodItems>
     344:	13 16       	cp	r1, r19
     346:	84 f4       	brge	.+32     	; 0x368 <food_at+0x28>
     348:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <foodPositions>
     34c:	89 17       	cp	r24, r25
     34e:	71 f0       	breq	.+28     	; 0x36c <food_at+0x2c>
     350:	ea e6       	ldi	r30, 0x6A	; 106
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	03 c0       	rjmp	.+6      	; 0x35e <food_at+0x1e>
     358:	21 91       	ld	r18, Z+
     35a:	28 17       	cp	r18, r24
     35c:	49 f0       	breq	.+18     	; 0x370 <food_at+0x30>
     35e:	9f 5f       	subi	r25, 0xFF	; 255
     360:	39 13       	cpse	r19, r25
     362:	fa cf       	rjmp	.-12     	; 0x358 <food_at+0x18>
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	08 95       	ret
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	08 95       	ret
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	08 95       	ret
     370:	89 2f       	mov	r24, r25
     372:	08 95       	ret

00000374 <is_food_at>:
     374:	0e 94 a0 01 	call	0x340	; 0x340 <food_at>
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	8f 3f       	cpi	r24, 0xFF	; 255
     37c:	09 f4       	brne	.+2      	; 0x380 <is_food_at+0xc>
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	89 2f       	mov	r24, r25
     382:	08 95       	ret

00000384 <add_food_item>:
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <numFoodItems>
     392:	88 30       	cpi	r24, 0x08	; 8
     394:	d4 f5       	brge	.+116    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     396:	00 e0       	ldi	r16, 0x00	; 0
     398:	10 e0       	ldi	r17, 0x00	; 0
     39a:	d0 e0       	ldi	r29, 0x00	; 0
     39c:	c0 e0       	ldi	r28, 0x00	; 0
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <add_food_item+0x20>
     3a0:	0f 5f       	subi	r16, 0xFF	; 255
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
     3a4:	2c 2f       	mov	r18, r28
     3a6:	cc 0f       	add	r28, r28
     3a8:	33 0b       	sbc	r19, r19
     3aa:	2d 5f       	subi	r18, 0xFD	; 253
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	20 0f       	add	r18, r16
     3b0:	31 1f       	adc	r19, r17
     3b2:	2f 70       	andi	r18, 0x0F	; 15
     3b4:	30 78       	andi	r19, 0x80	; 128
     3b6:	33 23       	and	r19, r19
     3b8:	34 f4       	brge	.+12     	; 0x3c6 <add_food_item+0x42>
     3ba:	21 50       	subi	r18, 0x01	; 1
     3bc:	31 09       	sbc	r19, r1
     3be:	20 6f       	ori	r18, 0xF0	; 240
     3c0:	3f 6f       	ori	r19, 0xFF	; 255
     3c2:	2f 5f       	subi	r18, 0xFF	; 255
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	82 2f       	mov	r24, r18
     3c8:	c2 2f       	mov	r28, r18
     3ca:	6d 2f       	mov	r22, r29
     3cc:	dd 0f       	add	r29, r29
     3ce:	77 0b       	sbc	r23, r23
     3d0:	6b 5f       	subi	r22, 0xFB	; 251
     3d2:	7f 4f       	sbci	r23, 0xFF	; 255
     3d4:	67 70       	andi	r22, 0x07	; 7
     3d6:	70 78       	andi	r23, 0x80	; 128
     3d8:	77 23       	and	r23, r23
     3da:	34 f4       	brge	.+12     	; 0x3e8 <add_food_item+0x64>
     3dc:	61 50       	subi	r22, 0x01	; 1
     3de:	71 09       	sbc	r23, r1
     3e0:	68 6f       	ori	r22, 0xF8	; 248
     3e2:	7f 6f       	ori	r23, 0xFF	; 255
     3e4:	6f 5f       	subi	r22, 0xFF	; 255
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	d6 2f       	mov	r29, r22
     3ea:	0e 94 14 03 	call	0x628	; 0x628 <position>
     3ee:	f8 2e       	mov	r15, r24
     3f0:	03 36       	cpi	r16, 0x63	; 99
     3f2:	11 05       	cpc	r17, r1
     3f4:	61 f0       	breq	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3f6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <is_snake_at>
     3fa:	81 11       	cpse	r24, r1
     3fc:	d1 cf       	rjmp	.-94     	; 0x3a0 <add_food_item+0x1c>
     3fe:	8f 2d       	mov	r24, r15
     400:	0e 94 ba 01 	call	0x374	; 0x374 <is_food_at>
     404:	81 11       	cpse	r24, r1
     406:	cc cf       	rjmp	.-104    	; 0x3a0 <add_food_item+0x1c>
     408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40a:	88 e0       	ldi	r24, 0x08	; 8
     40c:	0f c0       	rjmp	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     40e:	88 e0       	ldi	r24, 0x08	; 8
     410:	0d c0       	rjmp	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     412:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <numFoodItems>
     416:	e8 2f       	mov	r30, r24
     418:	08 2e       	mov	r0, r24
     41a:	00 0c       	add	r0, r0
     41c:	ff 0b       	sbc	r31, r31
     41e:	e7 59       	subi	r30, 0x97	; 151
     420:	fe 4f       	sbci	r31, 0xFE	; 254
     422:	f0 82       	st	Z, r15
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <numFoodItems>
     42a:	8f 2d       	mov	r24, r15
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	08 95       	ret

00000438 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     438:	88 23       	and	r24, r24
     43a:	b4 f0       	brlt	.+44     	; 0x468 <remove_food+0x30>
     43c:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <numFoodItems>
     440:	82 17       	cp	r24, r18
     442:	94 f4       	brge	.+36     	; 0x468 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	82 17       	cp	r24, r18
     448:	64 f4       	brge	.+24     	; 0x462 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     44a:	e8 2f       	mov	r30, r24
     44c:	08 2e       	mov	r0, r24
     44e:	00 0c       	add	r0, r0
     450:	ff 0b       	sbc	r31, r31
     452:	e7 59       	subi	r30, 0x97	; 151
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	90 81       	ld	r25, Z
     458:	31 97       	sbiw	r30, 0x01	; 1
     45a:	90 83       	st	Z, r25
     45c:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     45e:	82 17       	cp	r24, r18
     460:	a4 f3       	brlt	.-24     	; 0x44a <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     462:	21 50       	subi	r18, 0x01	; 1
     464:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <numFoodItems>
     468:	08 95       	ret

0000046a <update_display_at_position>:

// Define time interval
int time_elapse = 600;

// Helper function
static void update_display_at_position(PosnType posn, PixelColour colour) {
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	c8 2f       	mov	r28, r24
     472:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     474:	0e 94 0c 03 	call	0x618	; 0x618 <y_position>
     478:	d8 2f       	mov	r29, r24
     47a:	8c 2f       	mov	r24, r28
     47c:	0e 94 09 03 	call	0x612	; 0x612 <x_position>
     480:	41 2f       	mov	r20, r17
     482:	6d 2f       	mov	r22, r29
     484:	0e 94 c2 02 	call	0x584	; 0x584 <ledmatrix_update_pixel>
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     494:	0e 94 05 03 	call	0x60a	; 0x60a <ledmatrix_clear>
	time_elapse = 600;
     498:	88 e5       	ldi	r24, 0x58	; 88
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_elapse+0x1>
     4a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_elapse>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     4a4:	0e 94 75 07 	call	0xeea	; 0xeea <init_snake>
	
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     4a8:	0e 94 96 07 	call	0xf2c	; 0xf2c <get_snake_head_position>
     4ac:	6f e0       	ldi	r22, 0x0F	; 15
     4ae:	0e 94 35 02 	call	0x46a	; 0x46a <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     4b2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <get_snake_tail_position>
     4b6:	60 ef       	ldi	r22, 0xF0	; 240
     4b8:	0e 94 35 02 	call	0x46a	; 0x46a <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     4bc:	0e 94 9d 01 	call	0x33a	; 0x33a <init_food>
     4c0:	c3 e0       	ldi	r28, 0x03	; 3
	
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     4c2:	0e 94 c2 01 	call	0x384	; 0x384 <add_food_item>
     4c6:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     4c8:	0e 94 0e 03 	call	0x61c	; 0x61c <is_position_valid>
     4cc:	88 23       	and	r24, r24
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <init_game+0x48>
			update_display_at_position(food_position, FOOD_COLOUR);
     4d0:	63 e3       	ldi	r22, 0x33	; 51
     4d2:	8d 2f       	mov	r24, r29
     4d4:	0e 94 35 02 	call	0x46a	; 0x46a <update_display_at_position>
     4d8:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	
	for(int8_t i = 0; i < 3; i++) {
     4da:	99 f7       	brne	.-26     	; 0x4c2 <init_game+0x32>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <attempt_to_move_snake_forward>:

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     4ea:	0e 94 96 07 	call	0xf2c	; 0xf2c <get_snake_head_position>
     4ee:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     4f0:	0e 94 fc 07 	call	0xff8	; 0xff8 <advance_snake_head>
     4f4:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     4f6:	88 23       	and	r24, r24
     4f8:	b4 f1       	brlt	.+108    	; 0x566 <attempt_to_move_snake_forward+0x84>
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
	}
	PosnType new_head_position = get_snake_head_position();
     4fa:	0e 94 96 07 	call	0xf2c	; 0xf2c <get_snake_head_position>
     4fe:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     500:	8e ef       	ldi	r24, 0xFE	; 254
     502:	8c 0f       	add	r24, r28
     504:	82 30       	cpi	r24, 0x02	; 2
     506:	e8 f4       	brcc	.+58     	; 0x542 <attempt_to_move_snake_forward+0x60>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     508:	81 2f       	mov	r24, r17
     50a:	0e 94 a0 01 	call	0x340	; 0x340 <food_at>
		remove_food(foodID);
     50e:	0e 94 1c 02 	call	0x438	; 0x438 <remove_food>
		add_to_score(3);
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 23 05 	call	0xa46	; 0xa46 <add_to_score>
		time_elapse -= 15;
     51a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_elapse>
     51e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <time_elapse+0x1>
     522:	0f 97       	sbiw	r24, 0x0f	; 15
     524:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_elapse+0x1>
     528:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_elapse>
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     52c:	0e 94 c2 01 	call	0x384	; 0x384 <add_food_item>
     530:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     532:	0e 94 0e 03 	call	0x61c	; 0x61c <is_position_valid>
     536:	88 23       	and	r24, r24
     538:	21 f0       	breq	.+8      	; 0x542 <attempt_to_move_snake_forward+0x60>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     53a:	63 e3       	ldi	r22, 0x33	; 51
     53c:	80 2f       	mov	r24, r16
     53e:	0e 94 35 02 	call	0x46a	; 0x46a <update_display_at_position>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     542:	cd 7f       	andi	r28, 0xFD	; 253
     544:	c1 30       	cpi	r28, 0x01	; 1
     546:	29 f4       	brne	.+10     	; 0x552 <attempt_to_move_snake_forward+0x70>
		PosnType prev_tail_posn = advance_snake_tail();
     548:	0e 94 ab 07 	call	0xf56	; 0xf56 <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	0e 94 35 02 	call	0x46a	; 0x46a <update_display_at_position>
	}
	
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     552:	60 ef       	ldi	r22, 0xF0	; 240
     554:	8d 2f       	mov	r24, r29
     556:	0e 94 35 02 	call	0x46a	; 0x46a <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     55a:	6f e0       	ldi	r22, 0x0F	; 15
     55c:	81 2f       	mov	r24, r17
     55e:	0e 94 35 02 	call	0x46a	; 0x46a <update_display_at_position>
	return 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	01 c0       	rjmp	.+2      	; 0x568 <attempt_to_move_snake_forward+0x86>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     566:	80 e0       	ldi	r24, 0x00	; 0
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	08 95       	ret

00000572 <get_time_elapse>:

int get_time_elapse(){
	return time_elapse;
}
     572:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_elapse>
     576:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <time_elapse+0x1>
     57a:	08 95       	ret

0000057c <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	0e 94 89 08 	call	0x1112	; 0x1112 <spi_setup_master>
     582:	08 95       	ret

00000584 <ledmatrix_update_pixel>:
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	80 31       	cpi	r24, 0x10	; 16
     58c:	b0 f4       	brcc	.+44     	; 0x5ba <ledmatrix_update_pixel+0x36>
     58e:	68 30       	cpi	r22, 0x08	; 8
     590:	a0 f4       	brcc	.+40     	; 0x5ba <ledmatrix_update_pixel+0x36>
     592:	14 2f       	mov	r17, r20
     594:	c6 2f       	mov	r28, r22
     596:	d8 2f       	mov	r29, r24
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     59e:	6c 2f       	mov	r22, r28
     5a0:	67 70       	andi	r22, 0x07	; 7
     5a2:	80 e1       	ldi	r24, 0x10	; 16
     5a4:	68 9f       	mul	r22, r24
     5a6:	90 01       	movw	r18, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	8d 2f       	mov	r24, r29
     5ac:	8f 70       	andi	r24, 0x0F	; 15
     5ae:	82 2b       	or	r24, r18
     5b0:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     5b4:	81 2f       	mov	r24, r17
     5b6:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	08 95       	ret

000005c2 <ledmatrix_update_column>:
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	80 31       	cpi	r24, 0x10	; 16
     5cc:	90 f4       	brcc	.+36     	; 0x5f2 <ledmatrix_update_column+0x30>
     5ce:	8b 01       	movw	r16, r22
     5d0:	c8 2f       	mov	r28, r24
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     5d8:	8c 2f       	mov	r24, r28
     5da:	8f 70       	andi	r24, 0x0F	; 15
     5dc:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     5e0:	e8 01       	movw	r28, r16
     5e2:	08 5f       	subi	r16, 0xF8	; 248
     5e4:	1f 4f       	sbci	r17, 0xFF	; 255
     5e6:	89 91       	ld	r24, Y+
     5e8:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     5ec:	c0 17       	cp	r28, r16
     5ee:	d1 07       	cpc	r29, r17
     5f0:	d1 f7       	brne	.-12     	; 0x5e6 <ledmatrix_update_column+0x24>
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <ledmatrix_shift_display_left>:
     5fc:	84 e0       	ldi	r24, 0x04	; 4
     5fe:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     608:	08 95       	ret

0000060a <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     60a:	8f e0       	ldi	r24, 0x0F	; 15
     60c:	0e 94 b1 08 	call	0x1162	; 0x1162 <spi_send_byte>
     610:	08 95       	ret

00000612 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     612:	82 95       	swap	r24
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	08 95       	ret

00000618 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     618:	8f 70       	andi	r24, 0x0F	; 15
     61a:	08 95       	ret

0000061c <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     61c:	83 fb       	bst	r24, 3
     61e:	88 27       	eor	r24, r24
     620:	80 f9       	bld	r24, 0
}
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	89 27       	eor	r24, r25
     626:	08 95       	ret

00000628 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     628:	20 e1       	ldi	r18, 0x10	; 16
     62a:	82 9f       	mul	r24, r18
     62c:	c0 01       	movw	r24, r0
     62e:	11 24       	eor	r1, r1
     630:	67 70       	andi	r22, 0x07	; 7
}
     632:	86 2b       	or	r24, r22
     634:	08 95       	ret

00000636 <init_SSD>:
}

void init_SSD()
{
	/* Set port C (all pins) to be outputs */
	DDRC = 0xFF;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	87 b9       	out	0x07, r24	; 7

	/* Set port D, pin 0 to be an output */
	DDRA = 1;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	81 b9       	out	0x01, r24	; 1
     63e:	08 95       	ret

00000640 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     640:	0e 94 be 02 	call	0x57c	; 0x57c <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     644:	0e 94 0d 01 	call	0x21a	; 0x21a <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	7b e4       	ldi	r23, 0x4B	; 75
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 8d 06 	call	0xd1a	; 0xd1a <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     656:	0e 94 ef 08 	call	0x11de	; 0x11de <init_timer0>
	
	// Set up our seven segment display
	init_SSD();
     65a:	0e 94 1b 03 	call	0x636	; 0x636 <init_SSD>
	
	// Turn on global interrupts
	sei();
     65e:	78 94       	sei
     660:	08 95       	ret

00000662 <splash_screen>:

	/* Set port D, pin 0 to be an output */
	DDRA = 1;
}

void splash_screen(void) {
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <set_display_attribute>
	clear_terminal();
     672:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     676:	0e 94 e6 08 	call	0x11cc	; 0x11cc <hide_cursor>
	move_cursor(3,3);
     67a:	63 e0       	ldi	r22, 0x03	; 3
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	0e 94 b7 08 	call	0x116e	; 0x116e <move_cursor>
	printf_P(PSTR("Snake"));
     682:	82 ed       	ldi	r24, 0xD2	; 210
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
	
	move_cursor(3,5);
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	0e 94 b7 08 	call	0x116e	; 0x116e <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     696:	80 e2       	ldi	r24, 0x20	; 32
     698:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Sean Lim"));	
     69c:	8a ea       	ldi	r24, 0xAA	; 170
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     6a8:	85 e2       	ldi	r24, 0x25	; 37
     6aa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     6ae:	0e 94 05 03 	call	0x60a	; 0x60a <ledmatrix_clear>
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     6ba:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     6bc:	0f 2e       	mov	r0, r31
     6be:	ff e0       	ldi	r31, 0x0F	; 15
     6c0:	ff 2e       	mov	r15, r31
     6c2:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     6c4:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     6c6:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     6c8:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
     6ca:	6c 2f       	mov	r22, r28
     6cc:	8f e1       	ldi	r24, 0x1F	; 31
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 56 05 	call	0xaac	; 0xaac <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <splash_screen+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d6:	2f e7       	ldi	r18, 0x7F	; 127
     6d8:	8c e2       	ldi	r24, 0x2C	; 44
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	21 50       	subi	r18, 0x01	; 1
     6de:	80 40       	sbci	r24, 0x00	; 0
     6e0:	90 40       	sbci	r25, 0x00	; 0
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <splash_screen+0x7a>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <splash_screen+0x84>
     6e6:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     6e8:	0e 94 1e 01 	call	0x23c	; 0x23c <button_pushed>
     6ec:	8f 3f       	cpi	r24, 0xFF	; 255
     6ee:	a9 f5       	brne	.+106    	; 0x75a <splash_screen+0xf8>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     6f0:	0e 94 65 05 	call	0xaca	; 0xaca <scroll_display>
     6f4:	81 11       	cpse	r24, r1
     6f6:	ef cf       	rjmp	.-34     	; 0x6d6 <splash_screen+0x74>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     6f8:	0e 94 c6 09 	call	0x138c	; 0x138c <random>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	83 70       	andi	r24, 0x03	; 3
     702:	99 27       	eor	r25, r25
     704:	aa 27       	eor	r26, r26
     706:	b0 78       	andi	r27, 0x80	; 128
     708:	bb 23       	and	r27, r27
     70a:	54 f4       	brge	.+20     	; 0x720 <splash_screen+0xbe>
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	a1 09       	sbc	r26, r1
     710:	b1 09       	sbc	r27, r1
     712:	8c 6f       	ori	r24, 0xFC	; 252
     714:	9f 6f       	ori	r25, 0xFF	; 255
     716:	af 6f       	ori	r26, 0xFF	; 255
     718:	bf 6f       	ori	r27, 0xFF	; 255
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	a1 1d       	adc	r26, r1
     71e:	b1 1d       	adc	r27, r1
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	91 05       	cpc	r25, r1
     724:	a1 05       	cpc	r26, r1
     726:	b1 05       	cpc	r27, r1
     728:	91 f0       	breq	.+36     	; 0x74e <splash_screen+0xec>
     72a:	2c f4       	brge	.+10     	; 0x736 <splash_screen+0xd4>
     72c:	89 2b       	or	r24, r25
     72e:	8a 2b       	or	r24, r26
     730:	8b 2b       	or	r24, r27
     732:	59 f0       	breq	.+22     	; 0x74a <splash_screen+0xe8>
     734:	ca cf       	rjmp	.-108    	; 0x6ca <splash_screen+0x68>
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	91 05       	cpc	r25, r1
     73a:	a1 05       	cpc	r26, r1
     73c:	b1 05       	cpc	r27, r1
     73e:	49 f0       	breq	.+18     	; 0x752 <splash_screen+0xf0>
     740:	03 97       	sbiw	r24, 0x03	; 3
     742:	a1 05       	cpc	r26, r1
     744:	b1 05       	cpc	r27, r1
     746:	39 f0       	breq	.+14     	; 0x756 <splash_screen+0xf4>
     748:	c0 cf       	rjmp	.-128    	; 0x6ca <splash_screen+0x68>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     74a:	cd 2f       	mov	r28, r29
     74c:	be cf       	rjmp	.-132    	; 0x6ca <splash_screen+0x68>
			case 1: colour = COLOUR_RED; break;
     74e:	cf 2d       	mov	r28, r15
     750:	bc cf       	rjmp	.-136    	; 0x6ca <splash_screen+0x68>
			case 2: colour = COLOUR_YELLOW; break;
     752:	c0 2f       	mov	r28, r16
     754:	ba cf       	rjmp	.-140    	; 0x6ca <splash_screen+0x68>
			case 3: colour = COLOUR_GREEN; break;
     756:	c1 2f       	mov	r28, r17
     758:	b8 cf       	rjmp	.-144    	; 0x6ca <splash_screen+0x68>
		}
	}
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	08 95       	ret

00000766 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     766:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <clear_terminal>
	
	// Initialise the game and display
	init_game();
     76a:	0e 94 48 02 	call	0x490	; 0x490 <init_game>
		
	// Initialise the score
	init_score();
     76e:	0e 94 1a 05 	call	0xa34	; 0xa34 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     772:	0e 94 1b 01 	call	0x236	; 0x236 <empty_button_queue>
	clear_serial_input_buffer();
     776:	0e 94 db 06 	call	0xdb6	; 0xdb6 <clear_serial_input_buffer>
     77a:	08 95       	ret

0000077c <play_game>:
}

void play_game(void) {
     77c:	2f 92       	push	r2
     77e:	3f 92       	push	r3
     780:	4f 92       	push	r4
     782:	5f 92       	push	r5
     784:	6f 92       	push	r6
     786:	7f 92       	push	r7
     788:	8f 92       	push	r8
     78a:	9f 92       	push	r9
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
     7a6:	0e 94 07 09 	call	0x120e	; 0x120e <get_clock_ticks>
     7aa:	4b 01       	movw	r8, r22
     7ac:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     7ae:	19 82       	std	Y+1, r1	; 0x01
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     7b0:	33 24       	eor	r3, r3
     7b2:	33 94       	inc	r3
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTA = digit;
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     7b4:	0f 2e       	mov	r0, r31
     7b6:	fd ec       	ldi	r31, 0xCD	; 205
     7b8:	2f 2e       	mov	r2, r31
     7ba:	f0 2d       	mov	r31, r0
			}
		}
		if (get_clock_ticks()%2 == 0){
			display_digit(get_snake_length()%10, 0);
		}
		if (get_clock_ticks()%5 == 0){
     7bc:	0f 2e       	mov	r0, r31
     7be:	f5 e0       	ldi	r31, 0x05	; 5
     7c0:	4f 2e       	mov	r4, r31
     7c2:	51 2c       	mov	r5, r1
     7c4:	61 2c       	mov	r6, r1
     7c6:	71 2c       	mov	r7, r1
     7c8:	f0 2d       	mov	r31, r0
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     7ca:	0e 94 1e 01 	call	0x23c	; 0x23c <button_pushed>
     7ce:	18 2f       	mov	r17, r24
		
		if(button == -1) {
     7d0:	8f 3f       	cpi	r24, 0xFF	; 255
     7d2:	51 f5       	brne	.+84     	; 0x828 <play_game+0xac>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     7d4:	0e 94 d4 06 	call	0xda8	; 0xda8 <serial_input_available>
     7d8:	88 23       	and	r24, r24
     7da:	51 f1       	breq	.+84     	; 0x830 <play_game+0xb4>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     7dc:	e5 e8       	ldi	r30, 0x85	; 133
     7de:	f2 e0       	ldi	r31, 0x02	; 2
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	0e 94 1d 0a 	call	0x143a	; 0x143a <fgetc>
     7e8:	f8 2e       	mov	r15, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     7ea:	f9 81       	ldd	r31, Y+1	; 0x01
     7ec:	f1 11       	cpse	r31, r1
     7ee:	08 c0       	rjmp	.+16     	; 0x800 <play_game+0x84>
     7f0:	2b e1       	ldi	r18, 0x1B	; 27
     7f2:	82 13       	cpse	r24, r18
     7f4:	21 c0       	rjmp	.+66     	; 0x838 <play_game+0xbc>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     7f6:	39 82       	std	Y+1, r3	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     7f8:	0f ef       	ldi	r16, 0xFF	; 255
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
     7fa:	ff 24       	eor	r15, r15
     7fc:	fa 94       	dec	r15
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <play_game+0xca>
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	49 f4       	brne	.+18     	; 0x818 <play_game+0x9c>
     806:	9b e5       	ldi	r25, 0x5B	; 91
     808:	f9 12       	cpse	r15, r25
     80a:	18 c0       	rjmp	.+48     	; 0x83c <play_game+0xc0>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     80c:	e2 e0       	ldi	r30, 0x02	; 2
     80e:	e9 83       	std	Y+1, r30	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     810:	0f ef       	ldi	r16, 0xFF	; 255
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
     812:	ff 24       	eor	r15, r15
     814:	fa 94       	dec	r15
     816:	17 c0       	rjmp	.+46     	; 0x846 <play_game+0xca>
				} else if(characters_into_escape_sequence == 2) {
     818:	f9 81       	ldd	r31, Y+1	; 0x01
     81a:	f2 30       	cpi	r31, 0x02	; 2
     81c:	91 f4       	brne	.+36     	; 0x842 <play_game+0xc6>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     81e:	0f 2d       	mov	r16, r15
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
     820:	19 82       	std	Y+1, r1	; 0x01
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
     822:	ff 24       	eor	r15, r15
     824:	fa 94       	dec	r15
     826:	0f c0       	rjmp	.+30     	; 0x846 <play_game+0xca>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     828:	0f ef       	ldi	r16, 0xFF	; 255
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     82a:	ff 24       	eor	r15, r15
     82c:	fa 94       	dec	r15
     82e:	0b c0       	rjmp	.+22     	; 0x846 <play_game+0xca>
		escape_sequence_char = -1;
     830:	0f ef       	ldi	r16, 0xFF	; 255
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     832:	ff 24       	eor	r15, r15
     834:	fa 94       	dec	r15
     836:	07 c0       	rjmp	.+14     	; 0x846 <play_game+0xca>
		escape_sequence_char = -1;
     838:	0f ef       	ldi	r16, 0xFF	; 255
     83a:	05 c0       	rjmp	.+10     	; 0x846 <play_game+0xca>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     83c:	19 82       	std	Y+1, r1	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     83e:	0f ef       	ldi	r16, 0xFF	; 255
     840:	02 c0       	rjmp	.+4      	; 0x846 <play_game+0xca>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     842:	19 82       	std	Y+1, r1	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     844:	0f ef       	ldi	r16, 0xFF	; 255
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
		if (get_clock_ticks()%2 == 0){
     846:	0e 94 07 09 	call	0x120e	; 0x120e <get_clock_ticks>
     84a:	60 fd       	sbrc	r22, 0
     84c:	15 c0       	rjmp	.+42     	; 0x878 <play_game+0xfc>
			display_digit(get_snake_length()%10, 0);
     84e:	0e 94 a8 07 	call	0xf50	; 0xf50 <get_snake_length>
	sei();
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTA = digit;
     852:	12 b8       	out	0x02, r1	; 2
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     854:	82 9d       	mul	r24, r2
     856:	91 2d       	mov	r25, r1
     858:	11 24       	eor	r1, r1
     85a:	96 95       	lsr	r25
     85c:	96 95       	lsr	r25
     85e:	96 95       	lsr	r25
     860:	99 0f       	add	r25, r25
     862:	29 2f       	mov	r18, r25
     864:	22 0f       	add	r18, r18
     866:	22 0f       	add	r18, r18
     868:	92 0f       	add	r25, r18
     86a:	89 1b       	sub	r24, r25
     86c:	e8 2f       	mov	r30, r24
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	ea 5f       	subi	r30, 0xFA	; 250
     872:	fe 4f       	sbci	r31, 0xFE	; 254
     874:	80 81       	ld	r24, Z
     876:	88 b9       	out	0x08, r24	; 8
			}
		}
		if (get_clock_ticks()%2 == 0){
			display_digit(get_snake_length()%10, 0);
		}
		if (get_clock_ticks()%5 == 0){
     878:	0e 94 07 09 	call	0x120e	; 0x120e <get_clock_ticks>
     87c:	a3 01       	movw	r20, r6
     87e:	92 01       	movw	r18, r4
     880:	0e 94 3a 09 	call	0x1274	; 0x1274 <__udivmodsi4>
     884:	67 2b       	or	r22, r23
     886:	68 2b       	or	r22, r24
     888:	69 2b       	or	r22, r25
     88a:	71 f4       	brne	.+28     	; 0x8a8 <play_game+0x12c>
			display_digit(get_snake_length()/10, 1);
     88c:	0e 94 a8 07 	call	0xf50	; 0xf50 <get_snake_length>
	sei();
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTA = digit;
     890:	32 b8       	out	0x02, r3	; 2
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     892:	82 9d       	mul	r24, r2
     894:	e1 2d       	mov	r30, r1
     896:	11 24       	eor	r1, r1
     898:	e6 95       	lsr	r30
     89a:	e6 95       	lsr	r30
     89c:	e6 95       	lsr	r30
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	ea 5f       	subi	r30, 0xFA	; 250
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	80 81       	ld	r24, Z
     8a6:	88 b9       	out	0x08, r24	; 8
		if (get_clock_ticks()%5 == 0){
			display_digit(get_snake_length()/10, 1);
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     8a8:	11 23       	and	r17, r17
     8aa:	11 f0       	breq	.+4      	; 0x8b0 <play_game+0x134>
     8ac:	03 34       	cpi	r16, 0x43	; 67
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <play_game+0x13c>
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
     8b0:	83 2d       	mov	r24, r3
     8b2:	0e 94 c2 07 	call	0xf84	; 0xf84 <set_snake_dirn>
     8b6:	65 c0       	rjmp	.+202    	; 0x982 <__stack+0x83>
		} else  if (button==2 || escape_sequence_char == 'A') {
     8b8:	12 30       	cpi	r17, 0x02	; 2
     8ba:	11 f0       	breq	.+4      	; 0x8c0 <play_game+0x144>
     8bc:	01 34       	cpi	r16, 0x41	; 65
     8be:	21 f4       	brne	.+8      	; 0x8c8 <play_game+0x14c>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 c2 07 	call	0xf84	; 0xf84 <set_snake_dirn>
     8c6:	5d c0       	rjmp	.+186    	; 0x982 <__stack+0x83>
		} else if(button==3 || escape_sequence_char=='D') {
     8c8:	13 30       	cpi	r17, 0x03	; 3
     8ca:	11 f0       	breq	.+4      	; 0x8d0 <play_game+0x154>
     8cc:	04 34       	cpi	r16, 0x44	; 68
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <play_game+0x15c>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	0e 94 c2 07 	call	0xf84	; 0xf84 <set_snake_dirn>
     8d6:	55 c0       	rjmp	.+170    	; 0x982 <__stack+0x83>
		} else if (button==1 || escape_sequence_char == 'B') {
     8d8:	11 30       	cpi	r17, 0x01	; 1
     8da:	11 f0       	breq	.+4      	; 0x8e0 <play_game+0x164>
     8dc:	02 34       	cpi	r16, 0x42	; 66
     8de:	21 f4       	brne	.+8      	; 0x8e8 <play_game+0x16c>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	0e 94 c2 07 	call	0xf84	; 0xf84 <set_snake_dirn>
     8e6:	4d c0       	rjmp	.+154    	; 0x982 <__stack+0x83>
		} else if(serial_input == 'p' || serial_input == 'P') {
     8e8:	8f 2d       	mov	r24, r15
     8ea:	8f 7d       	andi	r24, 0xDF	; 223
     8ec:	80 35       	cpi	r24, 0x50	; 80
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <play_game+0x176>
     8f0:	48 c0       	rjmp	.+144    	; 0x982 <__stack+0x83>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again. All other input (buttons, serial etc.) must be ignored.
			uint32_t unpause_timer = get_clock_ticks()-last_move_time; //time until snake should move again
     8f2:	0e 94 07 09 	call	0x120e	; 0x120e <get_clock_ticks>
     8f6:	6b 01       	movw	r12, r22
     8f8:	7c 01       	movw	r14, r24
     8fa:	c8 18       	sub	r12, r8
     8fc:	d9 08       	sbc	r13, r9
     8fe:	ea 08       	sbc	r14, r10
     900:	fb 08       	sbc	r15, r11
			char new_serial_input;
			printf_P(PSTR("%d"), get_snake_length()%10);
     902:	0e 94 a8 07 	call	0xf50	; 0xf50 <get_snake_length>
     906:	82 9d       	mul	r24, r2
     908:	91 2d       	mov	r25, r1
     90a:	11 24       	eor	r1, r1
     90c:	96 95       	lsr	r25
     90e:	96 95       	lsr	r25
     910:	96 95       	lsr	r25
     912:	99 0f       	add	r25, r25
     914:	29 2f       	mov	r18, r25
     916:	22 0f       	add	r18, r18
     918:	22 0f       	add	r18, r18
     91a:	92 0f       	add	r25, r18
     91c:	89 1b       	sub	r24, r25
     91e:	1f 92       	push	r1
     920:	8f 93       	push	r24
     922:	87 ea       	ldi	r24, 0xA7	; 167
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
			printf_P(PSTR("%d"), get_snake_length()/10);
     92e:	0e 94 a8 07 	call	0xf50	; 0xf50 <get_snake_length>
     932:	82 9d       	mul	r24, r2
     934:	81 2d       	mov	r24, r1
     936:	11 24       	eor	r1, r1
     938:	86 95       	lsr	r24
     93a:	86 95       	lsr	r24
     93c:	86 95       	lsr	r24
     93e:	1f 92       	push	r1
     940:	8f 93       	push	r24
     942:	84 ea       	ldi	r24, 0xA4	; 164
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
			while(1){
				if(serial_input_available()){
     958:	0e 94 d4 06 	call	0xda8	; 0xda8 <serial_input_available>
     95c:	88 23       	and	r24, r24
     95e:	e1 f3       	breq	.-8      	; 0x958 <__stack+0x59>
					new_serial_input = fgetc(stdin);
     960:	e5 e8       	ldi	r30, 0x85	; 133
     962:	f2 e0       	ldi	r31, 0x02	; 2
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	0e 94 1d 0a 	call	0x143a	; 0x143a <fgetc>
					if (new_serial_input == 'p' || new_serial_input == 'P'){
     96c:	8f 7d       	andi	r24, 0xDF	; 223
     96e:	80 35       	cpi	r24, 0x50	; 80
     970:	99 f7       	brne	.-26     	; 0x958 <__stack+0x59>
						last_move_time = get_clock_ticks()-(unpause_timer);
     972:	0e 94 07 09 	call	0x120e	; 0x120e <get_clock_ticks>
     976:	4b 01       	movw	r8, r22
     978:	5c 01       	movw	r10, r24
     97a:	8c 18       	sub	r8, r12
     97c:	9d 08       	sbc	r9, r13
     97e:	ae 08       	sbc	r10, r14
     980:	bf 08       	sbc	r11, r15
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_time_elapse()) {
     982:	0e 94 07 09 	call	0x120e	; 0x120e <get_clock_ticks>
     986:	6b 01       	movw	r12, r22
     988:	7c 01       	movw	r14, r24
     98a:	0e 94 b9 02 	call	0x572	; 0x572 <get_time_elapse>
     98e:	09 2e       	mov	r0, r25
     990:	00 0c       	add	r0, r0
     992:	aa 0b       	sbc	r26, r26
     994:	bb 0b       	sbc	r27, r27
     996:	88 0d       	add	r24, r8
     998:	99 1d       	adc	r25, r9
     99a:	aa 1d       	adc	r26, r10
     99c:	bb 1d       	adc	r27, r11
     99e:	c8 16       	cp	r12, r24
     9a0:	d9 06       	cpc	r13, r25
     9a2:	ea 06       	cpc	r14, r26
     9a4:	fb 06       	cpc	r15, r27
     9a6:	08 f4       	brcc	.+2      	; 0x9aa <__stack+0xab>
     9a8:	10 cf       	rjmp	.-480    	; 0x7ca <play_game+0x4e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
     9aa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <attempt_to_move_snake_forward>
     9ae:	88 23       	and	r24, r24
     9b0:	29 f0       	breq	.+10     	; 0x9bc <__stack+0xbd>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
     9b2:	0e 94 07 09 	call	0x120e	; 0x120e <get_clock_ticks>
     9b6:	4b 01       	movw	r8, r22
     9b8:	5c 01       	movw	r10, r24
     9ba:	07 cf       	rjmp	.-498    	; 0x7ca <play_game+0x4e>
		}
	}
	// If we get here the game is over. 
}
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	8f 90       	pop	r8
     9d6:	7f 90       	pop	r7
     9d8:	6f 90       	pop	r6
     9da:	5f 90       	pop	r5
     9dc:	4f 90       	pop	r4
     9de:	3f 90       	pop	r3
     9e0:	2f 90       	pop	r2
     9e2:	08 95       	ret

000009e4 <handle_game_over>:


void handle_game_over() {
	move_cursor(10,14);
     9e4:	6e e0       	ldi	r22, 0x0E	; 14
     9e6:	8a e0       	ldi	r24, 0x0A	; 10
     9e8:	0e 94 b7 08 	call	0x116e	; 0x116e <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     9ec:	8a e9       	ldi	r24, 0x9A	; 154
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
	move_cursor(10,15);
     9f8:	6f e0       	ldi	r22, 0x0F	; 15
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	0e 94 b7 08 	call	0x116e	; 0x116e <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     a00:	8c e7       	ldi	r24, 0x7C	; 124
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
	while(button_pushed() == -1) {
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0e 94 1e 01 	call	0x23c	; 0x23c <button_pushed>
     a18:	8f 3f       	cpi	r24, 0xFF	; 255
     a1a:	e1 f3       	breq	.-8      	; 0xa14 <handle_game_over+0x30>
		; // wait until a button has been pushed
	}
	
     a1c:	08 95       	ret

00000a1e <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     a1e:	0e 94 20 03 	call	0x640	; 0x640 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     a22:	0e 94 31 03 	call	0x662	; 0x662 <splash_screen>
	
	while(1) {
		new_game();
     a26:	0e 94 b3 03 	call	0x766	; 0x766 <new_game>
		play_game();
     a2a:	0e 94 be 03 	call	0x77c	; 0x77c <play_game>
		handle_game_over();
     a2e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <handle_game_over>
     a32:	f9 cf       	rjmp	.-14     	; 0xa26 <main+0x8>

00000a34 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
     a34:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <score>
     a38:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <score+0x1>
     a3c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <score+0x2>
     a40:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <score+0x3>
     a44:	08 95       	ret

00000a46 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
     a46:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <score>
     a4a:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <score+0x1>
     a4e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <score+0x2>
     a52:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <score+0x3>
     a56:	48 0f       	add	r20, r24
     a58:	59 1f       	adc	r21, r25
     a5a:	61 1d       	adc	r22, r1
     a5c:	71 1d       	adc	r23, r1
     a5e:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <score>
     a62:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <score+0x1>
     a66:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <score+0x2>
     a6a:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <score+0x3>
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     a6e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <hide_cursor>
	move_cursor(50,0);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	82 e3       	ldi	r24, 0x32	; 50
     a76:	0e 94 b7 08 	call	0x116e	; 0x116e <move_cursor>
	printf_P(PSTR("Score: %ld"), score);
     a7a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <score+0x3>
     a7e:	8f 93       	push	r24
     a80:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <score+0x2>
     a84:	8f 93       	push	r24
     a86:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <score+0x1>
     a8a:	8f 93       	push	r24
     a8c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <score>
     a90:	8f 93       	push	r24
     a92:	88 ed       	ldi	r24, 0xD8	; 216
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	9f 93       	push	r25
     a98:	8f 93       	push	r24
     a9a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
}
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	08 95       	ret

00000aac <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     aac:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <colour>
	display_string = string_to_display;
     ab0:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <display_string+0x1>
     ab4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <display_string>
	next_col_ptr = 0;
     ab8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <next_col_ptr+0x1>
     abc:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <next_col_ptr>
	next_char_to_display = 0;
     ac0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <next_char_to_display+0x1>
     ac4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <next_char_to_display>
     ac8:	08 95       	ret

00000aca <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	28 97       	sbiw	r28, 0x08	; 8
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     ae2:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <next_col_ptr>
     ae6:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <next_col_ptr+0x1>
     aea:	30 97       	sbiw	r30, 0x00	; 0
     aec:	81 f0       	breq	.+32     	; 0xb0e <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     aee:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     af0:	10 ff       	sbrs	r17, 0
     af2:	06 c0       	rjmp	.+12     	; 0xb00 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     af4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <next_col_ptr+0x1>
     af8:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     afc:	00 e0       	ldi	r16, 0x00	; 0
     afe:	6b c0       	rjmp	.+214    	; 0xbd6 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     b00:	31 96       	adiw	r30, 0x01	; 1
     b02:	f0 93 3c 01 	sts	0x013C, r31	; 0x80013c <next_col_ptr+0x1>
     b06:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     b0a:	00 e0       	ldi	r16, 0x00	; 0
     b0c:	64 c0       	rjmp	.+200    	; 0xbd6 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     b0e:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <next_char_to_display>
     b12:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <next_char_to_display+0x1>
     b16:	30 97       	sbiw	r30, 0x00	; 0
     b18:	09 f4       	brne	.+2      	; 0xb1c <scroll_display+0x52>
     b1a:	49 c0       	rjmp	.+146    	; 0xbae <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     b1c:	cf 01       	movw	r24, r30
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <next_char_to_display+0x1>
     b24:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <next_char_to_display>
     b28:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     b2a:	e1 11       	cpse	r30, r1
     b2c:	0a c0       	rjmp	.+20     	; 0xb42 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     b2e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <next_char_to_display+0x1>
     b32:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <next_char_to_display>
			shift_countdown = 16;
     b36:	80 e1       	ldi	r24, 0x10	; 16
     b38:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     b3c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	4a c0       	rjmp	.+148    	; 0xbd6 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     b42:	8f e9       	ldi	r24, 0x9F	; 159
     b44:	8e 0f       	add	r24, r30
     b46:	8a 31       	cpi	r24, 0x1A	; 26
     b48:	70 f4       	brcc	.+28     	; 0xb66 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	eb 5c       	subi	r30, 0xCB	; 203
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	85 91       	lpm	r24, Z+
     b56:	94 91       	lpm	r25, Z
     b58:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <next_col_ptr+0x1>
     b5c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     b60:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	38 c0       	rjmp	.+112    	; 0xbd6 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     b66:	8f eb       	ldi	r24, 0xBF	; 191
     b68:	8e 0f       	add	r24, r30
     b6a:	8a 31       	cpi	r24, 0x1A	; 26
     b6c:	70 f4       	brcc	.+28     	; 0xb8a <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	eb 58       	subi	r30, 0x8B	; 139
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	85 91       	lpm	r24, Z+
     b7a:	94 91       	lpm	r25, Z
     b7c:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <next_col_ptr+0x1>
     b80:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     b84:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     b86:	10 e0       	ldi	r17, 0x00	; 0
     b88:	26 c0       	rjmp	.+76     	; 0xbd6 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     b8a:	80 ed       	ldi	r24, 0xD0	; 208
     b8c:	8e 0f       	add	r24, r30
     b8e:	8a 30       	cpi	r24, 0x0A	; 10
     b90:	00 f5       	brcc	.+64     	; 0xbd2 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	ed 57       	subi	r30, 0x7D	; 125
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	85 91       	lpm	r24, Z+
     b9e:	94 91       	lpm	r25, Z
     ba0:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <next_col_ptr+0x1>
     ba4:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     ba8:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     baa:	10 e0       	ldi	r17, 0x00	; 0
     bac:	14 c0       	rjmp	.+40     	; 0xbd6 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     bae:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <display_string>
     bb2:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     bb6:	01 e0       	ldi	r16, 0x01	; 1
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	09 f0       	breq	.+2      	; 0xbbe <scroll_display+0xf4>
     bbc:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     bbe:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <next_char_to_display+0x1>
     bc2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <next_char_to_display>
		display_string = 0;
     bc6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <display_string+0x1>
     bca:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     bce:	10 e0       	ldi	r17, 0x00	; 0
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     bd2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     bd4:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     bd6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     bda:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <colour>
     bde:	fe 01       	movw	r30, r28
     be0:	38 96       	adiw	r30, 0x08	; 8
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     be6:	11 23       	and	r17, r17
     be8:	14 f4       	brge	.+4      	; 0xbee <scroll_display+0x124>
			column_colour_data[i] = colour;
     bea:	20 83       	st	Z, r18
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
     bee:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     bf0:	11 0f       	add	r17, r17
     bf2:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     bf4:	e8 17       	cp	r30, r24
     bf6:	f9 07       	cpc	r31, r25
     bf8:	b1 f7       	brne	.-20     	; 0xbe6 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     bfa:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     bfc:	be 01       	movw	r22, r28
     bfe:	6f 5f       	subi	r22, 0xFF	; 255
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	8f e0       	ldi	r24, 0x0F	; 15
     c04:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <ledmatrix_update_column>
	if(shift_countdown > 0) {
     c08:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <shift_countdown.1854>
     c0c:	88 23       	and	r24, r24
     c0e:	89 f0       	breq	.+34     	; 0xc32 <scroll_display+0x168>
		shift_countdown--;
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
     c16:	00 23       	and	r16, r16
     c18:	11 f0       	breq	.+4      	; 0xc1e <scroll_display+0x154>
     c1a:	88 23       	and	r24, r24
     c1c:	11 f0       	breq	.+4      	; 0xc22 <scroll_display+0x158>
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <scroll_display+0x15e>
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <scroll_display+0x15e>
     c26:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	99 23       	and	r25, r25
     c2c:	29 f0       	breq	.+10     	; 0xc38 <scroll_display+0x16e>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     c32:	00 23       	and	r16, r16
     c34:	a1 f3       	breq	.-24     	; 0xc1e <scroll_display+0x154>
     c36:	f7 cf       	rjmp	.-18     	; 0xc26 <scroll_display+0x15c>
	return !finished;
}
     c38:	28 96       	adiw	r28, 0x08	; 8
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	08 95       	ret

00000c4e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     c4e:	cf 93       	push	r28
     c50:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     c52:	8a 30       	cpi	r24, 0x0A	; 10
     c54:	19 f4       	brne	.+6      	; 0xc5c <uart_put_char+0xe>
		uart_put_char('\r', stream);
     c56:	8d e0       	ldi	r24, 0x0D	; 13
     c58:	0e 94 27 06 	call	0xc4e	; 0xc4e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     c5c:	9f b7       	in	r25, 0x3f	; 63
     c5e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     c62:	99 23       	and	r25, r25
     c64:	29 f1       	breq	.+74     	; 0xcb0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     c66:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <bytes_in_out_buffer>
     c6a:	8f 3f       	cpi	r24, 0xFF	; 255
     c6c:	d1 f3       	breq	.-12     	; 0xc62 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     c6e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     c70:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <out_insert_pos>
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8e 0f       	add	r24, r30
     c78:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <out_insert_pos>
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ed 58       	subi	r30, 0x8D	; 141
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     c84:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <bytes_in_out_buffer>
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     c8e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <out_insert_pos>
     c92:	8f 3f       	cpi	r24, 0xFF	; 255
     c94:	11 f4       	brne	.+4      	; 0xc9a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     c96:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     c9a:	e1 ec       	ldi	r30, 0xC1	; 193
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 62       	ori	r24, 0x20	; 32
     ca2:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     ca4:	99 23       	and	r25, r25
     ca6:	39 f0       	breq	.+14     	; 0xcb6 <uart_put_char+0x68>
		sei();
     ca8:	78 94       	sei
	}
	return 0;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	05 c0       	rjmp	.+10     	; 0xcba <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
}
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     cbe:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <bytes_in_input_buffer>
     cc2:	88 23       	and	r24, r24
     cc4:	e1 f3       	breq	.-8      	; 0xcbe <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     cc6:	2f b7       	in	r18, 0x3f	; 63
     cc8:	20 78       	andi	r18, 0x80	; 128
	cli();
     cca:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     ccc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <input_insert_pos>
     cd0:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <bytes_in_input_buffer>
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	83 1b       	sub	r24, r19
     cd8:	91 09       	sbc	r25, r1
     cda:	5a f4       	brpl	.+22     	; 0xcf2 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     cdc:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <input_insert_pos>
     ce0:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	e8 1b       	sub	r30, r24
     ce8:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     cea:	ed 57       	subi	r30, 0x7D	; 125
     cec:	fd 4f       	sbci	r31, 0xFD	; 253
     cee:	80 81       	ld	r24, Z
     cf0:	0a c0       	rjmp	.+20     	; 0xd06 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     cf2:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <input_insert_pos>
     cf6:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <bytes_in_input_buffer>
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	e8 1b       	sub	r30, r24
     cfe:	f1 09       	sbc	r31, r1
     d00:	ed 58       	subi	r30, 0x8D	; 141
     d02:	fd 4f       	sbci	r31, 0xFD	; 253
     d04:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     d06:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <bytes_in_input_buffer>
     d0a:	91 50       	subi	r25, 0x01	; 1
     d0c:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <bytes_in_input_buffer>
	if(interrupts_enabled) {
     d10:	22 23       	and	r18, r18
     d12:	09 f0       	breq	.+2      	; 0xd16 <uart_get_char+0x58>
		sei();
     d14:	78 94       	sei
	}	
	return c;
}
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	08 95       	ret

00000d1a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     d1a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <out_insert_pos>
	bytes_in_out_buffer = 0;
     d1e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <bytes_in_out_buffer>
	input_insert_pos = 0;
     d22:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <input_insert_pos>
	bytes_in_input_buffer = 0;
     d26:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <bytes_in_input_buffer>
	input_overrun = 0;
     d2a:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     d2e:	40 93 3d 01 	sts	0x013D, r20	; 0x80013d <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	aa 1f       	adc	r26, r26
     d3c:	bb 1f       	adc	r27, r27
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	aa 1f       	adc	r26, r26
     d44:	bb 1f       	adc	r27, r27
     d46:	9c 01       	movw	r18, r24
     d48:	ad 01       	movw	r20, r26
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
     d4e:	44 1f       	adc	r20, r20
     d50:	55 1f       	adc	r21, r21
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	72 e1       	ldi	r23, 0x12	; 18
     d56:	8a e7       	ldi	r24, 0x7A	; 122
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__divmodsi4>
     d5e:	ba 01       	movw	r22, r20
     d60:	a9 01       	movw	r20, r18
     d62:	4f 5f       	subi	r20, 0xFF	; 255
     d64:	5f 4f       	sbci	r21, 0xFF	; 255
     d66:	6f 4f       	sbci	r22, 0xFF	; 255
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	db 01       	movw	r26, r22
     d6c:	ca 01       	movw	r24, r20
     d6e:	1a f4       	brpl	.+6      	; 0xd76 <init_serial_stdio+0x5c>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
     d76:	b5 95       	asr	r27
     d78:	a7 95       	ror	r26
     d7a:	97 95       	ror	r25
     d7c:	87 95       	ror	r24
     d7e:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     d80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     d84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     d88:	e1 ec       	ldi	r30, 0xC1	; 193
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	88 e1       	ldi	r24, 0x18	; 24
     d8e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     d90:	80 81       	ld	r24, Z
     d92:	80 68       	ori	r24, 0x80	; 128
     d94:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     d96:	e5 e8       	ldi	r30, 0x85	; 133
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	81 e1       	ldi	r24, 0x11	; 17
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	93 83       	std	Z+3, r25	; 0x03
     da0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	08 95       	ret

00000da8 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     da8:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <bytes_in_input_buffer>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	91 11       	cpse	r25, r1
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <serial_input_available+0xc>
     db2:	80 e0       	ldi	r24, 0x00	; 0
}
     db4:	08 95       	ret

00000db6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     db6:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <input_insert_pos>
	bytes_in_input_buffer = 0;
     dba:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <bytes_in_input_buffer>
     dbe:	08 95       	ret

00000dc0 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     dd4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <bytes_in_out_buffer>
     dd8:	88 23       	and	r24, r24
     dda:	29 f1       	breq	.+74     	; 0xe26 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     ddc:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <out_insert_pos>
     de0:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <bytes_in_out_buffer>
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	82 1b       	sub	r24, r18
     de8:	91 09       	sbc	r25, r1
     dea:	5a f4       	brpl	.+22     	; 0xe02 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     dec:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <out_insert_pos>
     df0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	e8 1b       	sub	r30, r24
     df8:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     dfa:	ee 58       	subi	r30, 0x8E	; 142
     dfc:	fd 4f       	sbci	r31, 0xFD	; 253
     dfe:	90 81       	ld	r25, Z
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     e02:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <out_insert_pos>
     e06:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <bytes_in_out_buffer>
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	e8 1b       	sub	r30, r24
     e0e:	f1 09       	sbc	r31, r1
     e10:	ed 58       	subi	r30, 0x8D	; 141
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     e16:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <bytes_in_out_buffer>
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     e20:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     e26:	e1 ec       	ldi	r30, 0xC1	; 193
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7d       	andi	r24, 0xDF	; 223
     e2e:	80 83       	st	Z, r24
	}
}
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	2f 91       	pop	r18
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	cf 93       	push	r28
     e64:	ef 93       	push	r30
     e66:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     e68:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     e6c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <do_echo>
     e70:	88 23       	and	r24, r24
     e72:	49 f0       	breq	.+18     	; 0xe86 <__vector_20+0x42>
     e74:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <bytes_in_out_buffer>
     e78:	8f 3f       	cpi	r24, 0xFF	; 255
     e7a:	29 f0       	breq	.+10     	; 0xe86 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	8c 2f       	mov	r24, r28
     e82:	0e 94 27 06 	call	0xc4e	; 0xc4e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     e86:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <bytes_in_input_buffer>
     e8a:	80 31       	cpi	r24, 0x10	; 16
     e8c:	20 f0       	brcs	.+8      	; 0xe96 <__vector_20+0x52>
		input_overrun = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <input_overrun>
     e94:	18 c0       	rjmp	.+48     	; 0xec6 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     e96:	cd 30       	cpi	r28, 0x0D	; 13
     e98:	09 f4       	brne	.+2      	; 0xe9c <__vector_20+0x58>
			c = '\n';
     e9a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     e9c:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <input_insert_pos>
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	8e 0f       	add	r24, r30
     ea4:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <input_insert_pos>
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	ed 58       	subi	r30, 0x8D	; 141
     eac:	fd 4f       	sbci	r31, 0xFD	; 253
     eae:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     eb0:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <bytes_in_input_buffer>
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     eba:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <input_insert_pos>
     ebe:	80 31       	cpi	r24, 0x10	; 16
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     ec2:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <input_insert_pos>
		}
	}
}
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	cf 91       	pop	r28
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <snakeLength>
	snakeTailIndex = 0;
     ef6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <snakeTailIndex>
	snakeHeadIndex = 1;
     efa:	c1 e0       	ldi	r28, 0x01	; 1
     efc:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 14 03 	call	0x628	; 0x628 <position>
     f08:	03 e4       	ldi	r16, 0x43	; 67
     f0a:	11 e0       	ldi	r17, 0x01	; 1
     f0c:	f8 01       	movw	r30, r16
     f0e:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	0e 94 14 03 	call	0x628	; 0x628 <position>
     f18:	f8 01       	movw	r30, r16
     f1a:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
     f1c:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
     f20:	c0 93 3e 01 	sts	0x013E, r28	; 0x80013e <nextSnakeDirn>
}
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
     f2c:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <snakeHeadIndex>
     f30:	0e 2e       	mov	r0, r30
     f32:	00 0c       	add	r0, r0
     f34:	ff 0b       	sbc	r31, r31
     f36:	ed 5b       	subi	r30, 0xBD	; 189
     f38:	fe 4f       	sbci	r31, 0xFE	; 254
}
     f3a:	80 81       	ld	r24, Z
     f3c:	08 95       	ret

00000f3e <get_snake_tail_position>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
     f3e:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <snakeTailIndex>
     f42:	0e 2e       	mov	r0, r30
     f44:	00 0c       	add	r0, r0
     f46:	ff 0b       	sbc	r31, r31
     f48:	ed 5b       	subi	r30, 0xBD	; 189
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
}
     f4c:	80 81       	ld	r24, Z
     f4e:	08 95       	ret

00000f50 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
     f50:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <snakeLength>
     f54:	08 95       	ret

00000f56 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
     f56:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <snakeTailIndex>
     f5a:	e9 2f       	mov	r30, r25
     f5c:	09 2e       	mov	r0, r25
     f5e:	00 0c       	add	r0, r0
     f60:	ff 0b       	sbc	r31, r31
     f62:	ed 5b       	subi	r30, 0xBD	; 189
     f64:	fe 4f       	sbci	r31, 0xFE	; 254
     f66:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
     f68:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
     f6a:	91 32       	cpi	r25, 0x21	; 33
     f6c:	19 f0       	breq	.+6      	; 0xf74 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
     f6e:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <snakeTailIndex>
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
     f74:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <snakeTailIndex>
	}
	snakeLength--;
     f78:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <snakeLength>
     f7c:	91 50       	subi	r25, 0x01	; 1
     f7e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <snakeLength>
	
	return prev_tail_position;
}
     f82:	08 95       	ret

00000f84 <set_snake_dirn>:
	** is not opposite to the current direction (stored in curSnakeDirn). 
	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	if ((curSnakeDirn == SNAKE_LEFT && dirn == SNAKE_RIGHT) || (curSnakeDirn == SNAKE_RIGHT && dirn == SNAKE_LEFT) ||
     f84:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <curSnakeDirn>
     f88:	93 30       	cpi	r25, 0x03	; 3
     f8a:	19 f4       	brne	.+6      	; 0xf92 <set_snake_dirn+0xe>
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	71 f4       	brne	.+28     	; 0xfac <set_snake_dirn+0x28>
     f90:	08 95       	ret
     f92:	91 30       	cpi	r25, 0x01	; 1
     f94:	19 f4       	brne	.+6      	; 0xf9c <set_snake_dirn+0x18>
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	49 f4       	brne	.+18     	; 0xfac <set_snake_dirn+0x28>
     f9a:	08 95       	ret
     f9c:	91 11       	cpse	r25, r1
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <set_snake_dirn+0x22>
		(curSnakeDirn == SNAKE_UP && dirn == SNAKE_DOWN) || (curSnakeDirn == SNAKE_DOWN && dirn == SNAKE_UP)) {
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	21 f4       	brne	.+8      	; 0xfac <set_snake_dirn+0x28>
     fa4:	08 95       	ret
     fa6:	92 30       	cpi	r25, 0x02	; 2
     fa8:	09 f4       	brne	.+2      	; 0xfac <set_snake_dirn+0x28>
     faa:	81 11       	cpse	r24, r1
			return;	
		}
    
    nextSnakeDirn = dirn;
     fac:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <nextSnakeDirn>
     fb0:	08 95       	ret

00000fb2 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
     fb2:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <snakeTailIndex>
	while(index != snakeHeadIndex) {
     fb6:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
     fba:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     fbc:	0d c0       	rjmp	.+26     	; 0xfd8 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
     fbe:	e9 2f       	mov	r30, r25
     fc0:	09 2e       	mov	r0, r25
     fc2:	00 0c       	add	r0, r0
     fc4:	ff 0b       	sbc	r31, r31
     fc6:	ed 5b       	subi	r30, 0xBD	; 189
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	20 81       	ld	r18, Z
     fcc:	28 17       	cp	r18, r24
     fce:	89 f0       	breq	.+34     	; 0xff2 <is_snake_at+0x40>
     fd0:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
     fd2:	91 32       	cpi	r25, 0x21	; 33
     fd4:	0c f0       	brlt	.+2      	; 0xfd8 <is_snake_at+0x26>
			index = 0;
     fd6:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     fd8:	93 13       	cpse	r25, r19
     fda:	f1 cf       	rjmp	.-30     	; 0xfbe <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
     fdc:	e3 2f       	mov	r30, r19
     fde:	33 0f       	add	r19, r19
     fe0:	ff 0b       	sbc	r31, r31
     fe2:	ed 5b       	subi	r30, 0xBD	; 189
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	20 81       	ld	r18, Z
     fea:	28 17       	cp	r18, r24
     fec:	19 f0       	breq	.+6      	; 0xff4 <is_snake_at+0x42>
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <is_snake_at+0x42>
     ff2:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
     ff4:	89 2f       	mov	r24, r25
     ff6:	08 95       	ret

00000ff8 <advance_snake_head>:
** - ATE_FOOD if there was food at the new head position and the snake can grow
** - ATE_FOOD_BUT_CANT_GROW if there was food at the new head position but the
**   snake can't grow.
** (Only the last three of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
     ffc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <snakeLength>
    1000:	81 32       	cpi	r24, 0x21	; 33
    1002:	08 f0       	brcs	.+2      	; 0x1006 <advance_snake_head+0xe>
    1004:	7c c0       	rjmp	.+248    	; 0x10fe <advance_snake_head+0x106>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1006:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <snakeHeadIndex>
    100a:	0e 2e       	mov	r0, r30
    100c:	00 0c       	add	r0, r0
    100e:	ff 0b       	sbc	r31, r31
    1010:	ed 5b       	subi	r30, 0xBD	; 189
    1012:	fe 4f       	sbci	r31, 0xFE	; 254
    1014:	80 81       	ld	r24, Z
    1016:	0e 94 09 03 	call	0x612	; 0x612 <x_position>
    101a:	d8 2f       	mov	r29, r24
    101c:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    101e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <snakeHeadIndex>
    1022:	0e 2e       	mov	r0, r30
    1024:	00 0c       	add	r0, r0
    1026:	ff 0b       	sbc	r31, r31
    1028:	ed 5b       	subi	r30, 0xBD	; 189
    102a:	fe 4f       	sbci	r31, 0xFE	; 254
    102c:	80 81       	ld	r24, Z
    102e:	0e 94 0c 03 	call	0x618	; 0x618 <y_position>
    1032:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    1034:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <nextSnakeDirn>
    1038:	91 30       	cpi	r25, 0x01	; 1
    103a:	59 f0       	breq	.+22     	; 0x1052 <advance_snake_head+0x5a>
    103c:	28 f0       	brcs	.+10     	; 0x1048 <advance_snake_head+0x50>
    103e:	92 30       	cpi	r25, 0x02	; 2
    1040:	69 f0       	breq	.+26     	; 0x105c <advance_snake_head+0x64>
    1042:	93 30       	cpi	r25, 0x03	; 3
    1044:	81 f0       	breq	.+32     	; 0x1066 <advance_snake_head+0x6e>
    1046:	1b c0       	rjmp	.+54     	; 0x107e <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    1048:	87 30       	cpi	r24, 0x07	; 7
    104a:	91 f0       	breq	.+36     	; 0x1070 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	68 0f       	add	r22, r24
    1050:	16 c0       	rjmp	.+44     	; 0x107e <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    1052:	df 30       	cpi	r29, 0x0F	; 15
    1054:	79 f0       	breq	.+30     	; 0x1074 <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    1056:	c1 e0       	ldi	r28, 0x01	; 1
    1058:	cd 0f       	add	r28, r29
    105a:	11 c0       	rjmp	.+34     	; 0x107e <advance_snake_head+0x86>
			}
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
    105c:	88 23       	and	r24, r24
    105e:	61 f0       	breq	.+24     	; 0x1078 <advance_snake_head+0x80>
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
			} else {
			headY -= 1;
    1060:	6f ef       	ldi	r22, 0xFF	; 255
    1062:	68 0f       	add	r22, r24
    1064:	0c c0       	rjmp	.+24     	; 0x107e <advance_snake_head+0x86>
			}
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
    1066:	dd 23       	and	r29, r29
    1068:	49 f0       	breq	.+18     	; 0x107c <advance_snake_head+0x84>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
			} else {
				headX -= 1;
    106a:	cf ef       	ldi	r28, 0xFF	; 255
    106c:	cd 0f       	add	r28, r29
    106e:	07 c0       	rjmp	.+14     	; 0x107e <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	05 c0       	rjmp	.+10     	; 0x107e <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1074:	c0 e0       	ldi	r28, 0x00	; 0
    1076:	03 c0       	rjmp	.+6      	; 0x107e <advance_snake_head+0x86>
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
    1078:	67 e0       	ldi	r22, 0x07	; 7
    107a:	01 c0       	rjmp	.+2      	; 0x107e <advance_snake_head+0x86>
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
    107c:	cf e0       	ldi	r28, 0x0F	; 15
				headX -= 1;
			}
			break;
    }

	newHeadPosn = position(headX, headY);
    107e:	8c 2f       	mov	r24, r28
    1080:	0e 94 14 03 	call	0x628	; 0x628 <position>
    1084:	c8 2f       	mov	r28, r24

	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1086:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <nextSnakeDirn>
    108a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <curSnakeDirn>
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
    108e:	8c 2f       	mov	r24, r28
    1090:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <is_snake_at>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	51 f4       	brne	.+20     	; 0x10ac <advance_snake_head+0xb4>
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1098:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <snakeHeadIndex>
    109c:	0e 2e       	mov	r0, r30
    109e:	00 0c       	add	r0, r0
    10a0:	ff 0b       	sbc	r31, r31
    10a2:	ed 5b       	subi	r30, 0xBD	; 189
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
    10a6:	80 81       	ld	r24, Z
    10a8:	c8 13       	cpse	r28, r24
    10aa:	2b c0       	rjmp	.+86     	; 0x1102 <advance_snake_head+0x10a>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	add_to_score(1);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 23 05 	call	0xa46	; 0xa46 <add_to_score>

	set_display_attribute(TERM_RESET);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <set_display_attribute>
	snakeHeadIndex++;
    10ba:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <snakeHeadIndex>
    10be:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    10c0:	81 32       	cpi	r24, 0x21	; 33
    10c2:	19 f0       	breq	.+6      	; 0x10ca <advance_snake_head+0xd2>
	** or not. Update the length.
    */
	add_to_score(1);

	set_display_attribute(TERM_RESET);
	snakeHeadIndex++;
    10c4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <snakeHeadIndex>
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <advance_snake_head+0xd6>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    10ca:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    10ce:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <snakeHeadIndex>
    10d2:	0e 2e       	mov	r0, r30
    10d4:	00 0c       	add	r0, r0
    10d6:	ff 0b       	sbc	r31, r31
    10d8:	ed 5b       	subi	r30, 0xBD	; 189
    10da:	fe 4f       	sbci	r31, 0xFE	; 254
    10dc:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    10de:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <snakeLength>
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
    10e8:	8c 2f       	mov	r24, r28
    10ea:	0e 94 ba 01 	call	0x374	; 0x374 <is_food_at>
    10ee:	88 23       	and	r24, r24
    10f0:	51 f0       	breq	.+20     	; 0x1106 <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    10f2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <snakeLength>
    10f6:	81 32       	cpi	r24, 0x21	; 33
    10f8:	40 f0       	brcs	.+16     	; 0x110a <advance_snake_head+0x112>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <advance_snake_head+0x114>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    10fe:	8d ef       	ldi	r24, 0xFD	; 253
    1100:	05 c0       	rjmp	.+10     	; 0x110c <advance_snake_head+0x114>
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
		return COLLISION;
    1102:	8e ef       	ldi	r24, 0xFE	; 254
    1104:	03 c0       	rjmp	.+6      	; 0x110c <advance_snake_head+0x114>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	01 c0       	rjmp	.+2      	; 0x110c <advance_snake_head+0x114>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    110a:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1112:	94 b1       	in	r25, 0x04	; 4
    1114:	90 6b       	ori	r25, 0xB0	; 176
    1116:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1118:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    111a:	90 e5       	ldi	r25, 0x50	; 80
    111c:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    111e:	88 30       	cpi	r24, 0x08	; 8
    1120:	21 f0       	breq	.+8      	; 0x112a <spi_setup_master+0x18>
    1122:	80 32       	cpi	r24, 0x20	; 32
    1124:	11 f0       	breq	.+4      	; 0x112a <spi_setup_master+0x18>
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	19 f4       	brne	.+6      	; 0x1130 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	9d bd       	out	0x2d, r25	; 45
			break;
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1130:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1132:	80 32       	cpi	r24, 0x20	; 32
    1134:	69 f0       	breq	.+26     	; 0x1150 <spi_setup_master+0x3e>
    1136:	28 f4       	brcc	.+10     	; 0x1142 <spi_setup_master+0x30>
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	71 f0       	breq	.+28     	; 0x1158 <spi_setup_master+0x46>
    113c:	80 31       	cpi	r24, 0x10	; 16
    113e:	61 f0       	breq	.+24     	; 0x1158 <spi_setup_master+0x46>
    1140:	0e c0       	rjmp	.+28     	; 0x115e <spi_setup_master+0x4c>
    1142:	80 34       	cpi	r24, 0x40	; 64
    1144:	29 f0       	breq	.+10     	; 0x1150 <spi_setup_master+0x3e>
    1146:	80 38       	cpi	r24, 0x80	; 128
    1148:	51 f4       	brne	.+20     	; 0x115e <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    114a:	8c b5       	in	r24, 0x2c	; 44
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1150:	8c b5       	in	r24, 0x2c	; 44
    1152:	82 60       	ori	r24, 0x02	; 2
    1154:	8c bd       	out	0x2c, r24	; 44
			break;
    1156:	03 c0       	rjmp	.+6      	; 0x115e <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1158:	8c b5       	in	r24, 0x2c	; 44
    115a:	81 60       	ori	r24, 0x01	; 1
    115c:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    115e:	2c 98       	cbi	0x05, 4	; 5
    1160:	08 95       	ret

00001162 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    1162:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1164:	0d b4       	in	r0, 0x2d	; 45
    1166:	07 fe       	sbrs	r0, 7
    1168:	fd cf       	rjmp	.-6      	; 0x1164 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    116a:	8e b5       	in	r24, 0x2e	; 46
    116c:	08 95       	ret

0000116e <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    116e:	28 2f       	mov	r18, r24
    1170:	08 2e       	mov	r0, r24
    1172:	00 0c       	add	r0, r0
    1174:	33 0b       	sbc	r19, r19
    1176:	3f 93       	push	r19
    1178:	8f 93       	push	r24
    117a:	86 2f       	mov	r24, r22
    117c:	06 2e       	mov	r0, r22
    117e:	00 0c       	add	r0, r0
    1180:	99 0b       	sbc	r25, r25
    1182:	9f 93       	push	r25
    1184:	6f 93       	push	r22
    1186:	83 ed       	ldi	r24, 0xD3	; 211
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	9f 93       	push	r25
    118c:	8f 93       	push	r24
    118e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	08 95       	ret

000011a0 <clear_terminal>:
    11a0:	8e ec       	ldi	r24, 0xCE	; 206
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	9f 93       	push	r25
    11a6:	8f 93       	push	r24
    11a8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	08 95       	ret

000011b2 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    11b2:	1f 92       	push	r1
    11b4:	8f 93       	push	r24
    11b6:	88 ec       	ldi	r24, 0xC8	; 200
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	9f 93       	push	r25
    11bc:	8f 93       	push	r24
    11be:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	08 95       	ret

000011cc <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    11cc:	81 ec       	ldi	r24, 0xC1	; 193
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	9f 93       	push	r25
    11d2:	8f 93       	push	r24
    11d4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <printf_P>
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	08 95       	ret

000011de <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    11de:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <clock_ticks>
    11e2:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <clock_ticks+0x1>
    11e6:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <clock_ticks+0x2>
    11ea:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    11ee:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    11f0:	8c e7       	ldi	r24, 0x7C	; 124
    11f2:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    11fc:	ee e6       	ldi	r30, 0x6E	; 110
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	82 60       	ori	r24, 0x02	; 2
    1204:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1206:	85 b3       	in	r24, 0x15	; 21
    1208:	82 70       	andi	r24, 0x02	; 2
    120a:	85 bb       	out	0x15, r24	; 21
    120c:	08 95       	ret

0000120e <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    120e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1210:	f8 94       	cli
	return_value = clock_ticks;
    1212:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <clock_ticks>
    1216:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <clock_ticks+0x1>
    121a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <clock_ticks+0x2>
    121e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <clock_ticks+0x3>
	if(interrupts_were_on) {
    1222:	22 23       	and	r18, r18
    1224:	0c f4       	brge	.+2      	; 0x1228 <get_clock_ticks+0x1a>
		sei();
    1226:	78 94       	sei
	}
	return return_value;
}
    1228:	08 95       	ret

0000122a <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
    123c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <clock_ticks>
    1240:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <clock_ticks+0x1>
    1244:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <clock_ticks+0x2>
    1248:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <clock_ticks+0x3>
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	a1 1d       	adc	r26, r1
    1250:	b1 1d       	adc	r27, r1
    1252:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <clock_ticks>
    1256:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <clock_ticks+0x1>
    125a:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <clock_ticks+0x2>
    125e:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <clock_ticks+0x3>
}
    1262:	bf 91       	pop	r27
    1264:	af 91       	pop	r26
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <__udivmodsi4>:
    1274:	a1 e2       	ldi	r26, 0x21	; 33
    1276:	1a 2e       	mov	r1, r26
    1278:	aa 1b       	sub	r26, r26
    127a:	bb 1b       	sub	r27, r27
    127c:	fd 01       	movw	r30, r26
    127e:	0d c0       	rjmp	.+26     	; 0x129a <__udivmodsi4_ep>

00001280 <__udivmodsi4_loop>:
    1280:	aa 1f       	adc	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	ee 1f       	adc	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	a2 17       	cp	r26, r18
    128a:	b3 07       	cpc	r27, r19
    128c:	e4 07       	cpc	r30, r20
    128e:	f5 07       	cpc	r31, r21
    1290:	20 f0       	brcs	.+8      	; 0x129a <__udivmodsi4_ep>
    1292:	a2 1b       	sub	r26, r18
    1294:	b3 0b       	sbc	r27, r19
    1296:	e4 0b       	sbc	r30, r20
    1298:	f5 0b       	sbc	r31, r21

0000129a <__udivmodsi4_ep>:
    129a:	66 1f       	adc	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	1a 94       	dec	r1
    12a4:	69 f7       	brne	.-38     	; 0x1280 <__udivmodsi4_loop>
    12a6:	60 95       	com	r22
    12a8:	70 95       	com	r23
    12aa:	80 95       	com	r24
    12ac:	90 95       	com	r25
    12ae:	9b 01       	movw	r18, r22
    12b0:	ac 01       	movw	r20, r24
    12b2:	bd 01       	movw	r22, r26
    12b4:	cf 01       	movw	r24, r30
    12b6:	08 95       	ret

000012b8 <__divmodsi4>:
    12b8:	05 2e       	mov	r0, r21
    12ba:	97 fb       	bst	r25, 7
    12bc:	1e f4       	brtc	.+6      	; 0x12c4 <__divmodsi4+0xc>
    12be:	00 94       	com	r0
    12c0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__negsi2>
    12c4:	57 fd       	sbrc	r21, 7
    12c6:	07 d0       	rcall	.+14     	; 0x12d6 <__divmodsi4_neg2>
    12c8:	0e 94 3a 09 	call	0x1274	; 0x1274 <__udivmodsi4>
    12cc:	07 fc       	sbrc	r0, 7
    12ce:	03 d0       	rcall	.+6      	; 0x12d6 <__divmodsi4_neg2>
    12d0:	4e f4       	brtc	.+18     	; 0x12e4 <__divmodsi4_exit>
    12d2:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__negsi2>

000012d6 <__divmodsi4_neg2>:
    12d6:	50 95       	com	r21
    12d8:	40 95       	com	r20
    12da:	30 95       	com	r19
    12dc:	21 95       	neg	r18
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	4f 4f       	sbci	r20, 0xFF	; 255
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255

000012e4 <__divmodsi4_exit>:
    12e4:	08 95       	ret

000012e6 <__negsi2>:
    12e6:	90 95       	com	r25
    12e8:	80 95       	com	r24
    12ea:	70 95       	com	r23
    12ec:	61 95       	neg	r22
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	8f 4f       	sbci	r24, 0xFF	; 255
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	08 95       	ret

000012f6 <random_r>:
    12f6:	8f 92       	push	r8
    12f8:	9f 92       	push	r9
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
    130c:	68 81       	ld	r22, Y
    130e:	79 81       	ldd	r23, Y+1	; 0x01
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	61 15       	cp	r22, r1
    1316:	71 05       	cpc	r23, r1
    1318:	81 05       	cpc	r24, r1
    131a:	91 05       	cpc	r25, r1
    131c:	21 f4       	brne	.+8      	; 0x1326 <random_r+0x30>
    131e:	64 e2       	ldi	r22, 0x24	; 36
    1320:	79 ed       	ldi	r23, 0xD9	; 217
    1322:	8b e5       	ldi	r24, 0x5B	; 91
    1324:	97 e0       	ldi	r25, 0x07	; 7
    1326:	2d e1       	ldi	r18, 0x1D	; 29
    1328:	33 ef       	ldi	r19, 0xF3	; 243
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__divmodsi4>
    1332:	49 01       	movw	r8, r18
    1334:	5a 01       	movw	r10, r20
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	a7 ea       	ldi	r26, 0xA7	; 167
    133c:	b1 e4       	ldi	r27, 0x41	; 65
    133e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__muluhisi3>
    1342:	6b 01       	movw	r12, r22
    1344:	7c 01       	movw	r14, r24
    1346:	ac ee       	ldi	r26, 0xEC	; 236
    1348:	b4 ef       	ldi	r27, 0xF4	; 244
    134a:	a5 01       	movw	r20, r10
    134c:	94 01       	movw	r18, r8
    134e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__mulohisi3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	8c 0d       	add	r24, r12
    1358:	9d 1d       	adc	r25, r13
    135a:	ae 1d       	adc	r26, r14
    135c:	bf 1d       	adc	r27, r15
    135e:	b7 ff       	sbrs	r27, 7
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <random_r+0x72>
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	a1 09       	sbc	r26, r1
    1366:	b0 48       	sbci	r27, 0x80	; 128
    1368:	88 83       	st	Y, r24
    136a:	99 83       	std	Y+1, r25	; 0x01
    136c:	aa 83       	std	Y+2, r26	; 0x02
    136e:	bb 83       	std	Y+3, r27	; 0x03
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	9f 77       	andi	r25, 0x7F	; 127
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	08 95       	ret

0000138c <random>:
    138c:	8f 92       	push	r8
    138e:	9f 92       	push	r9
    1390:	af 92       	push	r10
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    13a0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    13a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    13a8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    13ac:	61 15       	cp	r22, r1
    13ae:	71 05       	cpc	r23, r1
    13b0:	81 05       	cpc	r24, r1
    13b2:	91 05       	cpc	r25, r1
    13b4:	21 f4       	brne	.+8      	; 0x13be <random+0x32>
    13b6:	64 e2       	ldi	r22, 0x24	; 36
    13b8:	79 ed       	ldi	r23, 0xD9	; 217
    13ba:	8b e5       	ldi	r24, 0x5B	; 91
    13bc:	97 e0       	ldi	r25, 0x07	; 7
    13be:	2d e1       	ldi	r18, 0x1D	; 29
    13c0:	33 ef       	ldi	r19, 0xF3	; 243
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__divmodsi4>
    13ca:	49 01       	movw	r8, r18
    13cc:	5a 01       	movw	r10, r20
    13ce:	9b 01       	movw	r18, r22
    13d0:	ac 01       	movw	r20, r24
    13d2:	a7 ea       	ldi	r26, 0xA7	; 167
    13d4:	b1 e4       	ldi	r27, 0x41	; 65
    13d6:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__muluhisi3>
    13da:	6b 01       	movw	r12, r22
    13dc:	7c 01       	movw	r14, r24
    13de:	ac ee       	ldi	r26, 0xEC	; 236
    13e0:	b4 ef       	ldi	r27, 0xF4	; 244
    13e2:	a5 01       	movw	r20, r10
    13e4:	94 01       	movw	r18, r8
    13e6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__mulohisi3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8c 0d       	add	r24, r12
    13f0:	9d 1d       	adc	r25, r13
    13f2:	ae 1d       	adc	r26, r14
    13f4:	bf 1d       	adc	r27, r15
    13f6:	b7 ff       	sbrs	r27, 7
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <random+0x74>
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	a1 09       	sbc	r26, r1
    13fe:	b0 48       	sbci	r27, 0x80	; 128
    1400:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1404:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1408:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    140c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	9f 77       	andi	r25, 0x7F	; 127
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	df 90       	pop	r13
    141c:	cf 90       	pop	r12
    141e:	bf 90       	pop	r11
    1420:	af 90       	pop	r10
    1422:	9f 90       	pop	r9
    1424:	8f 90       	pop	r8
    1426:	08 95       	ret

00001428 <srandom>:
    1428:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    142c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1430:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1434:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1438:	08 95       	ret

0000143a <fgetc>:
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	20 ff       	sbrs	r18, 0
    1444:	33 c0       	rjmp	.+102    	; 0x14ac <fgetc+0x72>
    1446:	26 ff       	sbrs	r18, 6
    1448:	0a c0       	rjmp	.+20     	; 0x145e <fgetc+0x24>
    144a:	2f 7b       	andi	r18, 0xBF	; 191
    144c:	2b 83       	std	Y+3, r18	; 0x03
    144e:	8e 81       	ldd	r24, Y+6	; 0x06
    1450:	9f 81       	ldd	r25, Y+7	; 0x07
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	9f 83       	std	Y+7, r25	; 0x07
    1456:	8e 83       	std	Y+6, r24	; 0x06
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	29 c0       	rjmp	.+82     	; 0x14b0 <fgetc+0x76>
    145e:	22 ff       	sbrs	r18, 2
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <fgetc+0x46>
    1462:	e8 81       	ld	r30, Y
    1464:	f9 81       	ldd	r31, Y+1	; 0x01
    1466:	80 81       	ld	r24, Z
    1468:	08 2e       	mov	r0, r24
    146a:	00 0c       	add	r0, r0
    146c:	99 0b       	sbc	r25, r25
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	19 f4       	brne	.+6      	; 0x1478 <fgetc+0x3e>
    1472:	20 62       	ori	r18, 0x20	; 32
    1474:	2b 83       	std	Y+3, r18	; 0x03
    1476:	1a c0       	rjmp	.+52     	; 0x14ac <fgetc+0x72>
    1478:	31 96       	adiw	r30, 0x01	; 1
    147a:	f9 83       	std	Y+1, r31	; 0x01
    147c:	e8 83       	st	Y, r30
    147e:	0e c0       	rjmp	.+28     	; 0x149c <fgetc+0x62>
    1480:	ea 85       	ldd	r30, Y+10	; 0x0a
    1482:	fb 85       	ldd	r31, Y+11	; 0x0b
    1484:	09 95       	icall
    1486:	97 ff       	sbrs	r25, 7
    1488:	09 c0       	rjmp	.+18     	; 0x149c <fgetc+0x62>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	11 f0       	breq	.+4      	; 0x1494 <fgetc+0x5a>
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <fgetc+0x5c>
    1494:	80 e1       	ldi	r24, 0x10	; 16
    1496:	82 2b       	or	r24, r18
    1498:	8b 83       	std	Y+3, r24	; 0x03
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <fgetc+0x72>
    149c:	2e 81       	ldd	r18, Y+6	; 0x06
    149e:	3f 81       	ldd	r19, Y+7	; 0x07
    14a0:	2f 5f       	subi	r18, 0xFF	; 255
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
    14a4:	3f 83       	std	Y+7, r19	; 0x07
    14a6:	2e 83       	std	Y+6, r18	; 0x06
    14a8:	99 27       	eor	r25, r25
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <fgetc+0x76>
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <printf_P>:
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e6       	ldi	r30, 0x61	; 97
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__prologue_saves__+0x1c>
    14c2:	ae 01       	movw	r20, r28
    14c4:	49 5f       	subi	r20, 0xF9	; 249
    14c6:	5f 4f       	sbci	r21, 0xFF	; 255
    14c8:	da 01       	movw	r26, r20
    14ca:	6d 91       	ld	r22, X+
    14cc:	7d 91       	ld	r23, X+
    14ce:	ad 01       	movw	r20, r26
    14d0:	05 e8       	ldi	r16, 0x85	; 133
    14d2:	12 e0       	ldi	r17, 0x02	; 2
    14d4:	f8 01       	movw	r30, r16
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	dc 01       	movw	r26, r24
    14dc:	13 96       	adiw	r26, 0x03	; 3
    14de:	2c 91       	ld	r18, X
    14e0:	13 97       	sbiw	r26, 0x03	; 3
    14e2:	28 60       	ori	r18, 0x08	; 8
    14e4:	13 96       	adiw	r26, 0x03	; 3
    14e6:	2c 93       	st	X, r18
    14e8:	0e 94 81 0a 	call	0x1502	; 0x1502 <vfprintf>
    14ec:	d8 01       	movw	r26, r16
    14ee:	12 96       	adiw	r26, 0x02	; 2
    14f0:	ed 91       	ld	r30, X+
    14f2:	fc 91       	ld	r31, X
    14f4:	13 97       	sbiw	r26, 0x03	; 3
    14f6:	23 81       	ldd	r18, Z+3	; 0x03
    14f8:	27 7f       	andi	r18, 0xF7	; 247
    14fa:	23 83       	std	Z+3, r18	; 0x03
    14fc:	e4 e0       	ldi	r30, 0x04	; 4
    14fe:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__epilogue_restores__+0x1c>

00001502 <vfprintf>:
    1502:	ab e0       	ldi	r26, 0x0B	; 11
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e8       	ldi	r30, 0x87	; 135
    1508:	fa e0       	ldi	r31, 0x0A	; 10
    150a:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__prologue_saves__>
    150e:	6c 01       	movw	r12, r24
    1510:	7b 01       	movw	r14, r22
    1512:	8a 01       	movw	r16, r20
    1514:	fc 01       	movw	r30, r24
    1516:	17 82       	std	Z+7, r1	; 0x07
    1518:	16 82       	std	Z+6, r1	; 0x06
    151a:	83 81       	ldd	r24, Z+3	; 0x03
    151c:	81 ff       	sbrs	r24, 1
    151e:	cc c1       	rjmp	.+920    	; 0x18b8 <vfprintf+0x3b6>
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	3c 01       	movw	r6, r24
    1526:	f6 01       	movw	r30, r12
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	f7 01       	movw	r30, r14
    152c:	93 fd       	sbrc	r25, 3
    152e:	85 91       	lpm	r24, Z+
    1530:	93 ff       	sbrs	r25, 3
    1532:	81 91       	ld	r24, Z+
    1534:	7f 01       	movw	r14, r30
    1536:	88 23       	and	r24, r24
    1538:	09 f4       	brne	.+2      	; 0x153c <vfprintf+0x3a>
    153a:	ba c1       	rjmp	.+884    	; 0x18b0 <vfprintf+0x3ae>
    153c:	85 32       	cpi	r24, 0x25	; 37
    153e:	39 f4       	brne	.+14     	; 0x154e <vfprintf+0x4c>
    1540:	93 fd       	sbrc	r25, 3
    1542:	85 91       	lpm	r24, Z+
    1544:	93 ff       	sbrs	r25, 3
    1546:	81 91       	ld	r24, Z+
    1548:	7f 01       	movw	r14, r30
    154a:	85 32       	cpi	r24, 0x25	; 37
    154c:	29 f4       	brne	.+10     	; 0x1558 <vfprintf+0x56>
    154e:	b6 01       	movw	r22, r12
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    1556:	e7 cf       	rjmp	.-50     	; 0x1526 <vfprintf+0x24>
    1558:	91 2c       	mov	r9, r1
    155a:	21 2c       	mov	r2, r1
    155c:	31 2c       	mov	r3, r1
    155e:	ff e1       	ldi	r31, 0x1F	; 31
    1560:	f3 15       	cp	r31, r3
    1562:	d8 f0       	brcs	.+54     	; 0x159a <vfprintf+0x98>
    1564:	8b 32       	cpi	r24, 0x2B	; 43
    1566:	79 f0       	breq	.+30     	; 0x1586 <vfprintf+0x84>
    1568:	38 f4       	brcc	.+14     	; 0x1578 <vfprintf+0x76>
    156a:	80 32       	cpi	r24, 0x20	; 32
    156c:	79 f0       	breq	.+30     	; 0x158c <vfprintf+0x8a>
    156e:	83 32       	cpi	r24, 0x23	; 35
    1570:	a1 f4       	brne	.+40     	; 0x159a <vfprintf+0x98>
    1572:	23 2d       	mov	r18, r3
    1574:	20 61       	ori	r18, 0x10	; 16
    1576:	1d c0       	rjmp	.+58     	; 0x15b2 <vfprintf+0xb0>
    1578:	8d 32       	cpi	r24, 0x2D	; 45
    157a:	61 f0       	breq	.+24     	; 0x1594 <vfprintf+0x92>
    157c:	80 33       	cpi	r24, 0x30	; 48
    157e:	69 f4       	brne	.+26     	; 0x159a <vfprintf+0x98>
    1580:	23 2d       	mov	r18, r3
    1582:	21 60       	ori	r18, 0x01	; 1
    1584:	16 c0       	rjmp	.+44     	; 0x15b2 <vfprintf+0xb0>
    1586:	83 2d       	mov	r24, r3
    1588:	82 60       	ori	r24, 0x02	; 2
    158a:	38 2e       	mov	r3, r24
    158c:	e3 2d       	mov	r30, r3
    158e:	e4 60       	ori	r30, 0x04	; 4
    1590:	3e 2e       	mov	r3, r30
    1592:	2a c0       	rjmp	.+84     	; 0x15e8 <vfprintf+0xe6>
    1594:	f3 2d       	mov	r31, r3
    1596:	f8 60       	ori	r31, 0x08	; 8
    1598:	1d c0       	rjmp	.+58     	; 0x15d4 <vfprintf+0xd2>
    159a:	37 fc       	sbrc	r3, 7
    159c:	2d c0       	rjmp	.+90     	; 0x15f8 <vfprintf+0xf6>
    159e:	20 ed       	ldi	r18, 0xD0	; 208
    15a0:	28 0f       	add	r18, r24
    15a2:	2a 30       	cpi	r18, 0x0A	; 10
    15a4:	40 f0       	brcs	.+16     	; 0x15b6 <vfprintf+0xb4>
    15a6:	8e 32       	cpi	r24, 0x2E	; 46
    15a8:	b9 f4       	brne	.+46     	; 0x15d8 <vfprintf+0xd6>
    15aa:	36 fc       	sbrc	r3, 6
    15ac:	81 c1       	rjmp	.+770    	; 0x18b0 <vfprintf+0x3ae>
    15ae:	23 2d       	mov	r18, r3
    15b0:	20 64       	ori	r18, 0x40	; 64
    15b2:	32 2e       	mov	r3, r18
    15b4:	19 c0       	rjmp	.+50     	; 0x15e8 <vfprintf+0xe6>
    15b6:	36 fe       	sbrs	r3, 6
    15b8:	06 c0       	rjmp	.+12     	; 0x15c6 <vfprintf+0xc4>
    15ba:	8a e0       	ldi	r24, 0x0A	; 10
    15bc:	98 9e       	mul	r9, r24
    15be:	20 0d       	add	r18, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	92 2e       	mov	r9, r18
    15c4:	11 c0       	rjmp	.+34     	; 0x15e8 <vfprintf+0xe6>
    15c6:	ea e0       	ldi	r30, 0x0A	; 10
    15c8:	2e 9e       	mul	r2, r30
    15ca:	20 0d       	add	r18, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	22 2e       	mov	r2, r18
    15d0:	f3 2d       	mov	r31, r3
    15d2:	f0 62       	ori	r31, 0x20	; 32
    15d4:	3f 2e       	mov	r3, r31
    15d6:	08 c0       	rjmp	.+16     	; 0x15e8 <vfprintf+0xe6>
    15d8:	8c 36       	cpi	r24, 0x6C	; 108
    15da:	21 f4       	brne	.+8      	; 0x15e4 <vfprintf+0xe2>
    15dc:	83 2d       	mov	r24, r3
    15de:	80 68       	ori	r24, 0x80	; 128
    15e0:	38 2e       	mov	r3, r24
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <vfprintf+0xe6>
    15e4:	88 36       	cpi	r24, 0x68	; 104
    15e6:	41 f4       	brne	.+16     	; 0x15f8 <vfprintf+0xf6>
    15e8:	f7 01       	movw	r30, r14
    15ea:	93 fd       	sbrc	r25, 3
    15ec:	85 91       	lpm	r24, Z+
    15ee:	93 ff       	sbrs	r25, 3
    15f0:	81 91       	ld	r24, Z+
    15f2:	7f 01       	movw	r14, r30
    15f4:	81 11       	cpse	r24, r1
    15f6:	b3 cf       	rjmp	.-154    	; 0x155e <vfprintf+0x5c>
    15f8:	98 2f       	mov	r25, r24
    15fa:	9f 7d       	andi	r25, 0xDF	; 223
    15fc:	95 54       	subi	r25, 0x45	; 69
    15fe:	93 30       	cpi	r25, 0x03	; 3
    1600:	28 f4       	brcc	.+10     	; 0x160c <vfprintf+0x10a>
    1602:	0c 5f       	subi	r16, 0xFC	; 252
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	9f e3       	ldi	r25, 0x3F	; 63
    1608:	99 83       	std	Y+1, r25	; 0x01
    160a:	0d c0       	rjmp	.+26     	; 0x1626 <vfprintf+0x124>
    160c:	83 36       	cpi	r24, 0x63	; 99
    160e:	31 f0       	breq	.+12     	; 0x161c <vfprintf+0x11a>
    1610:	83 37       	cpi	r24, 0x73	; 115
    1612:	71 f0       	breq	.+28     	; 0x1630 <vfprintf+0x12e>
    1614:	83 35       	cpi	r24, 0x53	; 83
    1616:	09 f0       	breq	.+2      	; 0x161a <vfprintf+0x118>
    1618:	59 c0       	rjmp	.+178    	; 0x16cc <vfprintf+0x1ca>
    161a:	21 c0       	rjmp	.+66     	; 0x165e <vfprintf+0x15c>
    161c:	f8 01       	movw	r30, r16
    161e:	80 81       	ld	r24, Z
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	0e 5f       	subi	r16, 0xFE	; 254
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	88 24       	eor	r8, r8
    1628:	83 94       	inc	r8
    162a:	91 2c       	mov	r9, r1
    162c:	53 01       	movw	r10, r6
    162e:	13 c0       	rjmp	.+38     	; 0x1656 <vfprintf+0x154>
    1630:	28 01       	movw	r4, r16
    1632:	f2 e0       	ldi	r31, 0x02	; 2
    1634:	4f 0e       	add	r4, r31
    1636:	51 1c       	adc	r5, r1
    1638:	f8 01       	movw	r30, r16
    163a:	a0 80       	ld	r10, Z
    163c:	b1 80       	ldd	r11, Z+1	; 0x01
    163e:	36 fe       	sbrs	r3, 6
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <vfprintf+0x146>
    1642:	69 2d       	mov	r22, r9
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0x14a>
    1648:	6f ef       	ldi	r22, 0xFF	; 255
    164a:	7f ef       	ldi	r23, 0xFF	; 255
    164c:	c5 01       	movw	r24, r10
    164e:	0e 94 6d 0c 	call	0x18da	; 0x18da <strnlen>
    1652:	4c 01       	movw	r8, r24
    1654:	82 01       	movw	r16, r4
    1656:	f3 2d       	mov	r31, r3
    1658:	ff 77       	andi	r31, 0x7F	; 127
    165a:	3f 2e       	mov	r3, r31
    165c:	16 c0       	rjmp	.+44     	; 0x168a <vfprintf+0x188>
    165e:	28 01       	movw	r4, r16
    1660:	22 e0       	ldi	r18, 0x02	; 2
    1662:	42 0e       	add	r4, r18
    1664:	51 1c       	adc	r5, r1
    1666:	f8 01       	movw	r30, r16
    1668:	a0 80       	ld	r10, Z
    166a:	b1 80       	ldd	r11, Z+1	; 0x01
    166c:	36 fe       	sbrs	r3, 6
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x174>
    1670:	69 2d       	mov	r22, r9
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x178>
    1676:	6f ef       	ldi	r22, 0xFF	; 255
    1678:	7f ef       	ldi	r23, 0xFF	; 255
    167a:	c5 01       	movw	r24, r10
    167c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <strnlen_P>
    1680:	4c 01       	movw	r8, r24
    1682:	f3 2d       	mov	r31, r3
    1684:	f0 68       	ori	r31, 0x80	; 128
    1686:	3f 2e       	mov	r3, r31
    1688:	82 01       	movw	r16, r4
    168a:	33 fc       	sbrc	r3, 3
    168c:	1b c0       	rjmp	.+54     	; 0x16c4 <vfprintf+0x1c2>
    168e:	82 2d       	mov	r24, r2
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	88 16       	cp	r8, r24
    1694:	99 06       	cpc	r9, r25
    1696:	b0 f4       	brcc	.+44     	; 0x16c4 <vfprintf+0x1c2>
    1698:	b6 01       	movw	r22, r12
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    16a2:	2a 94       	dec	r2
    16a4:	f4 cf       	rjmp	.-24     	; 0x168e <vfprintf+0x18c>
    16a6:	f5 01       	movw	r30, r10
    16a8:	37 fc       	sbrc	r3, 7
    16aa:	85 91       	lpm	r24, Z+
    16ac:	37 fe       	sbrs	r3, 7
    16ae:	81 91       	ld	r24, Z+
    16b0:	5f 01       	movw	r10, r30
    16b2:	b6 01       	movw	r22, r12
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    16ba:	21 10       	cpse	r2, r1
    16bc:	2a 94       	dec	r2
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	82 1a       	sub	r8, r18
    16c2:	91 08       	sbc	r9, r1
    16c4:	81 14       	cp	r8, r1
    16c6:	91 04       	cpc	r9, r1
    16c8:	71 f7       	brne	.-36     	; 0x16a6 <vfprintf+0x1a4>
    16ca:	e8 c0       	rjmp	.+464    	; 0x189c <vfprintf+0x39a>
    16cc:	84 36       	cpi	r24, 0x64	; 100
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <vfprintf+0x1d2>
    16d0:	89 36       	cpi	r24, 0x69	; 105
    16d2:	41 f5       	brne	.+80     	; 0x1724 <vfprintf+0x222>
    16d4:	f8 01       	movw	r30, r16
    16d6:	37 fe       	sbrs	r3, 7
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <vfprintf+0x1e6>
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	0c 5f       	subi	r16, 0xFC	; 252
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	08 c0       	rjmp	.+16     	; 0x16f8 <vfprintf+0x1f6>
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	07 2e       	mov	r0, r23
    16ee:	00 0c       	add	r0, r0
    16f0:	88 0b       	sbc	r24, r24
    16f2:	99 0b       	sbc	r25, r25
    16f4:	0e 5f       	subi	r16, 0xFE	; 254
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	f3 2d       	mov	r31, r3
    16fa:	ff 76       	andi	r31, 0x6F	; 111
    16fc:	3f 2e       	mov	r3, r31
    16fe:	97 ff       	sbrs	r25, 7
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x212>
    1702:	90 95       	com	r25
    1704:	80 95       	com	r24
    1706:	70 95       	com	r23
    1708:	61 95       	neg	r22
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	f0 68       	ori	r31, 0x80	; 128
    1712:	3f 2e       	mov	r3, r31
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	a3 01       	movw	r20, r6
    171a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__ultoa_invert>
    171e:	88 2e       	mov	r8, r24
    1720:	86 18       	sub	r8, r6
    1722:	45 c0       	rjmp	.+138    	; 0x17ae <vfprintf+0x2ac>
    1724:	85 37       	cpi	r24, 0x75	; 117
    1726:	31 f4       	brne	.+12     	; 0x1734 <vfprintf+0x232>
    1728:	23 2d       	mov	r18, r3
    172a:	2f 7e       	andi	r18, 0xEF	; 239
    172c:	b2 2e       	mov	r11, r18
    172e:	2a e0       	ldi	r18, 0x0A	; 10
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	25 c0       	rjmp	.+74     	; 0x177e <vfprintf+0x27c>
    1734:	93 2d       	mov	r25, r3
    1736:	99 7f       	andi	r25, 0xF9	; 249
    1738:	b9 2e       	mov	r11, r25
    173a:	8f 36       	cpi	r24, 0x6F	; 111
    173c:	c1 f0       	breq	.+48     	; 0x176e <vfprintf+0x26c>
    173e:	18 f4       	brcc	.+6      	; 0x1746 <vfprintf+0x244>
    1740:	88 35       	cpi	r24, 0x58	; 88
    1742:	79 f0       	breq	.+30     	; 0x1762 <vfprintf+0x260>
    1744:	b5 c0       	rjmp	.+362    	; 0x18b0 <vfprintf+0x3ae>
    1746:	80 37       	cpi	r24, 0x70	; 112
    1748:	19 f0       	breq	.+6      	; 0x1750 <vfprintf+0x24e>
    174a:	88 37       	cpi	r24, 0x78	; 120
    174c:	21 f0       	breq	.+8      	; 0x1756 <vfprintf+0x254>
    174e:	b0 c0       	rjmp	.+352    	; 0x18b0 <vfprintf+0x3ae>
    1750:	e9 2f       	mov	r30, r25
    1752:	e0 61       	ori	r30, 0x10	; 16
    1754:	be 2e       	mov	r11, r30
    1756:	b4 fe       	sbrs	r11, 4
    1758:	0d c0       	rjmp	.+26     	; 0x1774 <vfprintf+0x272>
    175a:	fb 2d       	mov	r31, r11
    175c:	f4 60       	ori	r31, 0x04	; 4
    175e:	bf 2e       	mov	r11, r31
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <vfprintf+0x272>
    1762:	34 fe       	sbrs	r3, 4
    1764:	0a c0       	rjmp	.+20     	; 0x177a <vfprintf+0x278>
    1766:	29 2f       	mov	r18, r25
    1768:	26 60       	ori	r18, 0x06	; 6
    176a:	b2 2e       	mov	r11, r18
    176c:	06 c0       	rjmp	.+12     	; 0x177a <vfprintf+0x278>
    176e:	28 e0       	ldi	r18, 0x08	; 8
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	05 c0       	rjmp	.+10     	; 0x177e <vfprintf+0x27c>
    1774:	20 e1       	ldi	r18, 0x10	; 16
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x27c>
    177a:	20 e1       	ldi	r18, 0x10	; 16
    177c:	32 e0       	ldi	r19, 0x02	; 2
    177e:	f8 01       	movw	r30, r16
    1780:	b7 fe       	sbrs	r11, 7
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <vfprintf+0x290>
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	0c 5f       	subi	r16, 0xFC	; 252
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0x29c>
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 5f       	subi	r16, 0xFE	; 254
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	a3 01       	movw	r20, r6
    17a0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__ultoa_invert>
    17a4:	88 2e       	mov	r8, r24
    17a6:	86 18       	sub	r8, r6
    17a8:	fb 2d       	mov	r31, r11
    17aa:	ff 77       	andi	r31, 0x7F	; 127
    17ac:	3f 2e       	mov	r3, r31
    17ae:	36 fe       	sbrs	r3, 6
    17b0:	0d c0       	rjmp	.+26     	; 0x17cc <vfprintf+0x2ca>
    17b2:	23 2d       	mov	r18, r3
    17b4:	2e 7f       	andi	r18, 0xFE	; 254
    17b6:	a2 2e       	mov	r10, r18
    17b8:	89 14       	cp	r8, r9
    17ba:	58 f4       	brcc	.+22     	; 0x17d2 <vfprintf+0x2d0>
    17bc:	34 fe       	sbrs	r3, 4
    17be:	0b c0       	rjmp	.+22     	; 0x17d6 <vfprintf+0x2d4>
    17c0:	32 fc       	sbrc	r3, 2
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <vfprintf+0x2d4>
    17c4:	83 2d       	mov	r24, r3
    17c6:	8e 7e       	andi	r24, 0xEE	; 238
    17c8:	a8 2e       	mov	r10, r24
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <vfprintf+0x2d4>
    17cc:	b8 2c       	mov	r11, r8
    17ce:	a3 2c       	mov	r10, r3
    17d0:	03 c0       	rjmp	.+6      	; 0x17d8 <vfprintf+0x2d6>
    17d2:	b8 2c       	mov	r11, r8
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <vfprintf+0x2d6>
    17d6:	b9 2c       	mov	r11, r9
    17d8:	a4 fe       	sbrs	r10, 4
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <vfprintf+0x2f8>
    17dc:	fe 01       	movw	r30, r28
    17de:	e8 0d       	add	r30, r8
    17e0:	f1 1d       	adc	r31, r1
    17e2:	80 81       	ld	r24, Z
    17e4:	80 33       	cpi	r24, 0x30	; 48
    17e6:	21 f4       	brne	.+8      	; 0x17f0 <vfprintf+0x2ee>
    17e8:	9a 2d       	mov	r25, r10
    17ea:	99 7e       	andi	r25, 0xE9	; 233
    17ec:	a9 2e       	mov	r10, r25
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <vfprintf+0x300>
    17f0:	a2 fe       	sbrs	r10, 2
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0x2fe>
    17f4:	b3 94       	inc	r11
    17f6:	b3 94       	inc	r11
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <vfprintf+0x300>
    17fa:	8a 2d       	mov	r24, r10
    17fc:	86 78       	andi	r24, 0x86	; 134
    17fe:	09 f0       	breq	.+2      	; 0x1802 <vfprintf+0x300>
    1800:	b3 94       	inc	r11
    1802:	a3 fc       	sbrc	r10, 3
    1804:	11 c0       	rjmp	.+34     	; 0x1828 <vfprintf+0x326>
    1806:	a0 fe       	sbrs	r10, 0
    1808:	06 c0       	rjmp	.+12     	; 0x1816 <vfprintf+0x314>
    180a:	b2 14       	cp	r11, r2
    180c:	88 f4       	brcc	.+34     	; 0x1830 <vfprintf+0x32e>
    180e:	28 0c       	add	r2, r8
    1810:	92 2c       	mov	r9, r2
    1812:	9b 18       	sub	r9, r11
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <vfprintf+0x330>
    1816:	b2 14       	cp	r11, r2
    1818:	60 f4       	brcc	.+24     	; 0x1832 <vfprintf+0x330>
    181a:	b6 01       	movw	r22, r12
    181c:	80 e2       	ldi	r24, 0x20	; 32
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    1824:	b3 94       	inc	r11
    1826:	f7 cf       	rjmp	.-18     	; 0x1816 <vfprintf+0x314>
    1828:	b2 14       	cp	r11, r2
    182a:	18 f4       	brcc	.+6      	; 0x1832 <vfprintf+0x330>
    182c:	2b 18       	sub	r2, r11
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <vfprintf+0x332>
    1830:	98 2c       	mov	r9, r8
    1832:	21 2c       	mov	r2, r1
    1834:	a4 fe       	sbrs	r10, 4
    1836:	10 c0       	rjmp	.+32     	; 0x1858 <vfprintf+0x356>
    1838:	b6 01       	movw	r22, r12
    183a:	80 e3       	ldi	r24, 0x30	; 48
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    1842:	a2 fe       	sbrs	r10, 2
    1844:	17 c0       	rjmp	.+46     	; 0x1874 <vfprintf+0x372>
    1846:	a1 fc       	sbrc	r10, 1
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <vfprintf+0x34e>
    184a:	88 e7       	ldi	r24, 0x78	; 120
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <vfprintf+0x352>
    1850:	88 e5       	ldi	r24, 0x58	; 88
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	b6 01       	movw	r22, r12
    1856:	0c c0       	rjmp	.+24     	; 0x1870 <vfprintf+0x36e>
    1858:	8a 2d       	mov	r24, r10
    185a:	86 78       	andi	r24, 0x86	; 134
    185c:	59 f0       	breq	.+22     	; 0x1874 <vfprintf+0x372>
    185e:	a1 fe       	sbrs	r10, 1
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x364>
    1862:	8b e2       	ldi	r24, 0x2B	; 43
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <vfprintf+0x366>
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	a7 fc       	sbrc	r10, 7
    186a:	8d e2       	ldi	r24, 0x2D	; 45
    186c:	b6 01       	movw	r22, r12
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    1874:	89 14       	cp	r8, r9
    1876:	38 f4       	brcc	.+14     	; 0x1886 <vfprintf+0x384>
    1878:	b6 01       	movw	r22, r12
    187a:	80 e3       	ldi	r24, 0x30	; 48
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    1882:	9a 94       	dec	r9
    1884:	f7 cf       	rjmp	.-18     	; 0x1874 <vfprintf+0x372>
    1886:	8a 94       	dec	r8
    1888:	f3 01       	movw	r30, r6
    188a:	e8 0d       	add	r30, r8
    188c:	f1 1d       	adc	r31, r1
    188e:	80 81       	ld	r24, Z
    1890:	b6 01       	movw	r22, r12
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    1898:	81 10       	cpse	r8, r1
    189a:	f5 cf       	rjmp	.-22     	; 0x1886 <vfprintf+0x384>
    189c:	22 20       	and	r2, r2
    189e:	09 f4       	brne	.+2      	; 0x18a2 <vfprintf+0x3a0>
    18a0:	42 ce       	rjmp	.-892    	; 0x1526 <vfprintf+0x24>
    18a2:	b6 01       	movw	r22, r12
    18a4:	80 e2       	ldi	r24, 0x20	; 32
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <fputc>
    18ac:	2a 94       	dec	r2
    18ae:	f6 cf       	rjmp	.-20     	; 0x189c <vfprintf+0x39a>
    18b0:	f6 01       	movw	r30, r12
    18b2:	86 81       	ldd	r24, Z+6	; 0x06
    18b4:	97 81       	ldd	r25, Z+7	; 0x07
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x3ba>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	9f ef       	ldi	r25, 0xFF	; 255
    18bc:	2b 96       	adiw	r28, 0x0b	; 11
    18be:	e2 e1       	ldi	r30, 0x12	; 18
    18c0:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__epilogue_restores__>

000018c4 <strnlen_P>:
    18c4:	fc 01       	movw	r30, r24
    18c6:	05 90       	lpm	r0, Z+
    18c8:	61 50       	subi	r22, 0x01	; 1
    18ca:	70 40       	sbci	r23, 0x00	; 0
    18cc:	01 10       	cpse	r0, r1
    18ce:	d8 f7       	brcc	.-10     	; 0x18c6 <strnlen_P+0x2>
    18d0:	80 95       	com	r24
    18d2:	90 95       	com	r25
    18d4:	8e 0f       	add	r24, r30
    18d6:	9f 1f       	adc	r25, r31
    18d8:	08 95       	ret

000018da <strnlen>:
    18da:	fc 01       	movw	r30, r24
    18dc:	61 50       	subi	r22, 0x01	; 1
    18de:	70 40       	sbci	r23, 0x00	; 0
    18e0:	01 90       	ld	r0, Z+
    18e2:	01 10       	cpse	r0, r1
    18e4:	d8 f7       	brcc	.-10     	; 0x18dc <strnlen+0x2>
    18e6:	80 95       	com	r24
    18e8:	90 95       	com	r25
    18ea:	8e 0f       	add	r24, r30
    18ec:	9f 1f       	adc	r25, r31
    18ee:	08 95       	ret

000018f0 <fputc>:
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	fb 01       	movw	r30, r22
    18fa:	23 81       	ldd	r18, Z+3	; 0x03
    18fc:	21 fd       	sbrc	r18, 1
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <fputc+0x16>
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	9f ef       	ldi	r25, 0xFF	; 255
    1904:	2c c0       	rjmp	.+88     	; 0x195e <fputc+0x6e>
    1906:	22 ff       	sbrs	r18, 2
    1908:	16 c0       	rjmp	.+44     	; 0x1936 <fputc+0x46>
    190a:	46 81       	ldd	r20, Z+6	; 0x06
    190c:	57 81       	ldd	r21, Z+7	; 0x07
    190e:	24 81       	ldd	r18, Z+4	; 0x04
    1910:	35 81       	ldd	r19, Z+5	; 0x05
    1912:	42 17       	cp	r20, r18
    1914:	53 07       	cpc	r21, r19
    1916:	44 f4       	brge	.+16     	; 0x1928 <fputc+0x38>
    1918:	a0 81       	ld	r26, Z
    191a:	b1 81       	ldd	r27, Z+1	; 0x01
    191c:	9d 01       	movw	r18, r26
    191e:	2f 5f       	subi	r18, 0xFF	; 255
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	31 83       	std	Z+1, r19	; 0x01
    1924:	20 83       	st	Z, r18
    1926:	8c 93       	st	X, r24
    1928:	26 81       	ldd	r18, Z+6	; 0x06
    192a:	37 81       	ldd	r19, Z+7	; 0x07
    192c:	2f 5f       	subi	r18, 0xFF	; 255
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	37 83       	std	Z+7, r19	; 0x07
    1932:	26 83       	std	Z+6, r18	; 0x06
    1934:	14 c0       	rjmp	.+40     	; 0x195e <fputc+0x6e>
    1936:	8b 01       	movw	r16, r22
    1938:	ec 01       	movw	r28, r24
    193a:	fb 01       	movw	r30, r22
    193c:	00 84       	ldd	r0, Z+8	; 0x08
    193e:	f1 85       	ldd	r31, Z+9	; 0x09
    1940:	e0 2d       	mov	r30, r0
    1942:	09 95       	icall
    1944:	89 2b       	or	r24, r25
    1946:	e1 f6       	brne	.-72     	; 0x1900 <fputc+0x10>
    1948:	d8 01       	movw	r26, r16
    194a:	16 96       	adiw	r26, 0x06	; 6
    194c:	8d 91       	ld	r24, X+
    194e:	9c 91       	ld	r25, X
    1950:	17 97       	sbiw	r26, 0x07	; 7
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	17 96       	adiw	r26, 0x07	; 7
    1956:	9c 93       	st	X, r25
    1958:	8e 93       	st	-X, r24
    195a:	16 97       	sbiw	r26, 0x06	; 6
    195c:	ce 01       	movw	r24, r28
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <__ultoa_invert>:
    1968:	fa 01       	movw	r30, r20
    196a:	aa 27       	eor	r26, r26
    196c:	28 30       	cpi	r18, 0x08	; 8
    196e:	51 f1       	breq	.+84     	; 0x19c4 <__ultoa_invert+0x5c>
    1970:	20 31       	cpi	r18, 0x10	; 16
    1972:	81 f1       	breq	.+96     	; 0x19d4 <__ultoa_invert+0x6c>
    1974:	e8 94       	clt
    1976:	6f 93       	push	r22
    1978:	6e 7f       	andi	r22, 0xFE	; 254
    197a:	6e 5f       	subi	r22, 0xFE	; 254
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	8f 4f       	sbci	r24, 0xFF	; 255
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	af 4f       	sbci	r26, 0xFF	; 255
    1984:	b1 e0       	ldi	r27, 0x01	; 1
    1986:	3e d0       	rcall	.+124    	; 0x1a04 <__ultoa_invert+0x9c>
    1988:	b4 e0       	ldi	r27, 0x04	; 4
    198a:	3c d0       	rcall	.+120    	; 0x1a04 <__ultoa_invert+0x9c>
    198c:	67 0f       	add	r22, r23
    198e:	78 1f       	adc	r23, r24
    1990:	89 1f       	adc	r24, r25
    1992:	9a 1f       	adc	r25, r26
    1994:	a1 1d       	adc	r26, r1
    1996:	68 0f       	add	r22, r24
    1998:	79 1f       	adc	r23, r25
    199a:	8a 1f       	adc	r24, r26
    199c:	91 1d       	adc	r25, r1
    199e:	a1 1d       	adc	r26, r1
    19a0:	6a 0f       	add	r22, r26
    19a2:	71 1d       	adc	r23, r1
    19a4:	81 1d       	adc	r24, r1
    19a6:	91 1d       	adc	r25, r1
    19a8:	a1 1d       	adc	r26, r1
    19aa:	20 d0       	rcall	.+64     	; 0x19ec <__ultoa_invert+0x84>
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <__ultoa_invert+0x48>
    19ae:	68 94       	set
    19b0:	3f 91       	pop	r19
    19b2:	2a e0       	ldi	r18, 0x0A	; 10
    19b4:	26 9f       	mul	r18, r22
    19b6:	11 24       	eor	r1, r1
    19b8:	30 19       	sub	r19, r0
    19ba:	30 5d       	subi	r19, 0xD0	; 208
    19bc:	31 93       	st	Z+, r19
    19be:	de f6       	brtc	.-74     	; 0x1976 <__ultoa_invert+0xe>
    19c0:	cf 01       	movw	r24, r30
    19c2:	08 95       	ret
    19c4:	46 2f       	mov	r20, r22
    19c6:	47 70       	andi	r20, 0x07	; 7
    19c8:	40 5d       	subi	r20, 0xD0	; 208
    19ca:	41 93       	st	Z+, r20
    19cc:	b3 e0       	ldi	r27, 0x03	; 3
    19ce:	0f d0       	rcall	.+30     	; 0x19ee <__ultoa_invert+0x86>
    19d0:	c9 f7       	brne	.-14     	; 0x19c4 <__ultoa_invert+0x5c>
    19d2:	f6 cf       	rjmp	.-20     	; 0x19c0 <__ultoa_invert+0x58>
    19d4:	46 2f       	mov	r20, r22
    19d6:	4f 70       	andi	r20, 0x0F	; 15
    19d8:	40 5d       	subi	r20, 0xD0	; 208
    19da:	4a 33       	cpi	r20, 0x3A	; 58
    19dc:	18 f0       	brcs	.+6      	; 0x19e4 <__ultoa_invert+0x7c>
    19de:	49 5d       	subi	r20, 0xD9	; 217
    19e0:	31 fd       	sbrc	r19, 1
    19e2:	40 52       	subi	r20, 0x20	; 32
    19e4:	41 93       	st	Z+, r20
    19e6:	02 d0       	rcall	.+4      	; 0x19ec <__ultoa_invert+0x84>
    19e8:	a9 f7       	brne	.-22     	; 0x19d4 <__ultoa_invert+0x6c>
    19ea:	ea cf       	rjmp	.-44     	; 0x19c0 <__ultoa_invert+0x58>
    19ec:	b4 e0       	ldi	r27, 0x04	; 4
    19ee:	a6 95       	lsr	r26
    19f0:	97 95       	ror	r25
    19f2:	87 95       	ror	r24
    19f4:	77 95       	ror	r23
    19f6:	67 95       	ror	r22
    19f8:	ba 95       	dec	r27
    19fa:	c9 f7       	brne	.-14     	; 0x19ee <__ultoa_invert+0x86>
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	61 05       	cpc	r22, r1
    1a00:	71 05       	cpc	r23, r1
    1a02:	08 95       	ret
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	0a 2e       	mov	r0, r26
    1a0a:	06 94       	lsr	r0
    1a0c:	57 95       	ror	r21
    1a0e:	47 95       	ror	r20
    1a10:	37 95       	ror	r19
    1a12:	27 95       	ror	r18
    1a14:	ba 95       	dec	r27
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <__ultoa_invert+0xa2>
    1a18:	62 0f       	add	r22, r18
    1a1a:	73 1f       	adc	r23, r19
    1a1c:	84 1f       	adc	r24, r20
    1a1e:	95 1f       	adc	r25, r21
    1a20:	a0 1d       	adc	r26, r0
    1a22:	08 95       	ret

00001a24 <__muluhisi3>:
    1a24:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__umulhisi3>
    1a28:	a5 9f       	mul	r26, r21
    1a2a:	90 0d       	add	r25, r0
    1a2c:	b4 9f       	mul	r27, r20
    1a2e:	90 0d       	add	r25, r0
    1a30:	a4 9f       	mul	r26, r20
    1a32:	80 0d       	add	r24, r0
    1a34:	91 1d       	adc	r25, r1
    1a36:	11 24       	eor	r1, r1
    1a38:	08 95       	ret

00001a3a <__mulshisi3>:
    1a3a:	b7 ff       	sbrs	r27, 7
    1a3c:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__muluhisi3>

00001a40 <__mulohisi3>:
    1a40:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__muluhisi3>
    1a44:	82 1b       	sub	r24, r18
    1a46:	93 0b       	sbc	r25, r19
    1a48:	08 95       	ret

00001a4a <__prologue_saves__>:
    1a4a:	2f 92       	push	r2
    1a4c:	3f 92       	push	r3
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	ca 1b       	sub	r28, r26
    1a74:	db 0b       	sbc	r29, r27
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	09 94       	ijmp

00001a82 <__epilogue_restores__>:
    1a82:	2a 88       	ldd	r2, Y+18	; 0x12
    1a84:	39 88       	ldd	r3, Y+17	; 0x11
    1a86:	48 88       	ldd	r4, Y+16	; 0x10
    1a88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a94:	b9 84       	ldd	r11, Y+9	; 0x09
    1a96:	c8 84       	ldd	r12, Y+8	; 0x08
    1a98:	df 80       	ldd	r13, Y+7	; 0x07
    1a9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1aa0:	1b 81       	ldd	r17, Y+3	; 0x03
    1aa2:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa4:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa6:	ce 0f       	add	r28, r30
    1aa8:	d1 1d       	adc	r29, r1
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	ed 01       	movw	r28, r26
    1ab6:	08 95       	ret

00001ab8 <__umulhisi3>:
    1ab8:	a2 9f       	mul	r26, r18
    1aba:	b0 01       	movw	r22, r0
    1abc:	b3 9f       	mul	r27, r19
    1abe:	c0 01       	movw	r24, r0
    1ac0:	a3 9f       	mul	r26, r19
    1ac2:	70 0d       	add	r23, r0
    1ac4:	81 1d       	adc	r24, r1
    1ac6:	11 24       	eor	r1, r1
    1ac8:	91 1d       	adc	r25, r1
    1aca:	b2 9f       	mul	r27, r18
    1acc:	70 0d       	add	r23, r0
    1ace:	81 1d       	adc	r24, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	91 1d       	adc	r25, r1
    1ad4:	08 95       	ret

00001ad6 <_exit>:
    1ad6:	f8 94       	cli

00001ad8 <__stop_program>:
    1ad8:	ff cf       	rjmp	.-2      	; 0x1ad8 <__stop_program>
