
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000236c  00002420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000236c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000164  0080015e  0080015e  0000247e  2**0
                  ALLOC
  3 .eeprom       0000006e  00810000  00810000  0000247e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002548  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000458  00000000  00000000  00002588  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000043e0  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001715  00000000  00000000  00006dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002413  00000000  00000000  000084d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b38  00000000  00000000  0000a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000121c  00000000  00000000  0000b420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000026ea  00000000  00000000  0000c63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000348  00000000  00000000  0000ed26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__ctors_end>
       4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
       8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
       c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      10:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      14:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_5>
      18:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      1c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      20:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      24:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      28:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      2c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      30:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      34:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      38:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      3c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      40:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_16>
      44:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      48:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      4c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      50:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__vector_20>
      54:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_21>
      58:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      5c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      60:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      64:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      68:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      6c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      70:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      74:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      78:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2520>:
      9a:	59 6f 75 72 20 4e 61 6d 65 3a 20 00                 Your Name: .

000000a6 <__c.2518>:
      a6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      b6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      c6:	0a 00                                               ..

000000c8 <__c.2516>:
      c8:	2a 20 20 59 6f 75 20 61 72 65 20 6f 6e 20 74 68     *  You are on th
      d8:	65 20 6c 65 61 64 65 72 20 62 6f 61 72 64 2e 2a     e leader board.*
      e8:	0a 00                                               ..

000000ea <__c.2514>:
      ea:	2a 20 20 43 6f 6e 67 72 61 74 75 6c 61 74 69 6f     *  Congratulatio
      fa:	6e 73 21 20 20 20 20 20 20 20 20 20 20 20 20 2a     ns!            *
     10a:	0a 00                                               ..

0000010c <__c.2512>:
     10c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     11c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     12c:	0a 00                                               ..

0000012e <__c.2510>:
     12e:	0a 00                                               ..

00000130 <__c.2507>:
     130:	47 41 4d 45 20 4f 56 45 52 0a 00                    GAME OVER..

0000013b <__c.2473>:
     13b:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     14b:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 53     ake Project by S
     15b:	65 61 6e 20 4c 69 6d 00                             ean Lim.

00000163 <__c.2471>:
     163:	53 6e 61 6b 65 00                                   Snake.

00000169 <__c.2137>:
     169:	57 61 69 74 69 6e 67 20 66 6f 72 20 45 45 50 52     Waiting for EEPR
     179:	4f 4d 20 74 6f 20 62 65 63 6f 6d 65 20 72 65 61     OM to become rea
     189:	64 79 2e 2e 2e 0a 00                                dy.....

00000190 <__c.2133>:
     190:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1a0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1b0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000001bd <__c.2131>:
     1bd:	2a 20 20 20 46 69 66 74 68 20 3a 20 20 25 73 20     *   Fifth :  %s 
     1cd:	2c 20 53 63 6f 72 65 3a 20 25 75 0a 00              , Score: %u..

000001da <__c.2129>:
     1da:	2a 20 20 20 46 6f 75 72 74 68 3a 20 20 25 73 20     *   Fourth:  %s 
     1ea:	2c 20 53 63 6f 72 65 3a 20 25 75 0a 00              , Score: %u..

000001f7 <__c.2127>:
     1f7:	2a 20 20 20 54 68 69 72 64 20 3a 20 20 25 73 20     *   Third :  %s 
     207:	2c 20 53 63 6f 72 65 3a 20 25 75 0a 00              , Score: %u..

00000214 <__c.2125>:
     214:	2a 20 20 20 53 65 63 6f 6e 64 3a 20 20 25 73 20     *   Second:  %s 
     224:	2c 20 53 63 6f 72 65 3a 20 25 75 0a 00              , Score: %u..

00000231 <__c.2123>:
     231:	2a 20 20 20 46 69 72 73 74 20 3a 20 20 25 73 20     *   First :  %s 
     241:	2c 20 53 63 6f 72 65 3a 20 25 75 0a 00              , Score: %u..

0000024e <__c.2121>:
     24e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     25e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     26e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

0000027b <__c.2119>:
     27b:	2a 20 20 20 20 20 20 20 20 20 20 20 20 4f 75 72     *            Our
     28b:	20 4c 65 61 64 65 72 20 42 6f 61 72 64 20 20 20      Leader Board   
     29b:	20 20 20 20 20 20 20 20 20 20 2a 0a 00                        *..

000002a8 <__c.2117>:
     2a8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2b8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2c8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000002d5 <__c.2115>:
     2d5:	0a 00                                               ..

000002d7 <__c.2111>:
     2d7:	57 61 69 74 69 6e 67 20 66 6f 72 20 45 45 50 52     Waiting for EEPR
     2e7:	4f 4d 20 74 6f 20 62 65 63 6f 6d 65 20 72 65 61     OM to become rea
     2f7:	64 79 2e 2e 2e 0a 00                                dy.....

000002fe <__c.2104>:
     2fe:	53 63 6f 72 65 3a 20 25 6c 64 00                    Score: %ld.

00000309 <numbers>:
     309:	74 03 71 03 6d 03 69 03 65 03 61 03 5d 03 59 03     t.q.m.i.e.a.].Y.
     319:	55 03 51 03                                         U.Q.

0000031d <letters>:
     31d:	e3 03 df 03 db 03 d7 03 d3 03 cf 03 cb 03 c7 03     ................
     32d:	c4 03 c0 03 bc 03 b8 03 b3 03 af 03 ab 03 a7 03     ................
     33d:	a2 03 9e 03 9a 03 95 03 91 03 8c 03 87 03 82 03     ................
     34d:	7d 03 78 03                                         }.x.

00000351 <cols_9>:
     351:	64 92 92 7d                                         d..}

00000355 <cols_8>:
     355:	6c 92 92 6d                                         l..m

00000359 <cols_7>:
     359:	80 9e a0 c1                                         ....

0000035d <cols_6>:
     35d:	7c 92 92 4d                                         |..M

00000361 <cols_5>:
     361:	e4 a2 a2 9d                                         ....

00000365 <cols_4>:
     365:	18 28 48 ff                                         .(H.

00000369 <cols_3>:
     369:	44 92 92 6d                                         D..m

0000036d <cols_2>:
     36d:	46 8a 92 63                                         F..c

00000371 <cols_1>:
     371:	42 fe 03                                            B..

00000374 <cols_0>:
     374:	7c 92 a2 7d                                         |..}

00000378 <cols_Z>:
     378:	86 8a 92 a2 c3                                      .....

0000037d <cols_Y>:
     37d:	e0 10 0e 10 e1                                      .....

00000382 <cols_X>:
     382:	c6 28 10 28 c7                                      .(.(.

00000387 <cols_W>:
     387:	fc 02 1c 02 fd                                      .....

0000038c <cols_V>:
     38c:	f8 04 02 04 f9                                      .....

00000391 <cols_U>:
     391:	fc 02 02 fd                                         ....

00000395 <cols_T>:
     395:	80 80 fe 80 81                                      .....

0000039a <cols_S>:
     39a:	64 92 92 4d                                         d..M

0000039e <cols_R>:
     39e:	fe 90 98 67                                         ...g

000003a2 <cols_Q>:
     3a2:	7c 82 8a 7c 03                                      |..|.

000003a7 <cols_P>:
     3a7:	fe 90 90 61                                         ...a

000003ab <cols_O>:
     3ab:	7c 82 82 7d                                         |..}

000003af <cols_N>:
     3af:	fe 20 10 ff                                         . ..

000003b3 <cols_M>:
     3b3:	fe 40 30 40 ff                                      .@0@.

000003b8 <cols_L>:
     3b8:	fe 02 02 03                                         ....

000003bc <cols_K>:
     3bc:	fe 10 28 c7                                         ..(.

000003c0 <cols_J>:
     3c0:	04 02 02 fd                                         ....

000003c4 <cols_I>:
     3c4:	82 fe 83                                            ...

000003c7 <cols_H>:
     3c7:	fe 10 10 ff                                         ....

000003cb <cols_G>:
     3cb:	7c 82 92 5d                                         |..]

000003cf <cols_F>:
     3cf:	fe 90 90 81                                         ....

000003d3 <cols_E>:
     3d3:	fe 92 92 83                                         ....

000003d7 <cols_D>:
     3d7:	fe 82 82 7d                                         ...}

000003db <cols_C>:
     3db:	7c 82 82 45                                         |..E

000003df <cols_B>:
     3df:	fe 92 92 6d                                         ...m

000003e3 <cols_A>:
     3e3:	7e 90 90 7f                                         ~...

000003e7 <__c.2058>:
     3e7:	1b 5b 3f 32 35 68 00                                .[?25h.

000003ee <__c.2054>:
     3ee:	1b 5b 3f 32 35 6c 00                                .[?25l.

000003f5 <__c.2050>:
     3f5:	1b 5b 25 64 6d 00                                   .[%dm.

000003fb <__c.2040>:
     3fb:	1b 5b 32 4a 00                                      .[2J.

00000400 <__c.2025>:
     400:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

0000040a <__ctors_end>:
     40a:	11 24       	eor	r1, r1
     40c:	1f be       	out	0x3f, r1	; 63
     40e:	cf ef       	ldi	r28, 0xFF	; 255
     410:	d8 e0       	ldi	r29, 0x08	; 8
     412:	de bf       	out	0x3e, r29	; 62
     414:	cd bf       	out	0x3d, r28	; 61

00000416 <__do_copy_data>:
     416:	11 e0       	ldi	r17, 0x01	; 1
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b1 e0       	ldi	r27, 0x01	; 1
     41c:	ec e6       	ldi	r30, 0x6C	; 108
     41e:	f3 e2       	ldi	r31, 0x23	; 35
     420:	02 c0       	rjmp	.+4      	; 0x426 <__do_copy_data+0x10>
     422:	05 90       	lpm	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	ae 35       	cpi	r26, 0x5E	; 94
     428:	b1 07       	cpc	r27, r17
     42a:	d9 f7       	brne	.-10     	; 0x422 <__do_copy_data+0xc>

0000042c <__do_clear_bss>:
     42c:	22 e0       	ldi	r18, 0x02	; 2
     42e:	ae e5       	ldi	r26, 0x5E	; 94
     430:	b1 e0       	ldi	r27, 0x01	; 1
     432:	01 c0       	rjmp	.+2      	; 0x436 <.do_clear_bss_start>

00000434 <.do_clear_bss_loop>:
     434:	1d 92       	st	X+, r1

00000436 <.do_clear_bss_start>:
     436:	a2 3c       	cpi	r26, 0xC2	; 194
     438:	b2 07       	cpc	r27, r18
     43a:	e1 f7       	brne	.-8      	; 0x434 <.do_clear_bss_loop>
     43c:	0e 94 df 07 	call	0xfbe	; 0xfbe <main>
     440:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <_exit>

00000444 <__bad_interrupt>:
     444:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000448 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     448:	e8 e6       	ldi	r30, 0x68	; 104
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	82 60       	ori	r24, 0x02	; 2
     450:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     452:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     454:	ec e6       	ldi	r30, 0x6C	; 108
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	8f 60       	ori	r24, 0x0F	; 15
     45c:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     45e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
     462:	08 95       	ret

00000464 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     464:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
     468:	08 95       	ret

0000046a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     46a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     46e:	18 16       	cp	r1, r24
     470:	3c f5       	brge	.+78     	; 0x4c0 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     472:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     476:	6f b7       	in	r22, 0x3f	; 63
		cli();
     478:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     47a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <__data_end>
     47e:	92 30       	cpi	r25, 0x02	; 2
     480:	b4 f0       	brlt	.+44     	; 0x4ae <button_pushed+0x44>
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     488:	f9 01       	movw	r30, r18
     48a:	e1 5a       	subi	r30, 0xA1	; 161
     48c:	fe 4f       	sbci	r31, 0xFE	; 254
     48e:	40 81       	ld	r20, Z
     490:	f9 01       	movw	r30, r18
     492:	e2 5a       	subi	r30, 0xA2	; 162
     494:	fe 4f       	sbci	r31, 0xFE	; 254
     496:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     498:	9f 5f       	subi	r25, 0xFF	; 255
     49a:	29 2f       	mov	r18, r25
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <__data_end>
     4a2:	04 2e       	mov	r0, r20
     4a4:	00 0c       	add	r0, r0
     4a6:	55 0b       	sbc	r21, r21
     4a8:	24 17       	cp	r18, r20
     4aa:	35 07       	cpc	r19, r21
     4ac:	6c f3       	brlt	.-38     	; 0x488 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     4ae:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <__data_end>
     4b2:	91 50       	subi	r25, 0x01	; 1
     4b4:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <__data_end>
		
		if(interrupts_were_enabled) {
     4b8:	66 23       	and	r22, r22
     4ba:	1c f4       	brge	.+6      	; 0x4c2 <button_pushed+0x58>
			// Turn them back on again
			sei();
     4bc:	78 94       	sei
     4be:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     4c2:	08 95       	ret

000004c4 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     4e2:	43 b1       	in	r20, 0x03	; 3
     4e4:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     4e6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     4ea:	88 30       	cpi	r24, 0x08	; 8
     4ec:	64 f5       	brge	.+88     	; 0x546 <__vector_5+0x82>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     4f2:	64 2f       	mov	r22, r20
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	9b 01       	movw	r18, r22
     4f8:	08 2e       	mov	r0, r24
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__vector_5+0x3c>
     4fc:	35 95       	asr	r19
     4fe:	27 95       	ror	r18
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <__vector_5+0x38>
     504:	20 ff       	sbrs	r18, 0
     506:	1b c0       	rjmp	.+54     	; 0x53e <__vector_5+0x7a>
     508:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <last_button_state>
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	08 2e       	mov	r0, r24
     510:	02 c0       	rjmp	.+4      	; 0x516 <__vector_5+0x52>
     512:	35 95       	asr	r19
     514:	27 95       	ror	r18
     516:	0a 94       	dec	r0
     518:	e2 f7       	brpl	.-8      	; 0x512 <__vector_5+0x4e>
     51a:	20 fd       	sbrc	r18, 0
     51c:	10 c0       	rjmp	.+32     	; 0x53e <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     51e:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <__data_end>
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	2e 0f       	add	r18, r30
     526:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__data_end>
     52a:	0e 2e       	mov	r0, r30
     52c:	00 0c       	add	r0, r0
     52e:	ff 0b       	sbc	r31, r31
     530:	e1 5a       	subi	r30, 0xA1	; 161
     532:	fe 4f       	sbci	r31, 0xFE	; 254
     534:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     536:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__data_end>
     53a:	28 30       	cpi	r18, 0x08	; 8
     53c:	24 f4       	brge	.+8      	; 0x546 <__vector_5+0x82>
     53e:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     540:	84 30       	cpi	r24, 0x04	; 4
     542:	91 05       	cpc	r25, r1
     544:	c1 f6       	brne	.-80     	; 0x4f6 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     546:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <last_button_state>
}
     54a:	ff 91       	pop	r31
     54c:	ef 91       	pop	r30
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0f be       	out	0x3f, r0	; 63
     562:	0f 90       	pop	r0
     564:	1f 90       	pop	r1
     566:	18 95       	reti

00000568 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     568:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <numFoodItems>
     56c:	08 95       	ret

0000056e <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     56e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <numFoodItems>
     572:	13 16       	cp	r1, r19
     574:	84 f4       	brge	.+32     	; 0x596 <food_at+0x28>
        if(foodPositions[id] == posn) {
     576:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <foodPositions>
     57a:	89 17       	cp	r24, r25
     57c:	71 f0       	breq	.+28     	; 0x59a <food_at+0x2c>
     57e:	e1 ea       	ldi	r30, 0xA1	; 161
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	03 c0       	rjmp	.+6      	; 0x58c <food_at+0x1e>
     586:	21 91       	ld	r18, Z+
     588:	28 17       	cp	r18, r24
     58a:	49 f0       	breq	.+18     	; 0x59e <food_at+0x30>
     58c:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     58e:	39 13       	cpse	r19, r25
     590:	fa cf       	rjmp	.-12     	; 0x586 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     592:	8f ef       	ldi	r24, 0xFF	; 255
     594:	08 95       	ret
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	08 95       	ret
     59e:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     5a0:	08 95       	ret

000005a2 <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     5a2:	0e 94 b7 02 	call	0x56e	; 0x56e <food_at>
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	8f 3f       	cpi	r24, 0xFF	; 255
     5aa:	09 f4       	brne	.+2      	; 0x5ae <is_food_at+0xc>
     5ac:	90 e0       	ldi	r25, 0x00	; 0
}
     5ae:	89 2f       	mov	r24, r25
     5b0:	08 95       	ret

000005b2 <superfood_at>:
    }
    // No food found at the given position.
    return -1;
}

int8_t superfood_at(PosnType posn) {
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <superfood_position>
     5b8:	28 13       	cpse	r18, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
	if (posn == superfood_position){
		return 1;
	}
	return 0;
}
     5bc:	89 2f       	mov	r24, r25
     5be:	08 95       	ret

000005c0 <add_food_item>:

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     5ca:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <numFoodItems>
     5ce:	88 30       	cpi	r24, 0x08	; 8
     5d0:	d4 f5       	brge	.+116    	; 0x646 <add_food_item+0x86>
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	d0 e0       	ldi	r29, 0x00	; 0
     5d8:	c0 e0       	ldi	r28, 0x00	; 0
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <add_food_item+0x20>
     5dc:	0f 5f       	subi	r16, 0xFF	; 255
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     5e0:	2c 2f       	mov	r18, r28
     5e2:	cc 0f       	add	r28, r28
     5e4:	33 0b       	sbc	r19, r19
     5e6:	2d 5f       	subi	r18, 0xFD	; 253
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	20 0f       	add	r18, r16
     5ec:	31 1f       	adc	r19, r17
     5ee:	2f 70       	andi	r18, 0x0F	; 15
     5f0:	30 78       	andi	r19, 0x80	; 128
     5f2:	33 23       	and	r19, r19
     5f4:	34 f4       	brge	.+12     	; 0x602 <add_food_item+0x42>
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	31 09       	sbc	r19, r1
     5fa:	20 6f       	ori	r18, 0xF0	; 240
     5fc:	3f 6f       	ori	r19, 0xFF	; 255
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	82 2f       	mov	r24, r18
     604:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     606:	6d 2f       	mov	r22, r29
     608:	dd 0f       	add	r29, r29
     60a:	77 0b       	sbc	r23, r23
     60c:	6b 5f       	subi	r22, 0xFB	; 251
     60e:	7f 4f       	sbci	r23, 0xFF	; 255
     610:	67 70       	andi	r22, 0x07	; 7
     612:	70 78       	andi	r23, 0x80	; 128
     614:	77 23       	and	r23, r23
     616:	34 f4       	brge	.+12     	; 0x624 <add_food_item+0x64>
     618:	61 50       	subi	r22, 0x01	; 1
     61a:	71 09       	sbc	r23, r1
     61c:	68 6f       	ori	r22, 0xF8	; 248
     61e:	7f 6f       	ori	r23, 0xFF	; 255
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     626:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
     62a:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)));
     62c:	03 36       	cpi	r16, 0x63	; 99
     62e:	11 05       	cpc	r17, r1
     630:	61 f0       	breq	.+24     	; 0x64a <add_food_item+0x8a>
     632:	0e 94 a0 0b 	call	0x1740	; 0x1740 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     636:	81 11       	cpse	r24, r1
     638:	d1 cf       	rjmp	.-94     	; 0x5dc <add_food_item+0x1c>
                (is_snake_at(test_position) || is_food_at(test_position)));
     63a:	8f 2d       	mov	r24, r15
     63c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <is_food_at>
     640:	81 11       	cpse	r24, r1
     642:	cc cf       	rjmp	.-104    	; 0x5dc <add_food_item+0x1c>
     644:	04 c0       	rjmp	.+8      	; 0x64e <add_food_item+0x8e>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	0f c0       	rjmp	.+30     	; 0x668 <add_food_item+0xa8>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     64a:	88 e0       	ldi	r24, 0x08	; 8
     64c:	0d c0       	rjmp	.+26     	; 0x668 <add_food_item+0xa8>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     64e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <numFoodItems>
	foodPositions[newFoodID] = test_position;
     652:	e8 2f       	mov	r30, r24
     654:	08 2e       	mov	r0, r24
     656:	00 0c       	add	r0, r0
     658:	ff 0b       	sbc	r31, r31
     65a:	e0 56       	subi	r30, 0x60	; 96
     65c:	fe 4f       	sbci	r31, 0xFE	; 254
     65e:	f0 82       	st	Z, r15
	numFoodItems++;
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     666:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	08 95       	ret

00000674 <add_super_food>:

PosnType add_super_food(void){
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
		x = rand()%BOARD_WIDTH;
     67a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <rand>
     67e:	ec 01       	movw	r28, r24
		y = rand()%BOARD_HEIGHT;
     680:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <rand>
		test_position = position(x,y);
     684:	bc 01       	movw	r22, r24
     686:	67 70       	andi	r22, 0x07	; 7
     688:	70 78       	andi	r23, 0x80	; 128
     68a:	77 23       	and	r23, r23
     68c:	34 f4       	brge	.+12     	; 0x69a <add_super_food+0x26>
     68e:	61 50       	subi	r22, 0x01	; 1
     690:	71 09       	sbc	r23, r1
     692:	68 6f       	ori	r22, 0xF8	; 248
     694:	7f 6f       	ori	r23, 0xFF	; 255
     696:	6f 5f       	subi	r22, 0xFF	; 255
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	ce 01       	movw	r24, r28
     69c:	8f 70       	andi	r24, 0x0F	; 15
     69e:	90 78       	andi	r25, 0x80	; 128
     6a0:	99 23       	and	r25, r25
     6a2:	24 f4       	brge	.+8      	; 0x6ac <add_super_food+0x38>
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	80 6f       	ori	r24, 0xF0	; 240
     6a8:	9f 6f       	ori	r25, 0xFF	; 255
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
     6b0:	c8 2f       	mov	r28, r24
     6b2:	13 e6       	ldi	r17, 0x63	; 99
     6b4:	1e c0       	rjmp	.+60     	; 0x6f2 <add_super_food+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
		x = rand()%BOARD_WIDTH;
     6b6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <rand>
     6ba:	ec 01       	movw	r28, r24
		y = rand()%BOARD_HEIGHT;
     6bc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <rand>
		test_position = position(x,y);
     6c0:	bc 01       	movw	r22, r24
     6c2:	67 70       	andi	r22, 0x07	; 7
     6c4:	70 78       	andi	r23, 0x80	; 128
     6c6:	77 23       	and	r23, r23
     6c8:	34 f4       	brge	.+12     	; 0x6d6 <add_super_food+0x62>
     6ca:	61 50       	subi	r22, 0x01	; 1
     6cc:	71 09       	sbc	r23, r1
     6ce:	68 6f       	ori	r22, 0xF8	; 248
     6d0:	7f 6f       	ori	r23, 0xFF	; 255
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	ce 01       	movw	r24, r28
     6d8:	8f 70       	andi	r24, 0x0F	; 15
     6da:	90 78       	andi	r25, 0x80	; 128
     6dc:	99 23       	and	r25, r25
     6de:	24 f4       	brge	.+8      	; 0x6e8 <add_super_food+0x74>
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	80 6f       	ori	r24, 0xF0	; 240
     6e4:	9f 6f       	ori	r25, 0xFF	; 255
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
     6ec:	c8 2f       	mov	r28, r24
     6ee:	11 50       	subi	r17, 0x01	; 1
		attempts++;
	} while(attempts < 100 && (is_snake_at(test_position) || is_food_at(test_position)));
     6f0:	59 f0       	breq	.+22     	; 0x708 <add_super_food+0x94>
     6f2:	8c 2f       	mov	r24, r28
     6f4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <is_snake_at>
     6f8:	81 11       	cpse	r24, r1
     6fa:	dd cf       	rjmp	.-70     	; 0x6b6 <add_super_food+0x42>
     6fc:	8c 2f       	mov	r24, r28
     6fe:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <is_food_at>
     702:	81 11       	cpse	r24, r1
     704:	d8 cf       	rjmp	.-80     	; 0x6b6 <add_super_food+0x42>
     706:	02 c0       	rjmp	.+4      	; 0x70c <add_super_food+0x98>
	if (attempts >= 100) {
		return INVALID_POSITION;
     708:	88 e0       	ldi	r24, 0x08	; 8
     70a:	03 c0       	rjmp	.+6      	; 0x712 <add_super_food+0x9e>
	}
	superfood_position = test_position;
     70c:	c0 93 9e 01 	sts	0x019E, r28	; 0x80019e <superfood_position>
	return test_position;
     710:	8c 2f       	mov	r24, r28
}
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	08 95       	ret

0000071a <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     71a:	e8 2f       	mov	r30, r24
     71c:	88 0f       	add	r24, r24
     71e:	ff 0b       	sbc	r31, r31
     720:	e0 56       	subi	r30, 0x60	; 96
     722:	fe 4f       	sbci	r31, 0xFE	; 254
}
     724:	80 81       	ld	r24, Z
     726:	08 95       	ret

00000728 <get_superfood_position>:

PosnType get_superfood_position(void){
	return superfood_position;
}
     728:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <superfood_position>
     72c:	08 95       	ret

0000072e <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     72e:	88 23       	and	r24, r24
     730:	b4 f0       	brlt	.+44     	; 0x75e <remove_food+0x30>
     732:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <numFoodItems>
     736:	82 17       	cp	r24, r18
     738:	94 f4       	brge	.+36     	; 0x75e <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     73a:	8f 5f       	subi	r24, 0xFF	; 255
     73c:	82 17       	cp	r24, r18
     73e:	64 f4       	brge	.+24     	; 0x758 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     740:	e8 2f       	mov	r30, r24
     742:	08 2e       	mov	r0, r24
     744:	00 0c       	add	r0, r0
     746:	ff 0b       	sbc	r31, r31
     748:	e0 56       	subi	r30, 0x60	; 96
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	90 81       	ld	r25, Z
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	90 83       	st	Z, r25
     752:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     754:	82 17       	cp	r24, r18
     756:	a4 f3       	brlt	.-24     	; 0x740 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     758:	21 50       	subi	r18, 0x01	; 1
     75a:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <numFoodItems>
     75e:	08 95       	ret

00000760 <remove_super_food>:
}

void remove_super_food(){
	superfood_position = position(-1,-1);
     760:	6f ef       	ldi	r22, 0xFF	; 255
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
     768:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <superfood_position>
     76c:	08 95       	ret

0000076e <move_rat>:
}

int8_t move_rat(void) {
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
	int8_t ratX;	/* head X position */
	int8_t ratY;	/* head Y position */
	PosnType newRatPosn;
    
	/* Current head position */
	ratX = x_position(foodPositions[0]);
     776:	c0 ea       	ldi	r28, 0xA0	; 160
     778:	d1 e0       	ldi	r29, 0x01	; 1
     77a:	88 81       	ld	r24, Y
     77c:	0e 94 2a 05 	call	0xa54	; 0xa54 <x_position>
     780:	08 2f       	mov	r16, r24
     782:	18 2f       	mov	r17, r24
	ratY = y_position(foodPositions[0]);
     784:	88 81       	ld	r24, Y
     786:	0e 94 2d 05 	call	0xa5a	; 0xa5a <y_position>
     78a:	d8 2f       	mov	r29, r24
     78c:	c8 2f       	mov	r28, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (rand()%4) {
     78e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <rand>
     792:	83 70       	andi	r24, 0x03	; 3
     794:	90 78       	andi	r25, 0x80	; 128
     796:	99 23       	and	r25, r25
     798:	24 f4       	brge	.+8      	; 0x7a2 <move_rat+0x34>
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	8c 6f       	ori	r24, 0xFC	; 252
     79e:	9f 6f       	ori	r25, 0xFF	; 255
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	91 05       	cpc	r25, r1
     7a6:	91 f0       	breq	.+36     	; 0x7cc <move_rat+0x5e>
     7a8:	1c f4       	brge	.+6      	; 0x7b0 <move_rat+0x42>
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	39 f0       	breq	.+14     	; 0x7bc <move_rat+0x4e>
     7ae:	25 c0       	rjmp	.+74     	; 0x7fa <move_rat+0x8c>
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	91 05       	cpc	r25, r1
     7b4:	99 f0       	breq	.+38     	; 0x7dc <move_rat+0x6e>
     7b6:	04 97       	sbiw	r24, 0x04	; 4
     7b8:	c9 f0       	breq	.+50     	; 0x7ec <move_rat+0x7e>
     7ba:	1f c0       	rjmp	.+62     	; 0x7fa <move_rat+0x8c>
        case 1:
			if(ratY == BOARD_HEIGHT - 1) {
     7bc:	c7 30       	cpi	r28, 0x07	; 7
     7be:	19 f4       	brne	.+6      	; 0x7c6 <move_rat+0x58>
				// Head is already at the top of the board - wrap around
				ratY -= 1;
     7c0:	cf ef       	ldi	r28, 0xFF	; 255
     7c2:	cd 0f       	add	r28, r29
     7c4:	1a c0       	rjmp	.+52     	; 0x7fa <move_rat+0x8c>
			} else {
	            ratY += 1;
     7c6:	c1 e0       	ldi	r28, 0x01	; 1
     7c8:	cd 0f       	add	r28, r29
     7ca:	17 c0       	rjmp	.+46     	; 0x7fa <move_rat+0x8c>
			}
            break;
        case 2:
			if(ratX == BOARD_WIDTH - 1) {
     7cc:	1f 30       	cpi	r17, 0x0F	; 15
     7ce:	19 f4       	brne	.+6      	; 0x7d6 <move_rat+0x68>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				ratX -= 1;
     7d0:	1f ef       	ldi	r17, 0xFF	; 255
     7d2:	10 0f       	add	r17, r16
     7d4:	12 c0       	rjmp	.+36     	; 0x7fa <move_rat+0x8c>
			} else {
				ratX += 1;
     7d6:	11 e0       	ldi	r17, 0x01	; 1
     7d8:	10 0f       	add	r17, r16
     7da:	0f c0       	rjmp	.+30     	; 0x7fa <move_rat+0x8c>
			}
            break;
		/* YOUR CODE HERE to deal with other directions */
		case 3:
			if(ratY == 0) {
     7dc:	c1 11       	cpse	r28, r1
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <move_rat+0x78>
			// Head is already at the bottom of the board - wrap around
			ratY += 1;
     7e0:	c1 e0       	ldi	r28, 0x01	; 1
     7e2:	cd 0f       	add	r28, r29
     7e4:	0a c0       	rjmp	.+20     	; 0x7fa <move_rat+0x8c>
			} else {
			ratY -= 1;
     7e6:	cf ef       	ldi	r28, 0xFF	; 255
     7e8:	cd 0f       	add	r28, r29
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <move_rat+0x8c>
			}
			break;
		case 4:
			if(ratX == 0) {
     7ec:	11 11       	cpse	r17, r1
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <move_rat+0x88>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				ratX += 1;
     7f0:	11 e0       	ldi	r17, 0x01	; 1
     7f2:	10 0f       	add	r17, r16
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <move_rat+0x8c>
			} else {
				ratX -= 1;
     7f6:	1f ef       	ldi	r17, 0xFF	; 255
     7f8:	10 0f       	add	r17, r16
			}
			break;
    }

	newRatPosn = position(ratX, ratY);
     7fa:	6c 2f       	mov	r22, r28
     7fc:	81 2f       	mov	r24, r17
     7fe:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
	/* Store the head position */
	foodPositions[0] = newRatPosn;
     802:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <foodPositions>
	return MOVE_OK;
}
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <update_display_at_position>:

// Define time interval
int time_elapse = 600;

// Helper function
static void update_display_at_position(PosnType posn, PixelColour colour) {
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	c8 2f       	mov	r28, r24
     81a:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     81c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <y_position>
     820:	d8 2f       	mov	r29, r24
     822:	8c 2f       	mov	r24, r28
     824:	0e 94 2a 05 	call	0xa54	; 0xa54 <x_position>
     828:	41 2f       	mov	r20, r17
     82a:	6d 2f       	mov	r22, r29
     82c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ledmatrix_update_pixel>
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	08 95       	ret

00000838 <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     83c:	0e 94 26 05 	call	0xa4c	; 0xa4c <ledmatrix_clear>
	time_elapse = 600;
     840:	88 e5       	ldi	r24, 0x58	; 88
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <time_elapse+0x1>
     848:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <time_elapse>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     84c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <init_snake>
	
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     850:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <get_snake_head_position>
     854:	6f e0       	ldi	r22, 0x0F	; 15
     856:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     85a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <get_snake_tail_position>
     85e:	60 ef       	ldi	r22, 0xF0	; 240
     860:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     864:	0e 94 b4 02 	call	0x568	; 0x568 <init_food>
     868:	c3 e0       	ldi	r28, 0x03	; 3
	
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     86a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <add_food_item>
     86e:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     870:	0e 94 2f 05 	call	0xa5e	; 0xa5e <is_position_valid>
     874:	88 23       	and	r24, r24
     876:	21 f0       	breq	.+8      	; 0x880 <init_game+0x48>
			update_display_at_position(food_position, FOOD_COLOUR);
     878:	63 e3       	ldi	r22, 0x33	; 51
     87a:	8d 2f       	mov	r24, r29
     87c:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
     880:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	
	for(int8_t i = 0; i < 3; i++) {
     882:	99 f7       	brne	.-26     	; 0x86a <init_game+0x32>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <attempt_to_move_rat>:
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}

int8_t attempt_to_move_rat(void){
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
	PosnType prior_rat_position= get_position_of_food(0);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	0e 94 8d 03 	call	0x71a	; 0x71a <get_position_of_food>
     896:	18 2f       	mov	r17, r24
	int8_t move_result = move_rat();
     898:	0e 94 b7 03 	call	0x76e	; 0x76e <move_rat>
     89c:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     89e:	88 23       	and	r24, r24
     8a0:	84 f0       	brlt	.+32     	; 0x8c2 <attempt_to_move_rat+0x38>
		return 0;
	}
	PosnType new_rat_position = get_position_of_food(0);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 8d 03 	call	0x71a	; 0x71a <get_position_of_food>
     8a8:	d8 2f       	mov	r29, r24
	
	if(move_result == MOVE_OK) {
     8aa:	c1 30       	cpi	r28, 0x01	; 1
     8ac:	21 f4       	brne	.+8      	; 0x8b6 <attempt_to_move_rat+0x2c>
		update_display_at_position(prior_rat_position, BACKGROUND_COLOUR);
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	81 2f       	mov	r24, r17
     8b2:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	}
	
	update_display_at_position(new_rat_position, FOOD_COLOUR);
     8b6:	63 e3       	ldi	r22, 0x33	; 51
     8b8:	8d 2f       	mov	r24, r29
     8ba:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	return 1;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <attempt_to_move_rat+0x3a>

int8_t attempt_to_move_rat(void){
	PosnType prior_rat_position= get_position_of_food(0);
	int8_t move_result = move_rat();
	if(move_result < 0) {
		return 0;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
		update_display_at_position(prior_rat_position, BACKGROUND_COLOUR);
	}
	
	update_display_at_position(new_rat_position, FOOD_COLOUR);
	return 1;
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	08 95       	ret

000008cc <attempt_to_spawn_superfood>:

int8_t attempt_to_spawn_superfood(void){
     8cc:	cf 93       	push	r28
	PosnType superfood_posn;
	superfood_posn = add_super_food();
     8ce:	0e 94 3a 03 	call	0x674	; 0x674 <add_super_food>
     8d2:	c8 2f       	mov	r28, r24
	if (is_position_valid(superfood_posn)){
     8d4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <is_position_valid>
     8d8:	88 23       	and	r24, r24
     8da:	21 f0       	breq	.+8      	; 0x8e4 <attempt_to_spawn_superfood+0x18>
		update_display_at_position(superfood_posn, COLOUR_ORANGE);
     8dc:	6c e3       	ldi	r22, 0x3C	; 60
     8de:	8c 2f       	mov	r24, r28
     8e0:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	}
	return 1;
} 
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <attempt_to_remove_superfood>:

void attempt_to_remove_superfood(void){
     8ea:	cf 93       	push	r28
	if (get_superfood_position() != position(-1,-1)){
     8ec:	0e 94 94 03 	call	0x728	; 0x728 <get_superfood_position>
     8f0:	c8 2f       	mov	r28, r24
     8f2:	6f ef       	ldi	r22, 0xFF	; 255
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
     8fa:	c8 17       	cp	r28, r24
     8fc:	39 f0       	breq	.+14     	; 0x90c <__stack+0xd>
		update_display_at_position(get_superfood_position(), BACKGROUND_COLOUR);
     8fe:	0e 94 94 03 	call	0x728	; 0x728 <get_superfood_position>
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
		remove_super_food();	
     908:	0e 94 b0 03 	call	0x760	; 0x760 <remove_super_food>
	}
}
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <attempt_to_move_snake_forward>:
		}
	}	
}

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     918:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <get_snake_head_position>
     91c:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     91e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <advance_snake_head>
     922:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     924:	88 23       	and	r24, r24
     926:	0c f4       	brge	.+2      	; 0x92a <attempt_to_move_snake_forward+0x1a>
     928:	3f c0       	rjmp	.+126    	; 0x9a8 <attempt_to_move_snake_forward+0x98>
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
	}
	PosnType new_head_position = get_snake_head_position();
     92a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <get_snake_head_position>
     92e:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     930:	8e ef       	ldi	r24, 0xFE	; 254
     932:	8c 0f       	add	r24, r28
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	e8 f4       	brcc	.+58     	; 0x972 <attempt_to_move_snake_forward+0x62>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     938:	81 2f       	mov	r24, r17
     93a:	0e 94 b7 02 	call	0x56e	; 0x56e <food_at>
		remove_food(foodID);
     93e:	0e 94 97 03 	call	0x72e	; 0x72e <remove_food>
		add_to_score(3);
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <add_to_score>
		time_elapse -= 15;
     94a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <time_elapse>
     94e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <time_elapse+0x1>
     952:	0f 97       	sbiw	r24, 0x0f	; 15
     954:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <time_elapse+0x1>
     958:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <time_elapse>
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     95c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <add_food_item>
     960:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     962:	0e 94 2f 05 	call	0xa5e	; 0xa5e <is_position_valid>
     966:	88 23       	and	r24, r24
     968:	21 f0       	breq	.+8      	; 0x972 <attempt_to_move_snake_forward+0x62>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     96a:	63 e3       	ldi	r22, 0x33	; 51
     96c:	80 2f       	mov	r24, r16
     96e:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
		
		// We don't remove the eaten food from the display since we'll just
		// display the snake head at that position.
	}
	
	if (move_result == ATE_SUPERFOOD) {
     972:	c4 30       	cpi	r28, 0x04	; 4
     974:	39 f4       	brne	.+14     	; 0x984 <attempt_to_move_snake_forward+0x74>
		add_to_score(10);
     976:	8a e0       	ldi	r24, 0x0A	; 10
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <add_to_score>
		attempt_to_remove_superfood();
     97e:	0e 94 75 04 	call	0x8ea	; 0x8ea <attempt_to_remove_superfood>
     982:	08 c0       	rjmp	.+16     	; 0x994 <attempt_to_move_snake_forward+0x84>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     984:	cd 7f       	andi	r28, 0xFD	; 253
     986:	c1 30       	cpi	r28, 0x01	; 1
     988:	29 f4       	brne	.+10     	; 0x994 <attempt_to_move_snake_forward+0x84>
		PosnType prev_tail_posn = advance_snake_tail();
     98a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	}
	
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     994:	60 ef       	ldi	r22, 0xF0	; 240
     996:	8d 2f       	mov	r24, r29
     998:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     99c:	6f e0       	ldi	r22, 0x0F	; 15
     99e:	81 2f       	mov	r24, r17
     9a0:	0e 94 09 04 	call	0x812	; 0x812 <update_display_at_position>
	return 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <attempt_to_move_snake_forward+0x9a>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <get_time_elapse>:
	}
}

int get_time_elapse(void){
	return time_elapse;
}
     9b4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <time_elapse>
     9b8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <time_elapse+0x1>
     9bc:	08 95       	ret

000009be <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <spi_setup_master>
     9c4:	08 95       	ret

000009c6 <ledmatrix_update_pixel>:
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	80 31       	cpi	r24, 0x10	; 16
     9ce:	b0 f4       	brcc	.+44     	; 0x9fc <ledmatrix_update_pixel+0x36>
     9d0:	68 30       	cpi	r22, 0x08	; 8
     9d2:	a0 f4       	brcc	.+40     	; 0x9fc <ledmatrix_update_pixel+0x36>
     9d4:	14 2f       	mov	r17, r20
     9d6:	c6 2f       	mov	r28, r22
     9d8:	d8 2f       	mov	r29, r24
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     9e0:	6c 2f       	mov	r22, r28
     9e2:	67 70       	andi	r22, 0x07	; 7
     9e4:	80 e1       	ldi	r24, 0x10	; 16
     9e6:	68 9f       	mul	r22, r24
     9e8:	90 01       	movw	r18, r0
     9ea:	11 24       	eor	r1, r1
     9ec:	8d 2f       	mov	r24, r29
     9ee:	8f 70       	andi	r24, 0x0F	; 15
     9f0:	82 2b       	or	r24, r18
     9f2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     9f6:	81 2f       	mov	r24, r17
     9f8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	08 95       	ret

00000a04 <ledmatrix_update_column>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	80 31       	cpi	r24, 0x10	; 16
     a0e:	90 f4       	brcc	.+36     	; 0xa34 <ledmatrix_update_column+0x30>
     a10:	8b 01       	movw	r16, r22
     a12:	c8 2f       	mov	r28, r24
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     a1a:	8c 2f       	mov	r24, r28
     a1c:	8f 70       	andi	r24, 0x0F	; 15
     a1e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     a22:	e8 01       	movw	r28, r16
     a24:	08 5f       	subi	r16, 0xF8	; 248
     a26:	1f 4f       	sbci	r17, 0xFF	; 255
     a28:	89 91       	ld	r24, Y+
     a2a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     a2e:	c0 17       	cp	r28, r16
     a30:	d1 07       	cpc	r29, r17
     a32:	d1 f7       	brne	.-12     	; 0xa28 <ledmatrix_update_column+0x24>
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <ledmatrix_shift_display_left>:
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     a4a:	08 95       	ret

00000a4c <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     a4c:	8f e0       	ldi	r24, 0x0F	; 15
     a4e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <spi_send_byte>
     a52:	08 95       	ret

00000a54 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     a54:	82 95       	swap	r24
     a56:	8f 70       	andi	r24, 0x0F	; 15
     a58:	08 95       	ret

00000a5a <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     a5a:	8f 70       	andi	r24, 0x0F	; 15
     a5c:	08 95       	ret

00000a5e <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     a5e:	83 fb       	bst	r24, 3
     a60:	88 27       	eor	r24, r24
     a62:	80 f9       	bld	r24, 0
}
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	89 27       	eor	r24, r25
     a68:	08 95       	ret

00000a6a <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     a6a:	20 e1       	ldi	r18, 0x10	; 16
     a6c:	82 9f       	mul	r24, r18
     a6e:	c0 01       	movw	r24, r0
     a70:	11 24       	eor	r1, r1
     a72:	67 70       	andi	r22, 0x07	; 7
}
     a74:	86 2b       	or	r24, r22
     a76:	08 95       	ret

00000a78 <initialise_hardware>:
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTD = digit;
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     a78:	0e 94 df 04 	call	0x9be	; 0x9be <ledmatrix_setup>
     a7c:	0e 94 24 02 	call	0x448	; 0x448 <init_button_interrupts>
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	7b e4       	ldi	r23, 0x4B	; 75
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <init_serial_stdio>
     a8e:	0e 94 c6 0c 	call	0x198c	; 0x198c <init_timer0>
     a92:	0e 94 38 0b 	call	0x1670	; 0x1670 <init_SSD>
     a96:	78 94       	sei
     a98:	08 95       	ret

00000a9a <splash_screen>:
}

void splash_screen(void) {
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 a7 0c 	call	0x194e	; 0x194e <set_display_attribute>
	clear_terminal();
     aaa:	0e 94 9e 0c 	call	0x193c	; 0x193c <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     aae:	0e 94 b4 0c 	call	0x1968	; 0x1968 <hide_cursor>
	move_cursor(3,3);
     ab2:	63 e0       	ldi	r22, 0x03	; 3
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	0e 94 85 0c 	call	0x190a	; 0x190a <move_cursor>
	printf_P(PSTR("Snake"));
     aba:	83 e6       	ldi	r24, 0x63	; 99
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	
	move_cursor(3,5);
     ac6:	65 e0       	ldi	r22, 0x05	; 5
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	0e 94 85 0c 	call	0x190a	; 0x190a <move_cursor>
	// Modify the following line
	show_leaders();
     ace:	0e 94 26 08 	call	0x104c	; 0x104c <show_leaders>
	set_display_attribute(FG_GREEN);	// Make the text green
     ad2:	80 e2       	ldi	r24, 0x20	; 32
     ad4:	0e 94 a7 0c 	call	0x194e	; 0x194e <set_display_attribute>
	printf_P(PSTR("CSSE2010/7201 Snake Project by Sean Lim"));
     ad8:	8b e3       	ldi	r24, 0x3B	; 59
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>

	set_display_attribute(FG_WHITE);	// Return to default colour (White)	
     ae4:	85 e2       	ldi	r24, 0x25	; 37
     ae6:	0e 94 a7 0c 	call	0x194e	; 0x194e <set_display_attribute>
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     aea:	0e 94 26 05 	call	0xa4c	; 0xa4c <ledmatrix_clear>
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     af6:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     af8:	0f 2e       	mov	r0, r31
     afa:	ff e0       	ldi	r31, 0x0F	; 15
     afc:	ff 2e       	mov	r15, r31
     afe:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     b00:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     b02:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     b04:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
     b06:	6c 2f       	mov	r22, r28
     b08:	85 e5       	ldi	r24, 0x55	; 85
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 19 09 	call	0x1232	; 0x1232 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     b10:	0d c0       	rjmp	.+26     	; 0xb2c <splash_screen+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b12:	2f e7       	ldi	r18, 0x7F	; 127
     b14:	8c e2       	ldi	r24, 0x2C	; 44
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	21 50       	subi	r18, 0x01	; 1
     b1a:	80 40       	sbci	r24, 0x00	; 0
     b1c:	90 40       	sbci	r25, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <splash_screen+0x7e>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <splash_screen+0x88>
     b22:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     b24:	0e 94 35 02 	call	0x46a	; 0x46a <button_pushed>
     b28:	8f 3f       	cpi	r24, 0xFF	; 255
     b2a:	a9 f5       	brne	.+106    	; 0xb96 <splash_screen+0xfc>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     b2c:	0e 94 28 09 	call	0x1250	; 0x1250 <scroll_display>
     b30:	81 11       	cpse	r24, r1
     b32:	ef cf       	rjmp	.-34     	; 0xb12 <splash_screen+0x78>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     b34:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <random>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	83 70       	andi	r24, 0x03	; 3
     b3e:	99 27       	eor	r25, r25
     b40:	aa 27       	eor	r26, r26
     b42:	b0 78       	andi	r27, 0x80	; 128
     b44:	bb 23       	and	r27, r27
     b46:	54 f4       	brge	.+20     	; 0xb5c <splash_screen+0xc2>
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	a1 09       	sbc	r26, r1
     b4c:	b1 09       	sbc	r27, r1
     b4e:	8c 6f       	ori	r24, 0xFC	; 252
     b50:	9f 6f       	ori	r25, 0xFF	; 255
     b52:	af 6f       	ori	r26, 0xFF	; 255
     b54:	bf 6f       	ori	r27, 0xFF	; 255
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	a1 1d       	adc	r26, r1
     b5a:	b1 1d       	adc	r27, r1
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	91 05       	cpc	r25, r1
     b60:	a1 05       	cpc	r26, r1
     b62:	b1 05       	cpc	r27, r1
     b64:	91 f0       	breq	.+36     	; 0xb8a <splash_screen+0xf0>
     b66:	2c f4       	brge	.+10     	; 0xb72 <splash_screen+0xd8>
     b68:	89 2b       	or	r24, r25
     b6a:	8a 2b       	or	r24, r26
     b6c:	8b 2b       	or	r24, r27
     b6e:	59 f0       	breq	.+22     	; 0xb86 <splash_screen+0xec>
     b70:	ca cf       	rjmp	.-108    	; 0xb06 <splash_screen+0x6c>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	49 f0       	breq	.+18     	; 0xb8e <splash_screen+0xf4>
     b7c:	03 97       	sbiw	r24, 0x03	; 3
     b7e:	a1 05       	cpc	r26, r1
     b80:	b1 05       	cpc	r27, r1
     b82:	39 f0       	breq	.+14     	; 0xb92 <splash_screen+0xf8>
     b84:	c0 cf       	rjmp	.-128    	; 0xb06 <splash_screen+0x6c>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     b86:	cd 2f       	mov	r28, r29
     b88:	be cf       	rjmp	.-132    	; 0xb06 <splash_screen+0x6c>
			case 1: colour = COLOUR_RED; break;
     b8a:	cf 2d       	mov	r28, r15
     b8c:	bc cf       	rjmp	.-136    	; 0xb06 <splash_screen+0x6c>
			case 2: colour = COLOUR_YELLOW; break;
     b8e:	c0 2f       	mov	r28, r16
     b90:	ba cf       	rjmp	.-140    	; 0xb06 <splash_screen+0x6c>
			case 3: colour = COLOUR_GREEN; break;
     b92:	c1 2f       	mov	r28, r17
     b94:	b8 cf       	rjmp	.-144    	; 0xb06 <splash_screen+0x6c>
		}
	}
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	08 95       	ret

00000ba2 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     ba2:	0e 94 9e 0c 	call	0x193c	; 0x193c <clear_terminal>
	
	// Initialise the game and display
	init_game();
     ba6:	0e 94 1c 04 	call	0x838	; 0x838 <init_game>
		
	// Initialise the score
	init_score();
     baa:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     bae:	0e 94 32 02 	call	0x464	; 0x464 <empty_button_queue>
	clear_serial_input_buffer();
     bb2:	0e 94 9e 0a 	call	0x153c	; 0x153c <clear_serial_input_buffer>
     bb6:	08 95       	ret

00000bb8 <play_game>:
}

void play_game(void) {
     bb8:	2f 92       	push	r2
     bba:	3f 92       	push	r3
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	00 d0       	rcall	.+0      	; 0xbde <play_game+0x26>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <play_game+0x28>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <play_game+0x2a>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	
	uint32_t last_superfood_time;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();	
     be6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     bea:	2b 01       	movw	r4, r22
     bec:	3c 01       	movw	r6, r24
	
	last_superfood_time = get_clock_ticks();
     bee:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     bf2:	6b 01       	movw	r12, r22
     bf4:	7c 01       	movw	r14, r24
	
	last_rat_move_time = get_clock_ticks();
     bf6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     bfa:	69 83       	std	Y+1, r22	; 0x01
     bfc:	7a 83       	std	Y+2, r23	; 0x02
     bfe:	8b 83       	std	Y+3, r24	; 0x03
     c00:	9c 83       	std	Y+4, r25	; 0x04
	uint32_t last_rat_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	int superfood_available = 0;
     c02:	21 2c       	mov	r2, r1
     c04:	31 2c       	mov	r3, r1
void play_game(void) {
	uint32_t last_move_time;
	uint32_t last_rat_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     c06:	1d 82       	std	Y+5, r1	; 0x05
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     c08:	0e 94 35 02 	call	0x46a	; 0x46a <button_pushed>
     c0c:	8e 83       	std	Y+6, r24	; 0x06
		
		if(button == -1) {
     c0e:	8f 3f       	cpi	r24, 0xFF	; 255
     c10:	31 f5       	brne	.+76     	; 0xc5e <play_game+0xa6>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     c12:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_input_available>
     c16:	88 23       	and	r24, r24
     c18:	29 f1       	breq	.+74     	; 0xc64 <play_game+0xac>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     c1a:	ec eb       	ldi	r30, 0xBC	; 188
     c1c:	f2 e0       	ldi	r31, 0x02	; 2
     c1e:	80 81       	ld	r24, Z
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <fgetc>
     c26:	08 2f       	mov	r16, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     c28:	fd 81       	ldd	r31, Y+5	; 0x05
     c2a:	f1 11       	cpse	r31, r1
     c2c:	07 c0       	rjmp	.+14     	; 0xc3c <play_game+0x84>
     c2e:	8b 31       	cpi	r24, 0x1B	; 27
     c30:	e1 f4       	brne	.+56     	; 0xc6a <play_game+0xb2>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	2d 83       	std	Y+5, r18	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     c36:	1f ef       	ldi	r17, 0xFF	; 255
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
     c38:	0f ef       	ldi	r16, 0xFF	; 255
     c3a:	1e c0       	rjmp	.+60     	; 0xc78 <play_game+0xc0>
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     c3c:	3d 81       	ldd	r19, Y+5	; 0x05
     c3e:	31 30       	cpi	r19, 0x01	; 1
     c40:	39 f4       	brne	.+14     	; 0xc50 <play_game+0x98>
     c42:	8b 35       	cpi	r24, 0x5B	; 91
     c44:	a1 f4       	brne	.+40     	; 0xc6e <play_game+0xb6>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     c46:	42 e0       	ldi	r20, 0x02	; 2
     c48:	4d 83       	std	Y+5, r20	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     c4a:	1f ef       	ldi	r17, 0xFF	; 255
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
     c4c:	0f ef       	ldi	r16, 0xFF	; 255
     c4e:	14 c0       	rjmp	.+40     	; 0xc78 <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
     c50:	5d 81       	ldd	r21, Y+5	; 0x05
     c52:	52 30       	cpi	r21, 0x02	; 2
     c54:	79 f4       	brne	.+30     	; 0xc74 <play_game+0xbc>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     c56:	18 2f       	mov	r17, r24
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
     c58:	1d 82       	std	Y+5, r1	; 0x05
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
     c5a:	0f ef       	ldi	r16, 0xFF	; 255
     c5c:	0d c0       	rjmp	.+26     	; 0xc78 <play_game+0xc0>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     c5e:	1f ef       	ldi	r17, 0xFF	; 255
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     c60:	0f ef       	ldi	r16, 0xFF	; 255
     c62:	0a c0       	rjmp	.+20     	; 0xc78 <play_game+0xc0>
		escape_sequence_char = -1;
     c64:	1f ef       	ldi	r17, 0xFF	; 255
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     c66:	0f ef       	ldi	r16, 0xFF	; 255
     c68:	07 c0       	rjmp	.+14     	; 0xc78 <play_game+0xc0>
		escape_sequence_char = -1;
     c6a:	1f ef       	ldi	r17, 0xFF	; 255
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <play_game+0xc0>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     c6e:	1d 82       	std	Y+5, r1	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     c70:	1f ef       	ldi	r17, 0xFF	; 255
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <play_game+0xc0>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     c74:	1d 82       	std	Y+5, r1	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     c76:	1f ef       	ldi	r17, 0xFF	; 255
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
		if (get_clock_ticks()%2 == 0){
     c78:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     c7c:	60 fd       	sbrc	r22, 0
     c7e:	16 c0       	rjmp	.+44     	; 0xcac <play_game+0xf4>
			display_digit(get_snake_length()%10, 0);
     c80:	0e 94 6f 0b 	call	0x16de	; 0x16de <get_snake_length>

}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTD = digit;
     c84:	1b b8       	out	0x0b, r1	; 11
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     c86:	ed ec       	ldi	r30, 0xCD	; 205
     c88:	8e 9f       	mul	r24, r30
     c8a:	91 2d       	mov	r25, r1
     c8c:	11 24       	eor	r1, r1
     c8e:	96 95       	lsr	r25
     c90:	96 95       	lsr	r25
     c92:	96 95       	lsr	r25
     c94:	99 0f       	add	r25, r25
     c96:	29 2f       	mov	r18, r25
     c98:	22 0f       	add	r18, r18
     c9a:	22 0f       	add	r18, r18
     c9c:	92 0f       	add	r25, r18
     c9e:	89 1b       	sub	r24, r25
     ca0:	e8 2f       	mov	r30, r24
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	e6 5f       	subi	r30, 0xF6	; 246
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	80 81       	ld	r24, Z
     caa:	88 b9       	out	0x08, r24	; 8
			}
		}
		if (get_clock_ticks()%2 == 0){
			display_digit(get_snake_length()%10, 0);
		}
		if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
     cac:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     cb0:	25 e0       	ldi	r18, 0x05	; 5
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__udivmodsi4>
     cbc:	67 2b       	or	r22, r23
     cbe:	68 2b       	or	r22, r24
     cc0:	69 2b       	or	r22, r25
     cc2:	a1 f4       	brne	.+40     	; 0xcec <play_game+0x134>
     cc4:	0e 94 6f 0b 	call	0x16de	; 0x16de <get_snake_length>
     cc8:	8a 30       	cpi	r24, 0x0A	; 10
     cca:	80 f0       	brcs	.+32     	; 0xcec <play_game+0x134>
			display_digit(get_snake_length()/10, 1);
     ccc:	0e 94 6f 0b 	call	0x16de	; 0x16de <get_snake_length>

}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTD = digit;
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	fb b9       	out	0x0b, r31	; 11
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     cd4:	2d ec       	ldi	r18, 0xCD	; 205
     cd6:	82 9f       	mul	r24, r18
     cd8:	e1 2d       	mov	r30, r1
     cda:	11 24       	eor	r1, r1
     cdc:	e6 95       	lsr	r30
     cde:	e6 95       	lsr	r30
     ce0:	e6 95       	lsr	r30
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	e6 5f       	subi	r30, 0xF6	; 246
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	80 81       	ld	r24, Z
     cea:	88 b9       	out	0x08, r24	; 8
		if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
			display_digit(get_snake_length()/10, 1);
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     cec:	3e 81       	ldd	r19, Y+6	; 0x06
     cee:	33 23       	and	r19, r19
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <play_game+0x13e>
     cf2:	13 34       	cpi	r17, 0x43	; 67
     cf4:	21 f4       	brne	.+8      	; 0xcfe <play_game+0x146>
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	0e 94 89 0b 	call	0x1712	; 0x1712 <set_snake_dirn>
     cfc:	77 c0       	rjmp	.+238    	; 0xdec <play_game+0x234>
		} else  if (button==2 || escape_sequence_char == 'A') {
     cfe:	4e 81       	ldd	r20, Y+6	; 0x06
     d00:	42 30       	cpi	r20, 0x02	; 2
     d02:	11 f0       	breq	.+4      	; 0xd08 <play_game+0x150>
     d04:	11 34       	cpi	r17, 0x41	; 65
     d06:	21 f4       	brne	.+8      	; 0xd10 <play_game+0x158>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 89 0b 	call	0x1712	; 0x1712 <set_snake_dirn>
     d0e:	6e c0       	rjmp	.+220    	; 0xdec <play_game+0x234>
		} else if(button==3 || escape_sequence_char=='D') {
     d10:	5e 81       	ldd	r21, Y+6	; 0x06
     d12:	53 30       	cpi	r21, 0x03	; 3
     d14:	11 f0       	breq	.+4      	; 0xd1a <play_game+0x162>
     d16:	14 34       	cpi	r17, 0x44	; 68
     d18:	21 f4       	brne	.+8      	; 0xd22 <play_game+0x16a>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	0e 94 89 0b 	call	0x1712	; 0x1712 <set_snake_dirn>
     d20:	65 c0       	rjmp	.+202    	; 0xdec <play_game+0x234>
		} else if (button==1 || escape_sequence_char == 'B') {
     d22:	8e 81       	ldd	r24, Y+6	; 0x06
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	11 f0       	breq	.+4      	; 0xd2c <play_game+0x174>
     d28:	12 34       	cpi	r17, 0x42	; 66
     d2a:	21 f4       	brne	.+8      	; 0xd34 <play_game+0x17c>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	0e 94 89 0b 	call	0x1712	; 0x1712 <set_snake_dirn>
     d32:	5c c0       	rjmp	.+184    	; 0xdec <play_game+0x234>
		} else if(serial_input == 'p' || serial_input == 'P') {
     d34:	0f 7d       	andi	r16, 0xDF	; 223
     d36:	00 35       	cpi	r16, 0x50	; 80
     d38:	09 f0       	breq	.+2      	; 0xd3c <play_game+0x184>
     d3a:	58 c0       	rjmp	.+176    	; 0xdec <play_game+0x234>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again. All other input (buttons, serial etc.) must be ignored.
			uint32_t unpause_timer = get_clock_ticks()-last_move_time; //time until snake should move again
     d3c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     d40:	4b 01       	movw	r8, r22
     d42:	5c 01       	movw	r10, r24
     d44:	84 18       	sub	r8, r4
     d46:	95 08       	sbc	r9, r5
     d48:	a6 08       	sbc	r10, r6
     d4a:	b7 08       	sbc	r11, r7
			char new_serial_input;
			while(1){
				if (get_clock_ticks()%2 == 0){
     d4c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     d50:	60 fd       	sbrc	r22, 0
     d52:	16 c0       	rjmp	.+44     	; 0xd80 <play_game+0x1c8>
					display_digit(get_snake_length()%10, 0);
     d54:	0e 94 6f 0b 	call	0x16de	; 0x16de <get_snake_length>

}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTD = digit;
     d58:	1b b8       	out	0x0b, r1	; 11
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     d5a:	ed ec       	ldi	r30, 0xCD	; 205
     d5c:	8e 9f       	mul	r24, r30
     d5e:	91 2d       	mov	r25, r1
     d60:	11 24       	eor	r1, r1
     d62:	96 95       	lsr	r25
     d64:	96 95       	lsr	r25
     d66:	96 95       	lsr	r25
     d68:	99 0f       	add	r25, r25
     d6a:	29 2f       	mov	r18, r25
     d6c:	22 0f       	add	r18, r18
     d6e:	22 0f       	add	r18, r18
     d70:	92 0f       	add	r25, r18
     d72:	89 1b       	sub	r24, r25
     d74:	e8 2f       	mov	r30, r24
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	e6 5f       	subi	r30, 0xF6	; 246
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	80 81       	ld	r24, Z
     d7e:	88 b9       	out	0x08, r24	; 8
			char new_serial_input;
			while(1){
				if (get_clock_ticks()%2 == 0){
					display_digit(get_snake_length()%10, 0);
				}
				if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
     d80:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     d84:	25 e0       	ldi	r18, 0x05	; 5
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__udivmodsi4>
     d90:	67 2b       	or	r22, r23
     d92:	68 2b       	or	r22, r24
     d94:	69 2b       	or	r22, r25
     d96:	a1 f4       	brne	.+40     	; 0xdc0 <play_game+0x208>
     d98:	0e 94 6f 0b 	call	0x16de	; 0x16de <get_snake_length>
     d9c:	8a 30       	cpi	r24, 0x0A	; 10
     d9e:	80 f0       	brcs	.+32     	; 0xdc0 <play_game+0x208>
					display_digit(get_snake_length()/10, 1);
     da0:	0e 94 6f 0b 	call	0x16de	; 0x16de <get_snake_length>

}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTD = digit;
     da4:	f1 e0       	ldi	r31, 0x01	; 1
     da6:	fb b9       	out	0x0b, r31	; 11
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     da8:	2d ec       	ldi	r18, 0xCD	; 205
     daa:	82 9f       	mul	r24, r18
     dac:	e1 2d       	mov	r30, r1
     dae:	11 24       	eor	r1, r1
     db0:	e6 95       	lsr	r30
     db2:	e6 95       	lsr	r30
     db4:	e6 95       	lsr	r30
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	e6 5f       	subi	r30, 0xF6	; 246
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	80 81       	ld	r24, Z
     dbe:	88 b9       	out	0x08, r24	; 8
				}
				if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
					display_digit(get_snake_length()/10, 1);
				}
				
				if(serial_input_available()){
     dc0:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_input_available>
     dc4:	88 23       	and	r24, r24
     dc6:	11 f2       	breq	.-124    	; 0xd4c <play_game+0x194>
					new_serial_input = fgetc(stdin);
     dc8:	ec eb       	ldi	r30, 0xBC	; 188
     dca:	f2 e0       	ldi	r31, 0x02	; 2
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <fgetc>
					if (new_serial_input == 'p' || new_serial_input == 'P'){
     dd4:	8f 7d       	andi	r24, 0xDF	; 223
     dd6:	80 35       	cpi	r24, 0x50	; 80
     dd8:	09 f0       	breq	.+2      	; 0xddc <play_game+0x224>
     dda:	b8 cf       	rjmp	.-144    	; 0xd4c <play_game+0x194>
						last_move_time = get_clock_ticks()-(unpause_timer);
     ddc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     de0:	2b 01       	movw	r4, r22
     de2:	3c 01       	movw	r6, r24
     de4:	48 18       	sub	r4, r8
     de6:	59 08       	sbc	r5, r9
     de8:	6a 08       	sbc	r6, r10
     dea:	7b 08       	sbc	r7, r11
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_time_elapse()) {
     dec:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     df0:	4b 01       	movw	r8, r22
     df2:	5c 01       	movw	r10, r24
     df4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_time_elapse>
     df8:	09 2e       	mov	r0, r25
     dfa:	00 0c       	add	r0, r0
     dfc:	aa 0b       	sbc	r26, r26
     dfe:	bb 0b       	sbc	r27, r27
     e00:	84 0d       	add	r24, r4
     e02:	95 1d       	adc	r25, r5
     e04:	a6 1d       	adc	r26, r6
     e06:	b7 1d       	adc	r27, r7
     e08:	88 16       	cp	r8, r24
     e0a:	99 06       	cpc	r9, r25
     e0c:	aa 06       	cpc	r10, r26
     e0e:	bb 06       	cpc	r11, r27
     e10:	48 f0       	brcs	.+18     	; 0xe24 <play_game+0x26c>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
     e12:	0e 94 88 04 	call	0x910	; 0x910 <attempt_to_move_snake_forward>
     e16:	88 23       	and	r24, r24
     e18:	09 f4       	brne	.+2      	; 0xe1c <play_game+0x264>
     e1a:	64 c0       	rjmp	.+200    	; 0xee4 <play_game+0x32c>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
     e1c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     e20:	2b 01       	movw	r4, r22
     e22:	3c 01       	movw	r6, r24
		}
		
		if (get_clock_ticks() >= last_superfood_time+superfood_interval) {
     e24:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     e28:	97 01       	movw	r18, r14
     e2a:	86 01       	movw	r16, r12
     e2c:	08 56       	subi	r16, 0x68	; 104
     e2e:	15 4c       	sbci	r17, 0xC5	; 197
     e30:	2f 4f       	sbci	r18, 0xFF	; 255
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	60 17       	cp	r22, r16
     e36:	71 07       	cpc	r23, r17
     e38:	82 07       	cpc	r24, r18
     e3a:	93 07       	cpc	r25, r19
     e3c:	d0 f0       	brcs	.+52     	; 0xe72 <play_game+0x2ba>
			//spawn superfood
			if (!attempt_to_spawn_superfood()) {
     e3e:	0e 94 66 04 	call	0x8cc	; 0x8cc <attempt_to_spawn_superfood>
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <play_game+0x290>
     e46:	4e c0       	rjmp	.+156    	; 0xee4 <play_game+0x32c>
				break;
			}
			last_superfood_time = get_clock_ticks();
     e48:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     e4c:	6b 01       	movw	r12, r22
     e4e:	7c 01       	movw	r14, r24
			superfood_available = 1;
		}
		
		if (get_clock_ticks() >= last_superfood_time+superfood_disappearance_interval && superfood_available) {
     e50:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     e54:	97 01       	movw	r18, r14
     e56:	86 01       	movw	r16, r12
     e58:	08 57       	subi	r16, 0x78	; 120
     e5a:	1c 4e       	sbci	r17, 0xEC	; 236
     e5c:	2f 4f       	sbci	r18, 0xFF	; 255
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	60 17       	cp	r22, r16
     e62:	71 07       	cpc	r23, r17
     e64:	82 07       	cpc	r24, r18
     e66:	93 07       	cpc	r25, r19
     e68:	a0 f4       	brcc	.+40     	; 0xe92 <play_game+0x2da>
			//spawn superfood
			if (!attempt_to_spawn_superfood()) {
				break;
			}
			last_superfood_time = get_clock_ticks();
			superfood_available = 1;
     e6a:	22 24       	eor	r2, r2
     e6c:	23 94       	inc	r2
     e6e:	31 2c       	mov	r3, r1
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <play_game+0x2e2>
		}
		
		if (get_clock_ticks() >= last_superfood_time+superfood_disappearance_interval && superfood_available) {
     e72:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     e76:	97 01       	movw	r18, r14
     e78:	86 01       	movw	r16, r12
     e7a:	08 57       	subi	r16, 0x78	; 120
     e7c:	1c 4e       	sbci	r17, 0xEC	; 236
     e7e:	2f 4f       	sbci	r18, 0xFF	; 255
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	60 17       	cp	r22, r16
     e84:	71 07       	cpc	r23, r17
     e86:	82 07       	cpc	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	38 f0       	brcs	.+14     	; 0xe9a <play_game+0x2e2>
     e8c:	21 14       	cp	r2, r1
     e8e:	31 04       	cpc	r3, r1
     e90:	21 f0       	breq	.+8      	; 0xe9a <play_game+0x2e2>
			attempt_to_remove_superfood();
     e92:	0e 94 75 04 	call	0x8ea	; 0x8ea <attempt_to_remove_superfood>
			superfood_available = 0;
     e96:	21 2c       	mov	r2, r1
     e98:	31 2c       	mov	r3, r1
		}
		
		if (get_clock_ticks() >= last_rat_move_time + get_time_elapse()*2){
     e9a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     e9e:	4b 01       	movw	r8, r22
     ea0:	5c 01       	movw	r10, r24
     ea2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_time_elapse>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	09 2e       	mov	r0, r25
     eac:	00 0c       	add	r0, r0
     eae:	aa 0b       	sbc	r26, r26
     eb0:	bb 0b       	sbc	r27, r27
     eb2:	29 81       	ldd	r18, Y+1	; 0x01
     eb4:	3a 81       	ldd	r19, Y+2	; 0x02
     eb6:	4b 81       	ldd	r20, Y+3	; 0x03
     eb8:	5c 81       	ldd	r21, Y+4	; 0x04
     eba:	82 0f       	add	r24, r18
     ebc:	93 1f       	adc	r25, r19
     ebe:	a4 1f       	adc	r26, r20
     ec0:	b5 1f       	adc	r27, r21
     ec2:	88 16       	cp	r8, r24
     ec4:	99 06       	cpc	r9, r25
     ec6:	aa 06       	cpc	r10, r26
     ec8:	bb 06       	cpc	r11, r27
     eca:	08 f4       	brcc	.+2      	; 0xece <play_game+0x316>
     ecc:	9d ce       	rjmp	.-710    	; 0xc08 <play_game+0x50>
			if (!attempt_to_move_rat()) {
     ece:	0e 94 45 04 	call	0x88a	; 0x88a <attempt_to_move_rat>
     ed2:	88 23       	and	r24, r24
     ed4:	39 f0       	breq	.+14     	; 0xee4 <play_game+0x32c>
				break;
			}
			last_rat_move_time = get_clock_ticks();
     ed6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_clock_ticks>
     eda:	69 83       	std	Y+1, r22	; 0x01
     edc:	7a 83       	std	Y+2, r23	; 0x02
     ede:	8b 83       	std	Y+3, r24	; 0x03
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	92 ce       	rjmp	.-732    	; 0xc08 <play_game+0x50>
		}
	}
	// If we get here the game is over. 
}
     ee4:	26 96       	adiw	r28, 0x06	; 6
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	9f 90       	pop	r9
     f06:	8f 90       	pop	r8
     f08:	7f 90       	pop	r7
     f0a:	6f 90       	pop	r6
     f0c:	5f 90       	pop	r5
     f0e:	4f 90       	pop	r4
     f10:	3f 90       	pop	r3
     f12:	2f 90       	pop	r2
     f14:	08 95       	ret

00000f16 <handle_game_over>:


void handle_game_over() {
	move_cursor(10,5);
     f16:	65 e0       	ldi	r22, 0x05	; 5
     f18:	8a e0       	ldi	r24, 0x0A	; 10
     f1a:	0e 94 85 0c 	call	0x190a	; 0x190a <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER\n"));
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	9f 93       	push	r25
     f24:	8f 93       	push	r24
     f26:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	uint8_t high_score = is_leader();
     f2a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <is_leader>
	if (high_score){
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	88 23       	and	r24, r24
     f34:	99 f1       	breq	.+102    	; 0xf9c <handle_game_over+0x86>
		move_cursor(10,7);
     f36:	67 e0       	ldi	r22, 0x07	; 7
     f38:	8a e0       	ldi	r24, 0x0A	; 10
     f3a:	0e 94 85 0c 	call	0x190a	; 0x190a <move_cursor>
		printf_P(PSTR("\n"));
     f3e:	8e e2       	ldi	r24, 0x2E	; 46
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
		printf_P(PSTR("********************************\n"));
     f4a:	8c e0       	ldi	r24, 0x0C	; 12
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	9f 93       	push	r25
     f50:	8f 93       	push	r24
     f52:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
		printf_P(PSTR("*  Congratulations!            *\n"));
     f56:	8a ee       	ldi	r24, 0xEA	; 234
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
		printf_P(PSTR("*  You are on the leader board.*\n"));
     f62:	88 ec       	ldi	r24, 0xC8	; 200
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
		printf_P(PSTR("********************************\n"));
     f6e:	86 ea       	ldi	r24, 0xA6	; 166
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9f 93       	push	r25
     f74:	8f 93       	push	r24
     f76:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
		printf_P(PSTR("Your Name: "));
     f7a:	8a e9       	ldi	r24, 0x9A	; 154
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9f 93       	push	r25
     f80:	8f 93       	push	r24
     f82:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
		show_cursor();
     f86:	0e 94 bd 0c 	call	0x197a	; 0x197a <show_cursor>
     f8a:	8d b7       	in	r24, 0x3d	; 61
     f8c:	9e b7       	in	r25, 0x3e	; 62
     f8e:	0c 96       	adiw	r24, 0x0c	; 12
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	9e bf       	out	0x3e, r25	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	8d bf       	out	0x3d, r24	; 61
     f9a:	ff cf       	rjmp	.-2      	; 0xf9a <handle_game_over+0x84>
		for (;;) {
		}
		write_leaders();
	}
	
	move_cursor(10,20);
     f9c:	64 e1       	ldi	r22, 0x14	; 20
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	0e 94 85 0c 	call	0x190a	; 0x190a <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     fa4:	8c e7       	ldi	r24, 0x7C	; 124
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9f 93       	push	r25
     faa:	8f 93       	push	r24
     fac:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	while(button_pushed() == -1) {
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0e 94 35 02 	call	0x46a	; 0x46a <button_pushed>
     fb8:	8f 3f       	cpi	r24, 0xFF	; 255
     fba:	e1 f3       	breq	.-8      	; 0xfb4 <handle_game_over+0x9e>
		; // wait until a button has been pushed
	}
	
     fbc:	08 95       	ret

00000fbe <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     fbe:	0e 94 3c 05 	call	0xa78	; 0xa78 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     fc2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <splash_screen>
//	handle_game_over();
	
	while(1) {
		new_game();
     fc6:	0e 94 d1 05 	call	0xba2	; 0xba2 <new_game>
		play_game();
     fca:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <play_game>
		handle_game_over();
     fce:	0e 94 8b 07 	call	0xf16	; 0xf16 <handle_game_over>
     fd2:	f9 cf       	rjmp	.-14     	; 0xfc6 <main+0x8>

00000fd4 <init_score>:
	printf_P(PSTR("Score: %ld"), score);
}

uint32_t get_score(void) {
	return score;
}
     fd4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <score>
     fd8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <score+0x1>
     fdc:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <score+0x2>
     fe0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <score+0x3>
     fe4:	08 95       	ret

00000fe6 <add_to_score>:
     fe6:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <score>
     fea:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <score+0x1>
     fee:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <score+0x2>
     ff2:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <score+0x3>
     ff6:	48 0f       	add	r20, r24
     ff8:	59 1f       	adc	r21, r25
     ffa:	61 1d       	adc	r22, r1
     ffc:	71 1d       	adc	r23, r1
     ffe:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <score>
    1002:	50 93 69 01 	sts	0x0169, r21	; 0x800169 <score+0x1>
    1006:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <score+0x2>
    100a:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <score+0x3>
    100e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <hide_cursor>
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	82 e3       	ldi	r24, 0x32	; 50
    1016:	0e 94 85 0c 	call	0x190a	; 0x190a <move_cursor>
    101a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <score+0x3>
    101e:	8f 93       	push	r24
    1020:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <score+0x2>
    1024:	8f 93       	push	r24
    1026:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <score+0x1>
    102a:	8f 93       	push	r24
    102c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <score>
    1030:	8f 93       	push	r24
    1032:	8e ef       	ldi	r24, 0xFE	; 254
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	9f 93       	push	r25
    1038:	8f 93       	push	r24
    103a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	08 95       	ret

0000104c <show_leaders>:

void show_leaders(){	
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
	  if ( !eeprom_is_ready () ) {
    1050:	f9 9b       	sbis	0x1f, 1	; 31
    1052:	0a c0       	rjmp	.+20     	; 0x1068 <show_leaders+0x1c>
		  printf_P (PSTR ("Waiting for EEPROM to become ready...\n"));
    1054:	87 ed       	ldi	r24, 0xD7	; 215
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	9f 93       	push	r25
    105a:	8f 93       	push	r24
    105c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
		  eeprom_busy_wait ();
    1064:	f9 99       	sbic	0x1f, 1	; 31
    1066:	fe cf       	rjmp	.-4      	; 0x1064 <show_leaders+0x18>
	  }
	  eeprom_read_block(leader1, leaderp1, NAME_SIZE);
    1068:	4a e0       	ldi	r20, 0x0A	; 10
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	6a e5       	ldi	r22, 0x5A	; 90
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	8e e3       	ldi	r24, 0x3E	; 62
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 45 11 	call	0x228a	; 0x228a <eeprom_read_block>
	  eeprom_read_block(leader2, leaderp2, NAME_SIZE);
    1078:	4a e0       	ldi	r20, 0x0A	; 10
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	66 e4       	ldi	r22, 0x46	; 70
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	86 e3       	ldi	r24, 0x36	; 54
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 45 11 	call	0x228a	; 0x228a <eeprom_read_block>
	  eeprom_read_block(leader3, leaderp3, NAME_SIZE);
    1088:	4a e0       	ldi	r20, 0x0A	; 10
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	62 e3       	ldi	r22, 0x32	; 50
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	8e e2       	ldi	r24, 0x2E	; 46
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	0e 94 45 11 	call	0x228a	; 0x228a <eeprom_read_block>
	  eeprom_read_block(leader4, leaderp4, NAME_SIZE);
    1098:	4a e0       	ldi	r20, 0x0A	; 10
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	6e e1       	ldi	r22, 0x1E	; 30
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	86 e2       	ldi	r24, 0x26	; 38
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 45 11 	call	0x228a	; 0x228a <eeprom_read_block>
	  eeprom_read_block(leader5, leaderp5, NAME_SIZE);
    10a8:	4a e0       	ldi	r20, 0x0A	; 10
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	8e e1       	ldi	r24, 0x1E	; 30
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 45 11 	call	0x228a	; 0x228a <eeprom_read_block>
	  printf_P(PSTR("\n"));
    10b8:	85 ed       	ldi	r24, 0xD5	; 213
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*******************************************\n"));
    10c4:	88 ea       	ldi	r24, 0xA8	; 168
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	9f 93       	push	r25
    10ca:	8f 93       	push	r24
    10cc:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*            Our Leader Board             *\n"));
    10d0:	8b e7       	ldi	r24, 0x7B	; 123
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	9f 93       	push	r25
    10d6:	8f 93       	push	r24
    10d8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*******************************************\n"));
    10dc:	8e e4       	ldi	r24, 0x4E	; 78
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	9f 93       	push	r25
    10e2:	8f 93       	push	r24
    10e4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*   First :  %s , Score: %u\n"), leader1, top1 = eeprom_read_word(topscore1));
    10e8:	80 91 08 00 	lds	r24, 0x0008	; 0x800008 <__TEXT_REGION_LENGTH__+0x7e0008>
    10ec:	90 91 09 00 	lds	r25, 0x0009	; 0x800009 <__TEXT_REGION_LENGTH__+0x7e0009>
    10f0:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_word>
    10f4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <top1>
    10f8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <top1+0x1>
    10fc:	9f 93       	push	r25
    10fe:	8f 93       	push	r24
    1100:	ce e3       	ldi	r28, 0x3E	; 62
    1102:	d1 e0       	ldi	r29, 0x01	; 1
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	81 e3       	ldi	r24, 0x31	; 49
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*   Second:  %s , Score: %u\n"), leader1, top2 = eeprom_read_word(topscore2));
    1114:	80 91 06 00 	lds	r24, 0x0006	; 0x800006 <__TEXT_REGION_LENGTH__+0x7e0006>
    1118:	90 91 07 00 	lds	r25, 0x0007	; 0x800007 <__TEXT_REGION_LENGTH__+0x7e0007>
    111c:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_word>
    1120:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <top2>
    1124:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <top2+0x1>
    1128:	9f 93       	push	r25
    112a:	8f 93       	push	r24
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	84 e1       	ldi	r24, 0x14	; 20
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*   Third :  %s , Score: %u\n"), leader1, top3 = eeprom_read_word(topscore3));
    113c:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    1140:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    1144:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_word>
    1148:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <top3>
    114c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <top3+0x1>
    1150:	9f 93       	push	r25
    1152:	8f 93       	push	r24
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	87 ef       	ldi	r24, 0xF7	; 247
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*   Fourth:  %s , Score: %u\n"), leader1, top4 = eeprom_read_word(topscore4));
    1164:	80 91 02 00 	lds	r24, 0x0002	; 0x800002 <__TEXT_REGION_LENGTH__+0x7e0002>
    1168:	90 91 03 00 	lds	r25, 0x0003	; 0x800003 <__TEXT_REGION_LENGTH__+0x7e0003>
    116c:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_word>
    1170:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <top4>
    1174:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <top4+0x1>
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	8a ed       	ldi	r24, 0xDA	; 218
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	9f 93       	push	r25
    1186:	8f 93       	push	r24
    1188:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*   Fifth :  %s , Score: %u\n"), leader1, top5 = eeprom_read_word(topscore5));
    118c:	8d b7       	in	r24, 0x3d	; 61
    118e:	9e b7       	in	r25, 0x3e	; 62
    1190:	80 96       	adiw	r24, 0x20	; 32
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	9e bf       	out	0x3e, r25	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	8d bf       	out	0x3d, r24	; 61
    119c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
    11a0:	90 91 01 00 	lds	r25, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
    11a4:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_word>
    11a8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <top5>
    11ac:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <top5+0x1>
    11b0:	9f 93       	push	r25
    11b2:	8f 93       	push	r24
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	8d eb       	ldi	r24, 0xBD	; 189
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
	  printf_P (PSTR ("*******************************************\n"));	  
    11c4:	80 e9       	ldi	r24, 0x90	; 144
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	9f 93       	push	r25
    11ca:	8f 93       	push	r24
    11cc:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
}
    11d0:	8d b7       	in	r24, 0x3d	; 61
    11d2:	9e b7       	in	r25, 0x3e	; 62
    11d4:	08 96       	adiw	r24, 0x08	; 8
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	9e bf       	out	0x3e, r25	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	8d bf       	out	0x3d, r24	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <is_leader>:

uint8_t is_leader(){
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
	if ( !eeprom_is_ready () ) {
    11ea:	f9 9b       	sbis	0x1f, 1	; 31
    11ec:	0a c0       	rjmp	.+20     	; 0x1202 <is_leader+0x1c>
		printf_P (PSTR ("Waiting for EEPROM to become ready...\n"));
    11ee:	89 e6       	ldi	r24, 0x69	; 105
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	9f 93       	push	r25
    11f4:	8f 93       	push	r24
    11f6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
		eeprom_busy_wait ();
    11fe:	f9 99       	sbic	0x1f, 1	; 31
    1200:	fe cf       	rjmp	.-4      	; 0x11fe <is_leader+0x18>
    1202:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <top5>
    1206:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <top5+0x1>
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <score>
    1214:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <score+0x1>
    1218:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <score+0x2>
    121c:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <score+0x3>
    1220:	40 17       	cp	r20, r16
    1222:	51 07       	cpc	r21, r17
    1224:	62 07       	cpc	r22, r18
    1226:	73 07       	cpc	r23, r19
    1228:	08 f0       	brcs	.+2      	; 0x122c <is_leader+0x46>
    122a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (score > top5) return 1; else return 0;
}
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	08 95       	ret

00001232 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1232:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <colour>
	display_string = string_to_display;
    1236:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <display_string+0x1>
    123a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <display_string>
	next_col_ptr = 0;
    123e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <next_col_ptr+0x1>
    1242:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <next_col_ptr>
	next_char_to_display = 0;
    1246:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <next_char_to_display+0x1>
    124a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <next_char_to_display>
    124e:	08 95       	ret

00001250 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	28 97       	sbiw	r28, 0x08	; 8
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1268:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <next_col_ptr>
    126c:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <next_col_ptr+0x1>
    1270:	30 97       	sbiw	r30, 0x00	; 0
    1272:	81 f0       	breq	.+32     	; 0x1294 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1274:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1276:	10 ff       	sbrs	r17, 0
    1278:	06 c0       	rjmp	.+12     	; 0x1286 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    127a:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <next_col_ptr+0x1>
    127e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	6b c0       	rjmp	.+214    	; 0x135c <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1286:	31 96       	adiw	r30, 0x01	; 1
    1288:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <next_col_ptr+0x1>
    128c:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1290:	00 e0       	ldi	r16, 0x00	; 0
    1292:	64 c0       	rjmp	.+200    	; 0x135c <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1294:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <next_char_to_display>
    1298:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <next_char_to_display+0x1>
    129c:	30 97       	sbiw	r30, 0x00	; 0
    129e:	09 f4       	brne	.+2      	; 0x12a2 <scroll_display+0x52>
    12a0:	49 c0       	rjmp	.+146    	; 0x1334 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    12a2:	cf 01       	movw	r24, r30
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <next_char_to_display+0x1>
    12aa:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <next_char_to_display>
    12ae:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    12b0:	e1 11       	cpse	r30, r1
    12b2:	0a c0       	rjmp	.+20     	; 0x12c8 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    12b4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <next_char_to_display+0x1>
    12b8:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <next_char_to_display>
			shift_countdown = 16;
    12bc:	80 e1       	ldi	r24, 0x10	; 16
    12be:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    12c2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	4a c0       	rjmp	.+148    	; 0x135c <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    12c8:	8f e9       	ldi	r24, 0x9F	; 159
    12ca:	8e 0f       	add	r24, r30
    12cc:	8a 31       	cpi	r24, 0x1A	; 26
    12ce:	70 f4       	brcc	.+28     	; 0x12ec <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	e5 5a       	subi	r30, 0xA5	; 165
    12d8:	fd 4f       	sbci	r31, 0xFD	; 253
    12da:	85 91       	lpm	r24, Z+
    12dc:	94 91       	lpm	r25, Z
    12de:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <next_col_ptr+0x1>
    12e2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    12e6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	38 c0       	rjmp	.+112    	; 0x135c <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    12ec:	8f eb       	ldi	r24, 0xBF	; 191
    12ee:	8e 0f       	add	r24, r30
    12f0:	8a 31       	cpi	r24, 0x1A	; 26
    12f2:	70 f4       	brcc	.+28     	; 0x1310 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	e5 56       	subi	r30, 0x65	; 101
    12fc:	fd 4f       	sbci	r31, 0xFD	; 253
    12fe:	85 91       	lpm	r24, Z+
    1300:	94 91       	lpm	r25, Z
    1302:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <next_col_ptr+0x1>
    1306:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    130a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    130c:	10 e0       	ldi	r17, 0x00	; 0
    130e:	26 c0       	rjmp	.+76     	; 0x135c <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1310:	80 ed       	ldi	r24, 0xD0	; 208
    1312:	8e 0f       	add	r24, r30
    1314:	8a 30       	cpi	r24, 0x0A	; 10
    1316:	00 f5       	brcc	.+64     	; 0x1358 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	e7 55       	subi	r30, 0x57	; 87
    1320:	fd 4f       	sbci	r31, 0xFD	; 253
    1322:	85 91       	lpm	r24, Z+
    1324:	94 91       	lpm	r25, Z
    1326:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <next_col_ptr+0x1>
    132a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    132e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1330:	10 e0       	ldi	r17, 0x00	; 0
    1332:	14 c0       	rjmp	.+40     	; 0x135c <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1334:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <display_string>
    1338:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    133c:	01 e0       	ldi	r16, 0x01	; 1
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	09 f0       	breq	.+2      	; 0x1344 <scroll_display+0xf4>
    1342:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1344:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <next_char_to_display+0x1>
    1348:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <next_char_to_display>
		display_string = 0;
    134c:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <display_string+0x1>
    1350:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1354:	10 e0       	ldi	r17, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1358:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    135a:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    135c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1360:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <colour>
    1364:	fe 01       	movw	r30, r28
    1366:	38 96       	adiw	r30, 0x08	; 8
    1368:	ce 01       	movw	r24, r28
    136a:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    136c:	11 23       	and	r17, r17
    136e:	14 f4       	brge	.+4      	; 0x1374 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1370:	20 83       	st	Z, r18
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1374:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1376:	11 0f       	add	r17, r17
    1378:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    137a:	e8 17       	cp	r30, r24
    137c:	f9 07       	cpc	r31, r25
    137e:	b1 f7       	brne	.-20     	; 0x136c <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1380:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1382:	be 01       	movw	r22, r28
    1384:	6f 5f       	subi	r22, 0xFF	; 255
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	8f e0       	ldi	r24, 0x0F	; 15
    138a:	0e 94 02 05 	call	0xa04	; 0xa04 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    138e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <shift_countdown.1854>
    1392:	88 23       	and	r24, r24
    1394:	89 f0       	breq	.+34     	; 0x13b8 <scroll_display+0x168>
		shift_countdown--;
    1396:	81 50       	subi	r24, 0x01	; 1
    1398:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    139c:	00 23       	and	r16, r16
    139e:	11 f0       	breq	.+4      	; 0x13a4 <scroll_display+0x154>
    13a0:	88 23       	and	r24, r24
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <scroll_display+0x158>
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <scroll_display+0x15e>
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <scroll_display+0x15e>
    13ac:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	99 23       	and	r25, r25
    13b2:	29 f0       	breq	.+10     	; 0x13be <scroll_display+0x16e>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    13b8:	00 23       	and	r16, r16
    13ba:	a1 f3       	breq	.-24     	; 0x13a4 <scroll_display+0x154>
    13bc:	f7 cf       	rjmp	.-18     	; 0x13ac <scroll_display+0x15c>
	return !finished;
}
    13be:	28 96       	adiw	r28, 0x08	; 8
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	08 95       	ret

000013d4 <uart_put_char>:
	return bytes_in_input_buffer;
}

uint8_t input_contents(){
	return input_buffer;
}
    13d4:	cf 93       	push	r28
    13d6:	c8 2f       	mov	r28, r24
    13d8:	8a 30       	cpi	r24, 0x0A	; 10
    13da:	19 f4       	brne	.+6      	; 0x13e2 <uart_put_char+0xe>
    13dc:	8d e0       	ldi	r24, 0x0D	; 13
    13de:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <uart_put_char>
    13e2:	9f b7       	in	r25, 0x3f	; 63
    13e4:	90 78       	andi	r25, 0x80	; 128
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <uart_put_char+0x18>
    13e8:	99 23       	and	r25, r25
    13ea:	29 f1       	breq	.+74     	; 0x1436 <uart_put_char+0x62>
    13ec:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    13f0:	8f 3f       	cpi	r24, 0xFF	; 255
    13f2:	d1 f3       	breq	.-12     	; 0x13e8 <uart_put_char+0x14>
    13f4:	f8 94       	cli
    13f6:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <out_insert_pos>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8e 0f       	add	r24, r30
    13fe:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <out_insert_pos>
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	e6 55       	subi	r30, 0x56	; 86
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	c0 83       	st	Z, r28
    140a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <bytes_in_out_buffer>
    1414:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <out_insert_pos>
    1418:	8f 3f       	cpi	r24, 0xFF	; 255
    141a:	11 f4       	brne	.+4      	; 0x1420 <uart_put_char+0x4c>
    141c:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <out_insert_pos>
    1420:	e1 ec       	ldi	r30, 0xC1	; 193
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 62       	ori	r24, 0x20	; 32
    1428:	80 83       	st	Z, r24
    142a:	99 23       	and	r25, r25
    142c:	39 f0       	breq	.+14     	; 0x143c <uart_put_char+0x68>
    142e:	78 94       	sei
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <uart_put_char+0x6c>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <uart_put_char+0x6c>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <uart_get_char>:
    1444:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    1448:	88 23       	and	r24, r24
    144a:	e1 f3       	breq	.-8      	; 0x1444 <uart_get_char>
    144c:	2f b7       	in	r18, 0x3f	; 63
    144e:	20 78       	andi	r18, 0x80	; 128
    1450:	f8 94       	cli
    1452:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <input_insert_pos>
    1456:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	83 1b       	sub	r24, r19
    145e:	91 09       	sbc	r25, r1
    1460:	5a f4       	brpl	.+22     	; 0x1478 <uart_get_char+0x34>
    1462:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <input_insert_pos>
    1466:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	e8 1b       	sub	r30, r24
    146e:	f1 09       	sbc	r31, r1
    1470:	e6 54       	subi	r30, 0x46	; 70
    1472:	fd 4f       	sbci	r31, 0xFD	; 253
    1474:	80 81       	ld	r24, Z
    1476:	0a c0       	rjmp	.+20     	; 0x148c <uart_get_char+0x48>
    1478:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <input_insert_pos>
    147c:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	e8 1b       	sub	r30, r24
    1484:	f1 09       	sbc	r31, r1
    1486:	e6 55       	subi	r30, 0x56	; 86
    1488:	fd 4f       	sbci	r31, 0xFD	; 253
    148a:	80 81       	ld	r24, Z
    148c:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    1490:	91 50       	subi	r25, 0x01	; 1
    1492:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <bytes_in_input_buffer>
    1496:	22 23       	and	r18, r18
    1498:	09 f0       	breq	.+2      	; 0x149c <uart_get_char+0x58>
    149a:	78 94       	sei
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	08 95       	ret

000014a0 <init_serial_stdio>:
    14a0:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <out_insert_pos>
    14a4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <bytes_in_out_buffer>
    14a8:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <input_insert_pos>
    14ac:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <bytes_in_input_buffer>
    14b0:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <input_overrun>
    14b4:	40 93 73 01 	sts	0x0173, r20	; 0x800173 <do_echo>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	aa 1f       	adc	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	aa 1f       	adc	r26, r26
    14ca:	bb 1f       	adc	r27, r27
    14cc:	9c 01       	movw	r18, r24
    14ce:	ad 01       	movw	r20, r26
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	72 e1       	ldi	r23, 0x12	; 18
    14dc:	8a e7       	ldi	r24, 0x7A	; 122
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divmodsi4>
    14e4:	ba 01       	movw	r22, r20
    14e6:	a9 01       	movw	r20, r18
    14e8:	4f 5f       	subi	r20, 0xFF	; 255
    14ea:	5f 4f       	sbci	r21, 0xFF	; 255
    14ec:	6f 4f       	sbci	r22, 0xFF	; 255
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	db 01       	movw	r26, r22
    14f2:	ca 01       	movw	r24, r20
    14f4:	1a f4       	brpl	.+6      	; 0x14fc <init_serial_stdio+0x5c>
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	a1 1d       	adc	r26, r1
    14fa:	b1 1d       	adc	r27, r1
    14fc:	b5 95       	asr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    150a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    150e:	e1 ec       	ldi	r30, 0xC1	; 193
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	88 e1       	ldi	r24, 0x18	; 24
    1514:	80 83       	st	Z, r24
    1516:	80 81       	ld	r24, Z
    1518:	80 68       	ori	r24, 0x80	; 128
    151a:	80 83       	st	Z, r24
    151c:	ec eb       	ldi	r30, 0xBC	; 188
    151e:	f2 e0       	ldi	r31, 0x02	; 2
    1520:	87 e4       	ldi	r24, 0x47	; 71
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	93 83       	std	Z+3, r25	; 0x03
    1526:	82 83       	std	Z+2, r24	; 0x02
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
    152c:	08 95       	ret

0000152e <serial_input_available>:
    152e:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	91 11       	cpse	r25, r1
    1536:	01 c0       	rjmp	.+2      	; 0x153a <serial_input_available+0xc>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	08 95       	ret

0000153c <clear_serial_input_buffer>:
    153c:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <input_insert_pos>
    1540:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <bytes_in_input_buffer>
    1544:	08 95       	ret

00001546 <__vector_21>:
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	2f 93       	push	r18
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
    155a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    155e:	88 23       	and	r24, r24
    1560:	29 f1       	breq	.+74     	; 0x15ac <__vector_21+0x66>
    1562:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <out_insert_pos>
    1566:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	82 1b       	sub	r24, r18
    156e:	91 09       	sbc	r25, r1
    1570:	5a f4       	brpl	.+22     	; 0x1588 <__vector_21+0x42>
    1572:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <out_insert_pos>
    1576:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	e8 1b       	sub	r30, r24
    157e:	f1 09       	sbc	r31, r1
    1580:	e7 55       	subi	r30, 0x57	; 87
    1582:	fd 4f       	sbci	r31, 0xFD	; 253
    1584:	90 81       	ld	r25, Z
    1586:	0a c0       	rjmp	.+20     	; 0x159c <__vector_21+0x56>
    1588:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <out_insert_pos>
    158c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	e8 1b       	sub	r30, r24
    1594:	f1 09       	sbc	r31, r1
    1596:	e6 55       	subi	r30, 0x56	; 86
    1598:	fe 4f       	sbci	r31, 0xFE	; 254
    159a:	90 81       	ld	r25, Z
    159c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    15a0:	81 50       	subi	r24, 0x01	; 1
    15a2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <bytes_in_out_buffer>
    15a6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <__vector_21+0x70>
    15ac:	e1 ec       	ldi	r30, 0xC1	; 193
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 7d       	andi	r24, 0xDF	; 223
    15b4:	80 83       	st	Z, r24
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	2f 91       	pop	r18
    15c0:	0f 90       	pop	r0
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	0f 90       	pop	r0
    15c6:	1f 90       	pop	r1
    15c8:	18 95       	reti

000015ca <__vector_20>:
    15ca:	1f 92       	push	r1
    15cc:	0f 92       	push	r0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	0f 92       	push	r0
    15d2:	11 24       	eor	r1, r1
    15d4:	2f 93       	push	r18
    15d6:	3f 93       	push	r19
    15d8:	4f 93       	push	r20
    15da:	5f 93       	push	r21
    15dc:	6f 93       	push	r22
    15de:	7f 93       	push	r23
    15e0:	8f 93       	push	r24
    15e2:	9f 93       	push	r25
    15e4:	af 93       	push	r26
    15e6:	bf 93       	push	r27
    15e8:	cf 93       	push	r28
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
    15ee:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    15f2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <do_echo>
    15f6:	88 23       	and	r24, r24
    15f8:	49 f0       	breq	.+18     	; 0x160c <__vector_20+0x42>
    15fa:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <bytes_in_out_buffer>
    15fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1600:	29 f0       	breq	.+10     	; 0x160c <__vector_20+0x42>
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	8c 2f       	mov	r24, r28
    1608:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <uart_put_char>
    160c:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    1610:	80 31       	cpi	r24, 0x10	; 16
    1612:	20 f0       	brcs	.+8      	; 0x161c <__vector_20+0x52>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <input_overrun>
    161a:	18 c0       	rjmp	.+48     	; 0x164c <__vector_20+0x82>
    161c:	cd 30       	cpi	r28, 0x0D	; 13
    161e:	09 f4       	brne	.+2      	; 0x1622 <__vector_20+0x58>
    1620:	ca e0       	ldi	r28, 0x0A	; 10
    1622:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <input_insert_pos>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	8e 0f       	add	r24, r30
    162a:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <input_insert_pos>
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	e6 55       	subi	r30, 0x56	; 86
    1632:	fd 4f       	sbci	r31, 0xFD	; 253
    1634:	c0 83       	st	Z, r28
    1636:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <bytes_in_input_buffer>
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <bytes_in_input_buffer>
    1640:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <input_insert_pos>
    1644:	80 31       	cpi	r24, 0x10	; 16
    1646:	11 f4       	brne	.+4      	; 0x164c <__vector_20+0x82>
    1648:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <input_insert_pos>
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	cf 91       	pop	r28
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <init_SSD>:

void init_SSD(void){
	/* Set port C (all pins) to be outputs */
	DDRC = 0xFF;
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	87 b9       	out	0x07, r24	; 7

	/* Set port D, pin 2 to be an output */
	DDRD |= (1<<2);
    1674:	52 9a       	sbi	0x0a, 2	; 10
    1676:	08 95       	ret

00001678 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <snakeLength>
	snakeTailIndex = 0;
    1684:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <snakeTailIndex>
	snakeHeadIndex = 1;
    1688:	c1 e0       	ldi	r28, 0x01	; 1
    168a:	c0 93 77 01 	sts	0x0177, r28	; 0x800177 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
    1696:	09 e7       	ldi	r16, 0x79	; 121
    1698:	11 e0       	ldi	r17, 0x01	; 1
    169a:	f8 01       	movw	r30, r16
    169c:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
    16a6:	f8 01       	movw	r30, r16
    16a8:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    16aa:	c0 93 75 01 	sts	0x0175, r28	; 0x800175 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    16ae:	c0 93 74 01 	sts	0x0174, r28	; 0x800174 <nextSnakeDirn>
}
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    16ba:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <snakeHeadIndex>
    16be:	0e 2e       	mov	r0, r30
    16c0:	00 0c       	add	r0, r0
    16c2:	ff 0b       	sbc	r31, r31
    16c4:	e7 58       	subi	r30, 0x87	; 135
    16c6:	fe 4f       	sbci	r31, 0xFE	; 254
}
    16c8:	80 81       	ld	r24, Z
    16ca:	08 95       	ret

000016cc <get_snake_tail_position>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    16cc:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <snakeTailIndex>
    16d0:	0e 2e       	mov	r0, r30
    16d2:	00 0c       	add	r0, r0
    16d4:	ff 0b       	sbc	r31, r31
    16d6:	e7 58       	subi	r30, 0x87	; 135
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
}
    16da:	80 81       	ld	r24, Z
    16dc:	08 95       	ret

000016de <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    16de:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <snakeLength>
    16e2:	08 95       	ret

000016e4 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    16e4:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <snakeTailIndex>
    16e8:	e9 2f       	mov	r30, r25
    16ea:	09 2e       	mov	r0, r25
    16ec:	00 0c       	add	r0, r0
    16ee:	ff 0b       	sbc	r31, r31
    16f0:	e7 58       	subi	r30, 0x87	; 135
    16f2:	fe 4f       	sbci	r31, 0xFE	; 254
    16f4:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    16f6:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    16f8:	91 32       	cpi	r25, 0x21	; 33
    16fa:	19 f0       	breq	.+6      	; 0x1702 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    16fc:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <snakeTailIndex>
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1702:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <snakeTailIndex>
	}
	snakeLength--;
    1706:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <snakeLength>
    170a:	91 50       	subi	r25, 0x01	; 1
    170c:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <snakeLength>
	
	return prev_tail_position;
}
    1710:	08 95       	ret

00001712 <set_snake_dirn>:
	** is not opposite to the current direction (stored in curSnakeDirn). 
	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	if ((curSnakeDirn == SNAKE_LEFT && dirn == SNAKE_RIGHT) || (curSnakeDirn == SNAKE_RIGHT && dirn == SNAKE_LEFT) ||
    1712:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <curSnakeDirn>
    1716:	93 30       	cpi	r25, 0x03	; 3
    1718:	19 f4       	brne	.+6      	; 0x1720 <set_snake_dirn+0xe>
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	71 f4       	brne	.+28     	; 0x173a <set_snake_dirn+0x28>
    171e:	08 95       	ret
    1720:	91 30       	cpi	r25, 0x01	; 1
    1722:	19 f4       	brne	.+6      	; 0x172a <set_snake_dirn+0x18>
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	49 f4       	brne	.+18     	; 0x173a <set_snake_dirn+0x28>
    1728:	08 95       	ret
    172a:	91 11       	cpse	r25, r1
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <set_snake_dirn+0x22>
		(curSnakeDirn == SNAKE_UP && dirn == SNAKE_DOWN) || (curSnakeDirn == SNAKE_DOWN && dirn == SNAKE_UP)) {
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	21 f4       	brne	.+8      	; 0x173a <set_snake_dirn+0x28>
    1732:	08 95       	ret
    1734:	92 30       	cpi	r25, 0x02	; 2
    1736:	09 f4       	brne	.+2      	; 0x173a <set_snake_dirn+0x28>
    1738:	81 11       	cpse	r24, r1
			return;	
		}
    
    nextSnakeDirn = dirn;
    173a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <nextSnakeDirn>
    173e:	08 95       	ret

00001740 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1740:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1744:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1748:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    174a:	0d c0       	rjmp	.+26     	; 0x1766 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    174c:	e9 2f       	mov	r30, r25
    174e:	09 2e       	mov	r0, r25
    1750:	00 0c       	add	r0, r0
    1752:	ff 0b       	sbc	r31, r31
    1754:	e7 58       	subi	r30, 0x87	; 135
    1756:	fe 4f       	sbci	r31, 0xFE	; 254
    1758:	20 81       	ld	r18, Z
    175a:	28 17       	cp	r18, r24
    175c:	89 f0       	breq	.+34     	; 0x1780 <is_snake_at+0x40>
    175e:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1760:	91 32       	cpi	r25, 0x21	; 33
    1762:	0c f0       	brlt	.+2      	; 0x1766 <is_snake_at+0x26>
			index = 0;
    1764:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1766:	93 13       	cpse	r25, r19
    1768:	f1 cf       	rjmp	.-30     	; 0x174c <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    176a:	e3 2f       	mov	r30, r19
    176c:	33 0f       	add	r19, r19
    176e:	ff 0b       	sbc	r31, r31
    1770:	e7 58       	subi	r30, 0x87	; 135
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	20 81       	ld	r18, Z
    1778:	28 17       	cp	r18, r24
    177a:	19 f0       	breq	.+6      	; 0x1782 <is_snake_at+0x42>
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <is_snake_at+0x42>
    1780:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1782:	89 2f       	mov	r24, r25
    1784:	08 95       	ret

00001786 <advance_snake_head>:
** - ATE_FOOD if there was food at the new head position and the snake can grow
** - ATE_FOOD_BUT_CANT_GROW if there was food at the new head position but the
**   snake can't grow.
** (Only the last three of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    178a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <snakeLength>
    178e:	81 32       	cpi	r24, 0x21	; 33
    1790:	08 f0       	brcs	.+2      	; 0x1794 <advance_snake_head+0xe>
    1792:	83 c0       	rjmp	.+262    	; 0x189a <advance_snake_head+0x114>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1794:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <snakeHeadIndex>
    1798:	0e 2e       	mov	r0, r30
    179a:	00 0c       	add	r0, r0
    179c:	ff 0b       	sbc	r31, r31
    179e:	e7 58       	subi	r30, 0x87	; 135
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	80 81       	ld	r24, Z
    17a4:	0e 94 2a 05 	call	0xa54	; 0xa54 <x_position>
    17a8:	d8 2f       	mov	r29, r24
    17aa:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    17ac:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <snakeHeadIndex>
    17b0:	0e 2e       	mov	r0, r30
    17b2:	00 0c       	add	r0, r0
    17b4:	ff 0b       	sbc	r31, r31
    17b6:	e7 58       	subi	r30, 0x87	; 135
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	80 81       	ld	r24, Z
    17bc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <y_position>
    17c0:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    17c2:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <nextSnakeDirn>
    17c6:	91 30       	cpi	r25, 0x01	; 1
    17c8:	59 f0       	breq	.+22     	; 0x17e0 <advance_snake_head+0x5a>
    17ca:	28 f0       	brcs	.+10     	; 0x17d6 <advance_snake_head+0x50>
    17cc:	92 30       	cpi	r25, 0x02	; 2
    17ce:	69 f0       	breq	.+26     	; 0x17ea <advance_snake_head+0x64>
    17d0:	93 30       	cpi	r25, 0x03	; 3
    17d2:	81 f0       	breq	.+32     	; 0x17f4 <advance_snake_head+0x6e>
    17d4:	1b c0       	rjmp	.+54     	; 0x180c <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    17d6:	87 30       	cpi	r24, 0x07	; 7
    17d8:	91 f0       	breq	.+36     	; 0x17fe <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	68 0f       	add	r22, r24
    17de:	16 c0       	rjmp	.+44     	; 0x180c <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    17e0:	df 30       	cpi	r29, 0x0F	; 15
    17e2:	79 f0       	breq	.+30     	; 0x1802 <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    17e4:	c1 e0       	ldi	r28, 0x01	; 1
    17e6:	cd 0f       	add	r28, r29
    17e8:	11 c0       	rjmp	.+34     	; 0x180c <advance_snake_head+0x86>
			}
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
    17ea:	88 23       	and	r24, r24
    17ec:	61 f0       	breq	.+24     	; 0x1806 <advance_snake_head+0x80>
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
			} else {
			headY -= 1;
    17ee:	6f ef       	ldi	r22, 0xFF	; 255
    17f0:	68 0f       	add	r22, r24
    17f2:	0c c0       	rjmp	.+24     	; 0x180c <advance_snake_head+0x86>
			}
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
    17f4:	dd 23       	and	r29, r29
    17f6:	49 f0       	breq	.+18     	; 0x180a <advance_snake_head+0x84>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
			} else {
				headX -= 1;
    17f8:	cf ef       	ldi	r28, 0xFF	; 255
    17fa:	cd 0f       	add	r28, r29
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	05 c0       	rjmp	.+10     	; 0x180c <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1802:	c0 e0       	ldi	r28, 0x00	; 0
    1804:	03 c0       	rjmp	.+6      	; 0x180c <advance_snake_head+0x86>
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
    1806:	67 e0       	ldi	r22, 0x07	; 7
    1808:	01 c0       	rjmp	.+2      	; 0x180c <advance_snake_head+0x86>
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
    180a:	cf e0       	ldi	r28, 0x0F	; 15
				headX -= 1;
			}
			break;
    }

	newHeadPosn = position(headX, headY);
    180c:	8c 2f       	mov	r24, r28
    180e:	0e 94 35 05 	call	0xa6a	; 0xa6a <position>
    1812:	c8 2f       	mov	r28, r24

	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1814:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <nextSnakeDirn>
    1818:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <curSnakeDirn>
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
    181c:	8c 2f       	mov	r24, r28
    181e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <is_snake_at>
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	51 f4       	brne	.+20     	; 0x183a <advance_snake_head+0xb4>
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1826:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <snakeHeadIndex>
    182a:	0e 2e       	mov	r0, r30
    182c:	00 0c       	add	r0, r0
    182e:	ff 0b       	sbc	r31, r31
    1830:	e7 58       	subi	r30, 0x87	; 135
    1832:	fe 4f       	sbci	r31, 0xFE	; 254
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
    1834:	80 81       	ld	r24, Z
    1836:	c8 13       	cpse	r28, r24
    1838:	32 c0       	rjmp	.+100    	; 0x189e <advance_snake_head+0x118>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	add_to_score(1);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <add_to_score>

	set_display_attribute(TERM_RESET);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	0e 94 a7 0c 	call	0x194e	; 0x194e <set_display_attribute>
	snakeHeadIndex++;
    1848:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <snakeHeadIndex>
    184c:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    184e:	81 32       	cpi	r24, 0x21	; 33
    1850:	19 f0       	breq	.+6      	; 0x1858 <advance_snake_head+0xd2>
	** or not. Update the length.
    */
	add_to_score(1);

	set_display_attribute(TERM_RESET);
	snakeHeadIndex++;
    1852:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <snakeHeadIndex>
    1856:	02 c0       	rjmp	.+4      	; 0x185c <advance_snake_head+0xd6>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1858:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    185c:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <snakeHeadIndex>
    1860:	0e 2e       	mov	r0, r30
    1862:	00 0c       	add	r0, r0
    1864:	ff 0b       	sbc	r31, r31
    1866:	e7 58       	subi	r30, 0x87	; 135
    1868:	fe 4f       	sbci	r31, 0xFE	; 254
    186a:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    186c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <snakeLength>
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
    1876:	8c 2f       	mov	r24, r28
    1878:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <is_food_at>
    187c:	88 23       	and	r24, r24
    187e:	31 f0       	breq	.+12     	; 0x188c <advance_snake_head+0x106>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1880:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <snakeLength>
    1884:	81 32       	cpi	r24, 0x21	; 33
    1886:	68 f0       	brcs	.+26     	; 0x18a2 <advance_snake_head+0x11c>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	0e c0       	rjmp	.+28     	; 0x18a8 <advance_snake_head+0x122>
		}
	}
	else if (superfood_at(newHeadPosn)) {
    188c:	8c 2f       	mov	r24, r28
    188e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <superfood_at>
    1892:	81 11       	cpse	r24, r1
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <advance_snake_head+0x120>
		return ATE_SUPERFOOD;
	}
	 else {
		return MOVE_OK;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	07 c0       	rjmp	.+14     	; 0x18a8 <advance_snake_head+0x122>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    189a:	8d ef       	ldi	r24, 0xFD	; 253
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <advance_snake_head+0x122>
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
		return COLLISION;
    189e:	8e ef       	ldi	r24, 0xFE	; 254
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <advance_snake_head+0x122>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <advance_snake_head+0x122>
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	}
	else if (superfood_at(newHeadPosn)) {
		return ATE_SUPERFOOD;
    18a6:	84 e0       	ldi	r24, 0x04	; 4
	}
	 else {
		return MOVE_OK;
	}
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    18ae:	94 b1       	in	r25, 0x04	; 4
    18b0:	90 6b       	ori	r25, 0xB0	; 176
    18b2:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    18b4:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    18b6:	90 e5       	ldi	r25, 0x50	; 80
    18b8:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    18ba:	88 30       	cpi	r24, 0x08	; 8
    18bc:	21 f0       	breq	.+8      	; 0x18c6 <spi_setup_master+0x18>
    18be:	80 32       	cpi	r24, 0x20	; 32
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <spi_setup_master+0x18>
    18c2:	82 30       	cpi	r24, 0x02	; 2
    18c4:	19 f4       	brne	.+6      	; 0x18cc <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	9d bd       	out	0x2d, r25	; 45
			break;
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    18cc:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    18ce:	80 32       	cpi	r24, 0x20	; 32
    18d0:	69 f0       	breq	.+26     	; 0x18ec <spi_setup_master+0x3e>
    18d2:	28 f4       	brcc	.+10     	; 0x18de <spi_setup_master+0x30>
    18d4:	88 30       	cpi	r24, 0x08	; 8
    18d6:	71 f0       	breq	.+28     	; 0x18f4 <spi_setup_master+0x46>
    18d8:	80 31       	cpi	r24, 0x10	; 16
    18da:	61 f0       	breq	.+24     	; 0x18f4 <spi_setup_master+0x46>
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <spi_setup_master+0x4c>
    18de:	80 34       	cpi	r24, 0x40	; 64
    18e0:	29 f0       	breq	.+10     	; 0x18ec <spi_setup_master+0x3e>
    18e2:	80 38       	cpi	r24, 0x80	; 128
    18e4:	51 f4       	brne	.+20     	; 0x18fa <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    18e6:	8c b5       	in	r24, 0x2c	; 44
    18e8:	81 60       	ori	r24, 0x01	; 1
    18ea:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    18ec:	8c b5       	in	r24, 0x2c	; 44
    18ee:	82 60       	ori	r24, 0x02	; 2
    18f0:	8c bd       	out	0x2c, r24	; 44
			break;
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    18f4:	8c b5       	in	r24, 0x2c	; 44
    18f6:	81 60       	ori	r24, 0x01	; 1
    18f8:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    18fa:	2c 98       	cbi	0x05, 4	; 5
    18fc:	08 95       	ret

000018fe <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    18fe:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1900:	0d b4       	in	r0, 0x2d	; 45
    1902:	07 fe       	sbrs	r0, 7
    1904:	fd cf       	rjmp	.-6      	; 0x1900 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1906:	8e b5       	in	r24, 0x2e	; 46
    1908:	08 95       	ret

0000190a <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    190a:	28 2f       	mov	r18, r24
    190c:	08 2e       	mov	r0, r24
    190e:	00 0c       	add	r0, r0
    1910:	33 0b       	sbc	r19, r19
    1912:	3f 93       	push	r19
    1914:	8f 93       	push	r24
    1916:	86 2f       	mov	r24, r22
    1918:	06 2e       	mov	r0, r22
    191a:	00 0c       	add	r0, r0
    191c:	99 0b       	sbc	r25, r25
    191e:	9f 93       	push	r25
    1920:	6f 93       	push	r22
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	94 e0       	ldi	r25, 0x04	; 4
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	08 95       	ret

0000193c <clear_terminal>:
    193c:	8b ef       	ldi	r24, 0xFB	; 251
    193e:	93 e0       	ldi	r25, 0x03	; 3
    1940:	9f 93       	push	r25
    1942:	8f 93       	push	r24
    1944:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	08 95       	ret

0000194e <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    194e:	1f 92       	push	r1
    1950:	8f 93       	push	r24
    1952:	85 ef       	ldi	r24, 0xF5	; 245
    1954:	93 e0       	ldi	r25, 0x03	; 3
    1956:	9f 93       	push	r25
    1958:	8f 93       	push	r24
    195a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	08 95       	ret

00001968 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1968:	8e ee       	ldi	r24, 0xEE	; 238
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	9f 93       	push	r25
    196e:	8f 93       	push	r24
    1970:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	08 95       	ret

0000197a <show_cursor>:

void show_cursor() {
	printf_P(PSTR("\x1b[?25h"));
    197a:	87 ee       	ldi	r24, 0xE7	; 231
    197c:	93 e0       	ldi	r25, 0x03	; 3
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <printf_P>
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	08 95       	ret

0000198c <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    198c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <clock_ticks>
    1990:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <clock_ticks+0x1>
    1994:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <clock_ticks+0x2>
    1998:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    199c:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    199e:	8c e7       	ldi	r24, 0x7C	; 124
    19a0:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    19aa:	ee e6       	ldi	r30, 0x6E	; 110
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	82 60       	ori	r24, 0x02	; 2
    19b2:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    19b4:	85 b3       	in	r24, 0x15	; 21
    19b6:	82 70       	andi	r24, 0x02	; 2
    19b8:	85 bb       	out	0x15, r24	; 21
    19ba:	08 95       	ret

000019bc <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    19bc:	2f b7       	in	r18, 0x3f	; 63
	cli();
    19be:	f8 94       	cli
	return_value = clock_ticks;
    19c0:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <clock_ticks>
    19c4:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <clock_ticks+0x1>
    19c8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <clock_ticks+0x2>
    19cc:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <clock_ticks+0x3>
	if(interrupts_were_on) {
    19d0:	22 23       	and	r18, r18
    19d2:	0c f4       	brge	.+2      	; 0x19d6 <get_clock_ticks+0x1a>
		sei();
    19d4:	78 94       	sei
	}
	return return_value;
}
    19d6:	08 95       	ret

000019d8 <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	8f 93       	push	r24
    19e4:	9f 93       	push	r25
    19e6:	af 93       	push	r26
    19e8:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
    19ea:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <clock_ticks>
    19ee:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <clock_ticks+0x1>
    19f2:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <clock_ticks+0x2>
    19f6:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <clock_ticks+0x3>
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	a1 1d       	adc	r26, r1
    19fe:	b1 1d       	adc	r27, r1
    1a00:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <clock_ticks>
    1a04:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <clock_ticks+0x1>
    1a08:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <clock_ticks+0x2>
    1a0c:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <clock_ticks+0x3>
}
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	0f 90       	pop	r0
    1a1e:	1f 90       	pop	r1
    1a20:	18 95       	reti

00001a22 <__udivmodsi4>:
    1a22:	a1 e2       	ldi	r26, 0x21	; 33
    1a24:	1a 2e       	mov	r1, r26
    1a26:	aa 1b       	sub	r26, r26
    1a28:	bb 1b       	sub	r27, r27
    1a2a:	fd 01       	movw	r30, r26
    1a2c:	0d c0       	rjmp	.+26     	; 0x1a48 <__udivmodsi4_ep>

00001a2e <__udivmodsi4_loop>:
    1a2e:	aa 1f       	adc	r26, r26
    1a30:	bb 1f       	adc	r27, r27
    1a32:	ee 1f       	adc	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	a2 17       	cp	r26, r18
    1a38:	b3 07       	cpc	r27, r19
    1a3a:	e4 07       	cpc	r30, r20
    1a3c:	f5 07       	cpc	r31, r21
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <__udivmodsi4_ep>
    1a40:	a2 1b       	sub	r26, r18
    1a42:	b3 0b       	sbc	r27, r19
    1a44:	e4 0b       	sbc	r30, r20
    1a46:	f5 0b       	sbc	r31, r21

00001a48 <__udivmodsi4_ep>:
    1a48:	66 1f       	adc	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	1a 94       	dec	r1
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <__udivmodsi4_loop>
    1a54:	60 95       	com	r22
    1a56:	70 95       	com	r23
    1a58:	80 95       	com	r24
    1a5a:	90 95       	com	r25
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	bd 01       	movw	r22, r26
    1a62:	cf 01       	movw	r24, r30
    1a64:	08 95       	ret

00001a66 <__divmodsi4>:
    1a66:	05 2e       	mov	r0, r21
    1a68:	97 fb       	bst	r25, 7
    1a6a:	1e f4       	brtc	.+6      	; 0x1a72 <__divmodsi4+0xc>
    1a6c:	00 94       	com	r0
    1a6e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__negsi2>
    1a72:	57 fd       	sbrc	r21, 7
    1a74:	07 d0       	rcall	.+14     	; 0x1a84 <__divmodsi4_neg2>
    1a76:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__udivmodsi4>
    1a7a:	07 fc       	sbrc	r0, 7
    1a7c:	03 d0       	rcall	.+6      	; 0x1a84 <__divmodsi4_neg2>
    1a7e:	4e f4       	brtc	.+18     	; 0x1a92 <__divmodsi4_exit>
    1a80:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__negsi2>

00001a84 <__divmodsi4_neg2>:
    1a84:	50 95       	com	r21
    1a86:	40 95       	com	r20
    1a88:	30 95       	com	r19
    1a8a:	21 95       	neg	r18
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255

00001a92 <__divmodsi4_exit>:
    1a92:	08 95       	ret

00001a94 <__negsi2>:
    1a94:	90 95       	com	r25
    1a96:	80 95       	com	r24
    1a98:	70 95       	com	r23
    1a9a:	61 95       	neg	r22
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	08 95       	ret

00001aa4 <do_rand>:
    1aa4:	8f 92       	push	r8
    1aa6:	9f 92       	push	r9
    1aa8:	af 92       	push	r10
    1aaa:	bf 92       	push	r11
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	ec 01       	movw	r28, r24
    1aba:	68 81       	ld	r22, Y
    1abc:	79 81       	ldd	r23, Y+1	; 0x01
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	61 15       	cp	r22, r1
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	81 05       	cpc	r24, r1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <do_rand+0x30>
    1acc:	64 e2       	ldi	r22, 0x24	; 36
    1ace:	79 ed       	ldi	r23, 0xD9	; 217
    1ad0:	8b e5       	ldi	r24, 0x5B	; 91
    1ad2:	97 e0       	ldi	r25, 0x07	; 7
    1ad4:	2d e1       	ldi	r18, 0x1D	; 29
    1ad6:	33 ef       	ldi	r19, 0xF3	; 243
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divmodsi4>
    1ae0:	49 01       	movw	r8, r18
    1ae2:	5a 01       	movw	r10, r20
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	a7 ea       	ldi	r26, 0xA7	; 167
    1aea:	b1 e4       	ldi	r27, 0x41	; 65
    1aec:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__muluhisi3>
    1af0:	6b 01       	movw	r12, r22
    1af2:	7c 01       	movw	r14, r24
    1af4:	ac ee       	ldi	r26, 0xEC	; 236
    1af6:	b4 ef       	ldi	r27, 0xF4	; 244
    1af8:	a5 01       	movw	r20, r10
    1afa:	94 01       	movw	r18, r8
    1afc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__mulohisi3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8c 0d       	add	r24, r12
    1b06:	9d 1d       	adc	r25, r13
    1b08:	ae 1d       	adc	r26, r14
    1b0a:	bf 1d       	adc	r27, r15
    1b0c:	b7 ff       	sbrs	r27, 7
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <do_rand+0x72>
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	a1 09       	sbc	r26, r1
    1b14:	b0 48       	sbci	r27, 0x80	; 128
    1b16:	88 83       	st	Y, r24
    1b18:	99 83       	std	Y+1, r25	; 0x01
    1b1a:	aa 83       	std	Y+2, r26	; 0x02
    1b1c:	bb 83       	std	Y+3, r27	; 0x03
    1b1e:	9f 77       	andi	r25, 0x7F	; 127
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	08 95       	ret

00001b36 <rand_r>:
    1b36:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <do_rand>
    1b3a:	08 95       	ret

00001b3c <rand>:
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <do_rand>
    1b44:	08 95       	ret

00001b46 <srand>:
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1b4e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1b52:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1b56:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1b5a:	08 95       	ret

00001b5c <random_r>:
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	ec 01       	movw	r28, r24
    1b72:	68 81       	ld	r22, Y
    1b74:	79 81       	ldd	r23, Y+1	; 0x01
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7a:	61 15       	cp	r22, r1
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	81 05       	cpc	r24, r1
    1b80:	91 05       	cpc	r25, r1
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <random_r+0x30>
    1b84:	64 e2       	ldi	r22, 0x24	; 36
    1b86:	79 ed       	ldi	r23, 0xD9	; 217
    1b88:	8b e5       	ldi	r24, 0x5B	; 91
    1b8a:	97 e0       	ldi	r25, 0x07	; 7
    1b8c:	2d e1       	ldi	r18, 0x1D	; 29
    1b8e:	33 ef       	ldi	r19, 0xF3	; 243
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divmodsi4>
    1b98:	49 01       	movw	r8, r18
    1b9a:	5a 01       	movw	r10, r20
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	a7 ea       	ldi	r26, 0xA7	; 167
    1ba2:	b1 e4       	ldi	r27, 0x41	; 65
    1ba4:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__muluhisi3>
    1ba8:	6b 01       	movw	r12, r22
    1baa:	7c 01       	movw	r14, r24
    1bac:	ac ee       	ldi	r26, 0xEC	; 236
    1bae:	b4 ef       	ldi	r27, 0xF4	; 244
    1bb0:	a5 01       	movw	r20, r10
    1bb2:	94 01       	movw	r18, r8
    1bb4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__mulohisi3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	8c 0d       	add	r24, r12
    1bbe:	9d 1d       	adc	r25, r13
    1bc0:	ae 1d       	adc	r26, r14
    1bc2:	bf 1d       	adc	r27, r15
    1bc4:	b7 ff       	sbrs	r27, 7
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <random_r+0x72>
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	a1 09       	sbc	r26, r1
    1bcc:	b0 48       	sbci	r27, 0x80	; 128
    1bce:	88 83       	st	Y, r24
    1bd0:	99 83       	std	Y+1, r25	; 0x01
    1bd2:	aa 83       	std	Y+2, r26	; 0x02
    1bd4:	bb 83       	std	Y+3, r27	; 0x03
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	9f 77       	andi	r25, 0x7F	; 127
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	bf 90       	pop	r11
    1bea:	af 90       	pop	r10
    1bec:	9f 90       	pop	r9
    1bee:	8f 90       	pop	r8
    1bf0:	08 95       	ret

00001bf2 <random>:
    1bf2:	8f 92       	push	r8
    1bf4:	9f 92       	push	r9
    1bf6:	af 92       	push	r10
    1bf8:	bf 92       	push	r11
    1bfa:	cf 92       	push	r12
    1bfc:	df 92       	push	r13
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    1c06:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    1c0a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    1c0e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    1c12:	61 15       	cp	r22, r1
    1c14:	71 05       	cpc	r23, r1
    1c16:	81 05       	cpc	r24, r1
    1c18:	91 05       	cpc	r25, r1
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <random+0x32>
    1c1c:	64 e2       	ldi	r22, 0x24	; 36
    1c1e:	79 ed       	ldi	r23, 0xD9	; 217
    1c20:	8b e5       	ldi	r24, 0x5B	; 91
    1c22:	97 e0       	ldi	r25, 0x07	; 7
    1c24:	2d e1       	ldi	r18, 0x1D	; 29
    1c26:	33 ef       	ldi	r19, 0xF3	; 243
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divmodsi4>
    1c30:	49 01       	movw	r8, r18
    1c32:	5a 01       	movw	r10, r20
    1c34:	9b 01       	movw	r18, r22
    1c36:	ac 01       	movw	r20, r24
    1c38:	a7 ea       	ldi	r26, 0xA7	; 167
    1c3a:	b1 e4       	ldi	r27, 0x41	; 65
    1c3c:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__muluhisi3>
    1c40:	6b 01       	movw	r12, r22
    1c42:	7c 01       	movw	r14, r24
    1c44:	ac ee       	ldi	r26, 0xEC	; 236
    1c46:	b4 ef       	ldi	r27, 0xF4	; 244
    1c48:	a5 01       	movw	r20, r10
    1c4a:	94 01       	movw	r18, r8
    1c4c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__mulohisi3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8c 0d       	add	r24, r12
    1c56:	9d 1d       	adc	r25, r13
    1c58:	ae 1d       	adc	r26, r14
    1c5a:	bf 1d       	adc	r27, r15
    1c5c:	b7 ff       	sbrs	r27, 7
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <random+0x74>
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	a1 09       	sbc	r26, r1
    1c64:	b0 48       	sbci	r27, 0x80	; 128
    1c66:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    1c6a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    1c6e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    1c72:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	9f 77       	andi	r25, 0x7F	; 127
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	df 90       	pop	r13
    1c82:	cf 90       	pop	r12
    1c84:	bf 90       	pop	r11
    1c86:	af 90       	pop	r10
    1c88:	9f 90       	pop	r9
    1c8a:	8f 90       	pop	r8
    1c8c:	08 95       	ret

00001c8e <srandom>:
    1c8e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    1c92:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    1c96:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    1c9a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    1c9e:	08 95       	ret

00001ca0 <fgetc>:
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	ec 01       	movw	r28, r24
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	20 ff       	sbrs	r18, 0
    1caa:	33 c0       	rjmp	.+102    	; 0x1d12 <fgetc+0x72>
    1cac:	26 ff       	sbrs	r18, 6
    1cae:	0a c0       	rjmp	.+20     	; 0x1cc4 <fgetc+0x24>
    1cb0:	2f 7b       	andi	r18, 0xBF	; 191
    1cb2:	2b 83       	std	Y+3, r18	; 0x03
    1cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	9f 83       	std	Y+7, r25	; 0x07
    1cbc:	8e 83       	std	Y+6, r24	; 0x06
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	29 c0       	rjmp	.+82     	; 0x1d16 <fgetc+0x76>
    1cc4:	22 ff       	sbrs	r18, 2
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <fgetc+0x46>
    1cc8:	e8 81       	ld	r30, Y
    1cca:	f9 81       	ldd	r31, Y+1	; 0x01
    1ccc:	80 81       	ld	r24, Z
    1cce:	08 2e       	mov	r0, r24
    1cd0:	00 0c       	add	r0, r0
    1cd2:	99 0b       	sbc	r25, r25
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	19 f4       	brne	.+6      	; 0x1cde <fgetc+0x3e>
    1cd8:	20 62       	ori	r18, 0x20	; 32
    1cda:	2b 83       	std	Y+3, r18	; 0x03
    1cdc:	1a c0       	rjmp	.+52     	; 0x1d12 <fgetc+0x72>
    1cde:	31 96       	adiw	r30, 0x01	; 1
    1ce0:	f9 83       	std	Y+1, r31	; 0x01
    1ce2:	e8 83       	st	Y, r30
    1ce4:	0e c0       	rjmp	.+28     	; 0x1d02 <fgetc+0x62>
    1ce6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ce8:	fb 85       	ldd	r31, Y+11	; 0x0b
    1cea:	09 95       	icall
    1cec:	97 ff       	sbrs	r25, 7
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <fgetc+0x62>
    1cf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	11 f0       	breq	.+4      	; 0x1cfa <fgetc+0x5a>
    1cf6:	80 e2       	ldi	r24, 0x20	; 32
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <fgetc+0x5c>
    1cfa:	80 e1       	ldi	r24, 0x10	; 16
    1cfc:	82 2b       	or	r24, r18
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	08 c0       	rjmp	.+16     	; 0x1d12 <fgetc+0x72>
    1d02:	2e 81       	ldd	r18, Y+6	; 0x06
    1d04:	3f 81       	ldd	r19, Y+7	; 0x07
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	3f 83       	std	Y+7, r19	; 0x07
    1d0c:	2e 83       	std	Y+6, r18	; 0x06
    1d0e:	99 27       	eor	r25, r25
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <fgetc+0x76>
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	9f ef       	ldi	r25, 0xFF	; 255
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	08 95       	ret

00001d1c <printf_P>:
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e4 e9       	ldi	r30, 0x94	; 148
    1d22:	fe e0       	ldi	r31, 0x0E	; 14
    1d24:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__prologue_saves__+0x1c>
    1d28:	ae 01       	movw	r20, r28
    1d2a:	49 5f       	subi	r20, 0xF9	; 249
    1d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2e:	da 01       	movw	r26, r20
    1d30:	6d 91       	ld	r22, X+
    1d32:	7d 91       	ld	r23, X+
    1d34:	ad 01       	movw	r20, r26
    1d36:	0c eb       	ldi	r16, 0xBC	; 188
    1d38:	12 e0       	ldi	r17, 0x02	; 2
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	dc 01       	movw	r26, r24
    1d42:	13 96       	adiw	r26, 0x03	; 3
    1d44:	2c 91       	ld	r18, X
    1d46:	13 97       	sbiw	r26, 0x03	; 3
    1d48:	28 60       	ori	r18, 0x08	; 8
    1d4a:	13 96       	adiw	r26, 0x03	; 3
    1d4c:	2c 93       	st	X, r18
    1d4e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <vfprintf>
    1d52:	d8 01       	movw	r26, r16
    1d54:	12 96       	adiw	r26, 0x02	; 2
    1d56:	ed 91       	ld	r30, X+
    1d58:	fc 91       	ld	r31, X
    1d5a:	13 97       	sbiw	r26, 0x03	; 3
    1d5c:	23 81       	ldd	r18, Z+3	; 0x03
    1d5e:	27 7f       	andi	r18, 0xF7	; 247
    1d60:	23 83       	std	Z+3, r18	; 0x03
    1d62:	e4 e0       	ldi	r30, 0x04	; 4
    1d64:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__epilogue_restores__+0x1c>

00001d68 <vfprintf>:
    1d68:	ab e0       	ldi	r26, 0x0B	; 11
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	ea eb       	ldi	r30, 0xBA	; 186
    1d6e:	fe e0       	ldi	r31, 0x0E	; 14
    1d70:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__prologue_saves__>
    1d74:	6c 01       	movw	r12, r24
    1d76:	7b 01       	movw	r14, r22
    1d78:	8a 01       	movw	r16, r20
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	17 82       	std	Z+7, r1	; 0x07
    1d7e:	16 82       	std	Z+6, r1	; 0x06
    1d80:	83 81       	ldd	r24, Z+3	; 0x03
    1d82:	81 ff       	sbrs	r24, 1
    1d84:	cc c1       	rjmp	.+920    	; 0x211e <vfprintf+0x3b6>
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	3c 01       	movw	r6, r24
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	f7 01       	movw	r30, r14
    1d92:	93 fd       	sbrc	r25, 3
    1d94:	85 91       	lpm	r24, Z+
    1d96:	93 ff       	sbrs	r25, 3
    1d98:	81 91       	ld	r24, Z+
    1d9a:	7f 01       	movw	r14, r30
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <vfprintf+0x3a>
    1da0:	ba c1       	rjmp	.+884    	; 0x2116 <vfprintf+0x3ae>
    1da2:	85 32       	cpi	r24, 0x25	; 37
    1da4:	39 f4       	brne	.+14     	; 0x1db4 <vfprintf+0x4c>
    1da6:	93 fd       	sbrc	r25, 3
    1da8:	85 91       	lpm	r24, Z+
    1daa:	93 ff       	sbrs	r25, 3
    1dac:	81 91       	ld	r24, Z+
    1dae:	7f 01       	movw	r14, r30
    1db0:	85 32       	cpi	r24, 0x25	; 37
    1db2:	29 f4       	brne	.+10     	; 0x1dbe <vfprintf+0x56>
    1db4:	b6 01       	movw	r22, r12
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    1dbc:	e7 cf       	rjmp	.-50     	; 0x1d8c <vfprintf+0x24>
    1dbe:	91 2c       	mov	r9, r1
    1dc0:	21 2c       	mov	r2, r1
    1dc2:	31 2c       	mov	r3, r1
    1dc4:	ff e1       	ldi	r31, 0x1F	; 31
    1dc6:	f3 15       	cp	r31, r3
    1dc8:	d8 f0       	brcs	.+54     	; 0x1e00 <vfprintf+0x98>
    1dca:	8b 32       	cpi	r24, 0x2B	; 43
    1dcc:	79 f0       	breq	.+30     	; 0x1dec <vfprintf+0x84>
    1dce:	38 f4       	brcc	.+14     	; 0x1dde <vfprintf+0x76>
    1dd0:	80 32       	cpi	r24, 0x20	; 32
    1dd2:	79 f0       	breq	.+30     	; 0x1df2 <vfprintf+0x8a>
    1dd4:	83 32       	cpi	r24, 0x23	; 35
    1dd6:	a1 f4       	brne	.+40     	; 0x1e00 <vfprintf+0x98>
    1dd8:	23 2d       	mov	r18, r3
    1dda:	20 61       	ori	r18, 0x10	; 16
    1ddc:	1d c0       	rjmp	.+58     	; 0x1e18 <vfprintf+0xb0>
    1dde:	8d 32       	cpi	r24, 0x2D	; 45
    1de0:	61 f0       	breq	.+24     	; 0x1dfa <vfprintf+0x92>
    1de2:	80 33       	cpi	r24, 0x30	; 48
    1de4:	69 f4       	brne	.+26     	; 0x1e00 <vfprintf+0x98>
    1de6:	23 2d       	mov	r18, r3
    1de8:	21 60       	ori	r18, 0x01	; 1
    1dea:	16 c0       	rjmp	.+44     	; 0x1e18 <vfprintf+0xb0>
    1dec:	83 2d       	mov	r24, r3
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	38 2e       	mov	r3, r24
    1df2:	e3 2d       	mov	r30, r3
    1df4:	e4 60       	ori	r30, 0x04	; 4
    1df6:	3e 2e       	mov	r3, r30
    1df8:	2a c0       	rjmp	.+84     	; 0x1e4e <vfprintf+0xe6>
    1dfa:	f3 2d       	mov	r31, r3
    1dfc:	f8 60       	ori	r31, 0x08	; 8
    1dfe:	1d c0       	rjmp	.+58     	; 0x1e3a <vfprintf+0xd2>
    1e00:	37 fc       	sbrc	r3, 7
    1e02:	2d c0       	rjmp	.+90     	; 0x1e5e <vfprintf+0xf6>
    1e04:	20 ed       	ldi	r18, 0xD0	; 208
    1e06:	28 0f       	add	r18, r24
    1e08:	2a 30       	cpi	r18, 0x0A	; 10
    1e0a:	40 f0       	brcs	.+16     	; 0x1e1c <vfprintf+0xb4>
    1e0c:	8e 32       	cpi	r24, 0x2E	; 46
    1e0e:	b9 f4       	brne	.+46     	; 0x1e3e <vfprintf+0xd6>
    1e10:	36 fc       	sbrc	r3, 6
    1e12:	81 c1       	rjmp	.+770    	; 0x2116 <vfprintf+0x3ae>
    1e14:	23 2d       	mov	r18, r3
    1e16:	20 64       	ori	r18, 0x40	; 64
    1e18:	32 2e       	mov	r3, r18
    1e1a:	19 c0       	rjmp	.+50     	; 0x1e4e <vfprintf+0xe6>
    1e1c:	36 fe       	sbrs	r3, 6
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <vfprintf+0xc4>
    1e20:	8a e0       	ldi	r24, 0x0A	; 10
    1e22:	98 9e       	mul	r9, r24
    1e24:	20 0d       	add	r18, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	92 2e       	mov	r9, r18
    1e2a:	11 c0       	rjmp	.+34     	; 0x1e4e <vfprintf+0xe6>
    1e2c:	ea e0       	ldi	r30, 0x0A	; 10
    1e2e:	2e 9e       	mul	r2, r30
    1e30:	20 0d       	add	r18, r0
    1e32:	11 24       	eor	r1, r1
    1e34:	22 2e       	mov	r2, r18
    1e36:	f3 2d       	mov	r31, r3
    1e38:	f0 62       	ori	r31, 0x20	; 32
    1e3a:	3f 2e       	mov	r3, r31
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <vfprintf+0xe6>
    1e3e:	8c 36       	cpi	r24, 0x6C	; 108
    1e40:	21 f4       	brne	.+8      	; 0x1e4a <vfprintf+0xe2>
    1e42:	83 2d       	mov	r24, r3
    1e44:	80 68       	ori	r24, 0x80	; 128
    1e46:	38 2e       	mov	r3, r24
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <vfprintf+0xe6>
    1e4a:	88 36       	cpi	r24, 0x68	; 104
    1e4c:	41 f4       	brne	.+16     	; 0x1e5e <vfprintf+0xf6>
    1e4e:	f7 01       	movw	r30, r14
    1e50:	93 fd       	sbrc	r25, 3
    1e52:	85 91       	lpm	r24, Z+
    1e54:	93 ff       	sbrs	r25, 3
    1e56:	81 91       	ld	r24, Z+
    1e58:	7f 01       	movw	r14, r30
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	b3 cf       	rjmp	.-154    	; 0x1dc4 <vfprintf+0x5c>
    1e5e:	98 2f       	mov	r25, r24
    1e60:	9f 7d       	andi	r25, 0xDF	; 223
    1e62:	95 54       	subi	r25, 0x45	; 69
    1e64:	93 30       	cpi	r25, 0x03	; 3
    1e66:	28 f4       	brcc	.+10     	; 0x1e72 <vfprintf+0x10a>
    1e68:	0c 5f       	subi	r16, 0xFC	; 252
    1e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6c:	9f e3       	ldi	r25, 0x3F	; 63
    1e6e:	99 83       	std	Y+1, r25	; 0x01
    1e70:	0d c0       	rjmp	.+26     	; 0x1e8c <vfprintf+0x124>
    1e72:	83 36       	cpi	r24, 0x63	; 99
    1e74:	31 f0       	breq	.+12     	; 0x1e82 <vfprintf+0x11a>
    1e76:	83 37       	cpi	r24, 0x73	; 115
    1e78:	71 f0       	breq	.+28     	; 0x1e96 <vfprintf+0x12e>
    1e7a:	83 35       	cpi	r24, 0x53	; 83
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <vfprintf+0x118>
    1e7e:	59 c0       	rjmp	.+178    	; 0x1f32 <vfprintf+0x1ca>
    1e80:	21 c0       	rjmp	.+66     	; 0x1ec4 <vfprintf+0x15c>
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 81       	ld	r24, Z
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	0e 5f       	subi	r16, 0xFE	; 254
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	88 24       	eor	r8, r8
    1e8e:	83 94       	inc	r8
    1e90:	91 2c       	mov	r9, r1
    1e92:	53 01       	movw	r10, r6
    1e94:	13 c0       	rjmp	.+38     	; 0x1ebc <vfprintf+0x154>
    1e96:	28 01       	movw	r4, r16
    1e98:	f2 e0       	ldi	r31, 0x02	; 2
    1e9a:	4f 0e       	add	r4, r31
    1e9c:	51 1c       	adc	r5, r1
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	a0 80       	ld	r10, Z
    1ea2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ea4:	36 fe       	sbrs	r3, 6
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <vfprintf+0x146>
    1ea8:	69 2d       	mov	r22, r9
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <vfprintf+0x14a>
    1eae:	6f ef       	ldi	r22, 0xFF	; 255
    1eb0:	7f ef       	ldi	r23, 0xFF	; 255
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	0e 94 a0 10 	call	0x2140	; 0x2140 <strnlen>
    1eb8:	4c 01       	movw	r8, r24
    1eba:	82 01       	movw	r16, r4
    1ebc:	f3 2d       	mov	r31, r3
    1ebe:	ff 77       	andi	r31, 0x7F	; 127
    1ec0:	3f 2e       	mov	r3, r31
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <vfprintf+0x188>
    1ec4:	28 01       	movw	r4, r16
    1ec6:	22 e0       	ldi	r18, 0x02	; 2
    1ec8:	42 0e       	add	r4, r18
    1eca:	51 1c       	adc	r5, r1
    1ecc:	f8 01       	movw	r30, r16
    1ece:	a0 80       	ld	r10, Z
    1ed0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ed2:	36 fe       	sbrs	r3, 6
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <vfprintf+0x174>
    1ed6:	69 2d       	mov	r22, r9
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <vfprintf+0x178>
    1edc:	6f ef       	ldi	r22, 0xFF	; 255
    1ede:	7f ef       	ldi	r23, 0xFF	; 255
    1ee0:	c5 01       	movw	r24, r10
    1ee2:	0e 94 95 10 	call	0x212a	; 0x212a <strnlen_P>
    1ee6:	4c 01       	movw	r8, r24
    1ee8:	f3 2d       	mov	r31, r3
    1eea:	f0 68       	ori	r31, 0x80	; 128
    1eec:	3f 2e       	mov	r3, r31
    1eee:	82 01       	movw	r16, r4
    1ef0:	33 fc       	sbrc	r3, 3
    1ef2:	1b c0       	rjmp	.+54     	; 0x1f2a <vfprintf+0x1c2>
    1ef4:	82 2d       	mov	r24, r2
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	88 16       	cp	r8, r24
    1efa:	99 06       	cpc	r9, r25
    1efc:	b0 f4       	brcc	.+44     	; 0x1f2a <vfprintf+0x1c2>
    1efe:	b6 01       	movw	r22, r12
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    1f08:	2a 94       	dec	r2
    1f0a:	f4 cf       	rjmp	.-24     	; 0x1ef4 <vfprintf+0x18c>
    1f0c:	f5 01       	movw	r30, r10
    1f0e:	37 fc       	sbrc	r3, 7
    1f10:	85 91       	lpm	r24, Z+
    1f12:	37 fe       	sbrs	r3, 7
    1f14:	81 91       	ld	r24, Z+
    1f16:	5f 01       	movw	r10, r30
    1f18:	b6 01       	movw	r22, r12
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    1f20:	21 10       	cpse	r2, r1
    1f22:	2a 94       	dec	r2
    1f24:	21 e0       	ldi	r18, 0x01	; 1
    1f26:	82 1a       	sub	r8, r18
    1f28:	91 08       	sbc	r9, r1
    1f2a:	81 14       	cp	r8, r1
    1f2c:	91 04       	cpc	r9, r1
    1f2e:	71 f7       	brne	.-36     	; 0x1f0c <vfprintf+0x1a4>
    1f30:	e8 c0       	rjmp	.+464    	; 0x2102 <vfprintf+0x39a>
    1f32:	84 36       	cpi	r24, 0x64	; 100
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <vfprintf+0x1d2>
    1f36:	89 36       	cpi	r24, 0x69	; 105
    1f38:	41 f5       	brne	.+80     	; 0x1f8a <vfprintf+0x222>
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	37 fe       	sbrs	r3, 7
    1f3e:	07 c0       	rjmp	.+14     	; 0x1f4e <vfprintf+0x1e6>
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	0c 5f       	subi	r16, 0xFC	; 252
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4c:	08 c0       	rjmp	.+16     	; 0x1f5e <vfprintf+0x1f6>
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	07 2e       	mov	r0, r23
    1f54:	00 0c       	add	r0, r0
    1f56:	88 0b       	sbc	r24, r24
    1f58:	99 0b       	sbc	r25, r25
    1f5a:	0e 5f       	subi	r16, 0xFE	; 254
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	f3 2d       	mov	r31, r3
    1f60:	ff 76       	andi	r31, 0x6F	; 111
    1f62:	3f 2e       	mov	r3, r31
    1f64:	97 ff       	sbrs	r25, 7
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <vfprintf+0x212>
    1f68:	90 95       	com	r25
    1f6a:	80 95       	com	r24
    1f6c:	70 95       	com	r23
    1f6e:	61 95       	neg	r22
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	8f 4f       	sbci	r24, 0xFF	; 255
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	f0 68       	ori	r31, 0x80	; 128
    1f78:	3f 2e       	mov	r3, r31
    1f7a:	2a e0       	ldi	r18, 0x0A	; 10
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	a3 01       	movw	r20, r6
    1f80:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__ultoa_invert>
    1f84:	88 2e       	mov	r8, r24
    1f86:	86 18       	sub	r8, r6
    1f88:	45 c0       	rjmp	.+138    	; 0x2014 <vfprintf+0x2ac>
    1f8a:	85 37       	cpi	r24, 0x75	; 117
    1f8c:	31 f4       	brne	.+12     	; 0x1f9a <vfprintf+0x232>
    1f8e:	23 2d       	mov	r18, r3
    1f90:	2f 7e       	andi	r18, 0xEF	; 239
    1f92:	b2 2e       	mov	r11, r18
    1f94:	2a e0       	ldi	r18, 0x0A	; 10
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	25 c0       	rjmp	.+74     	; 0x1fe4 <vfprintf+0x27c>
    1f9a:	93 2d       	mov	r25, r3
    1f9c:	99 7f       	andi	r25, 0xF9	; 249
    1f9e:	b9 2e       	mov	r11, r25
    1fa0:	8f 36       	cpi	r24, 0x6F	; 111
    1fa2:	c1 f0       	breq	.+48     	; 0x1fd4 <vfprintf+0x26c>
    1fa4:	18 f4       	brcc	.+6      	; 0x1fac <vfprintf+0x244>
    1fa6:	88 35       	cpi	r24, 0x58	; 88
    1fa8:	79 f0       	breq	.+30     	; 0x1fc8 <vfprintf+0x260>
    1faa:	b5 c0       	rjmp	.+362    	; 0x2116 <vfprintf+0x3ae>
    1fac:	80 37       	cpi	r24, 0x70	; 112
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <vfprintf+0x24e>
    1fb0:	88 37       	cpi	r24, 0x78	; 120
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <vfprintf+0x254>
    1fb4:	b0 c0       	rjmp	.+352    	; 0x2116 <vfprintf+0x3ae>
    1fb6:	e9 2f       	mov	r30, r25
    1fb8:	e0 61       	ori	r30, 0x10	; 16
    1fba:	be 2e       	mov	r11, r30
    1fbc:	b4 fe       	sbrs	r11, 4
    1fbe:	0d c0       	rjmp	.+26     	; 0x1fda <vfprintf+0x272>
    1fc0:	fb 2d       	mov	r31, r11
    1fc2:	f4 60       	ori	r31, 0x04	; 4
    1fc4:	bf 2e       	mov	r11, r31
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <vfprintf+0x272>
    1fc8:	34 fe       	sbrs	r3, 4
    1fca:	0a c0       	rjmp	.+20     	; 0x1fe0 <vfprintf+0x278>
    1fcc:	29 2f       	mov	r18, r25
    1fce:	26 60       	ori	r18, 0x06	; 6
    1fd0:	b2 2e       	mov	r11, r18
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <vfprintf+0x278>
    1fd4:	28 e0       	ldi	r18, 0x08	; 8
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <vfprintf+0x27c>
    1fda:	20 e1       	ldi	r18, 0x10	; 16
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <vfprintf+0x27c>
    1fe0:	20 e1       	ldi	r18, 0x10	; 16
    1fe2:	32 e0       	ldi	r19, 0x02	; 2
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	b7 fe       	sbrs	r11, 7
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <vfprintf+0x290>
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	0c 5f       	subi	r16, 0xFC	; 252
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	06 c0       	rjmp	.+12     	; 0x2004 <vfprintf+0x29c>
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 5f       	subi	r16, 0xFE	; 254
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	a3 01       	movw	r20, r6
    2006:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__ultoa_invert>
    200a:	88 2e       	mov	r8, r24
    200c:	86 18       	sub	r8, r6
    200e:	fb 2d       	mov	r31, r11
    2010:	ff 77       	andi	r31, 0x7F	; 127
    2012:	3f 2e       	mov	r3, r31
    2014:	36 fe       	sbrs	r3, 6
    2016:	0d c0       	rjmp	.+26     	; 0x2032 <vfprintf+0x2ca>
    2018:	23 2d       	mov	r18, r3
    201a:	2e 7f       	andi	r18, 0xFE	; 254
    201c:	a2 2e       	mov	r10, r18
    201e:	89 14       	cp	r8, r9
    2020:	58 f4       	brcc	.+22     	; 0x2038 <vfprintf+0x2d0>
    2022:	34 fe       	sbrs	r3, 4
    2024:	0b c0       	rjmp	.+22     	; 0x203c <vfprintf+0x2d4>
    2026:	32 fc       	sbrc	r3, 2
    2028:	09 c0       	rjmp	.+18     	; 0x203c <vfprintf+0x2d4>
    202a:	83 2d       	mov	r24, r3
    202c:	8e 7e       	andi	r24, 0xEE	; 238
    202e:	a8 2e       	mov	r10, r24
    2030:	05 c0       	rjmp	.+10     	; 0x203c <vfprintf+0x2d4>
    2032:	b8 2c       	mov	r11, r8
    2034:	a3 2c       	mov	r10, r3
    2036:	03 c0       	rjmp	.+6      	; 0x203e <vfprintf+0x2d6>
    2038:	b8 2c       	mov	r11, r8
    203a:	01 c0       	rjmp	.+2      	; 0x203e <vfprintf+0x2d6>
    203c:	b9 2c       	mov	r11, r9
    203e:	a4 fe       	sbrs	r10, 4
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <vfprintf+0x2f8>
    2042:	fe 01       	movw	r30, r28
    2044:	e8 0d       	add	r30, r8
    2046:	f1 1d       	adc	r31, r1
    2048:	80 81       	ld	r24, Z
    204a:	80 33       	cpi	r24, 0x30	; 48
    204c:	21 f4       	brne	.+8      	; 0x2056 <vfprintf+0x2ee>
    204e:	9a 2d       	mov	r25, r10
    2050:	99 7e       	andi	r25, 0xE9	; 233
    2052:	a9 2e       	mov	r10, r25
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <vfprintf+0x300>
    2056:	a2 fe       	sbrs	r10, 2
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x2fe>
    205a:	b3 94       	inc	r11
    205c:	b3 94       	inc	r11
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <vfprintf+0x300>
    2060:	8a 2d       	mov	r24, r10
    2062:	86 78       	andi	r24, 0x86	; 134
    2064:	09 f0       	breq	.+2      	; 0x2068 <vfprintf+0x300>
    2066:	b3 94       	inc	r11
    2068:	a3 fc       	sbrc	r10, 3
    206a:	11 c0       	rjmp	.+34     	; 0x208e <vfprintf+0x326>
    206c:	a0 fe       	sbrs	r10, 0
    206e:	06 c0       	rjmp	.+12     	; 0x207c <vfprintf+0x314>
    2070:	b2 14       	cp	r11, r2
    2072:	88 f4       	brcc	.+34     	; 0x2096 <vfprintf+0x32e>
    2074:	28 0c       	add	r2, r8
    2076:	92 2c       	mov	r9, r2
    2078:	9b 18       	sub	r9, r11
    207a:	0e c0       	rjmp	.+28     	; 0x2098 <vfprintf+0x330>
    207c:	b2 14       	cp	r11, r2
    207e:	60 f4       	brcc	.+24     	; 0x2098 <vfprintf+0x330>
    2080:	b6 01       	movw	r22, r12
    2082:	80 e2       	ldi	r24, 0x20	; 32
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    208a:	b3 94       	inc	r11
    208c:	f7 cf       	rjmp	.-18     	; 0x207c <vfprintf+0x314>
    208e:	b2 14       	cp	r11, r2
    2090:	18 f4       	brcc	.+6      	; 0x2098 <vfprintf+0x330>
    2092:	2b 18       	sub	r2, r11
    2094:	02 c0       	rjmp	.+4      	; 0x209a <vfprintf+0x332>
    2096:	98 2c       	mov	r9, r8
    2098:	21 2c       	mov	r2, r1
    209a:	a4 fe       	sbrs	r10, 4
    209c:	10 c0       	rjmp	.+32     	; 0x20be <vfprintf+0x356>
    209e:	b6 01       	movw	r22, r12
    20a0:	80 e3       	ldi	r24, 0x30	; 48
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20a8:	a2 fe       	sbrs	r10, 2
    20aa:	17 c0       	rjmp	.+46     	; 0x20da <vfprintf+0x372>
    20ac:	a1 fc       	sbrc	r10, 1
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <vfprintf+0x34e>
    20b0:	88 e7       	ldi	r24, 0x78	; 120
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <vfprintf+0x352>
    20b6:	88 e5       	ldi	r24, 0x58	; 88
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	b6 01       	movw	r22, r12
    20bc:	0c c0       	rjmp	.+24     	; 0x20d6 <vfprintf+0x36e>
    20be:	8a 2d       	mov	r24, r10
    20c0:	86 78       	andi	r24, 0x86	; 134
    20c2:	59 f0       	breq	.+22     	; 0x20da <vfprintf+0x372>
    20c4:	a1 fe       	sbrs	r10, 1
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <vfprintf+0x364>
    20c8:	8b e2       	ldi	r24, 0x2B	; 43
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <vfprintf+0x366>
    20cc:	80 e2       	ldi	r24, 0x20	; 32
    20ce:	a7 fc       	sbrc	r10, 7
    20d0:	8d e2       	ldi	r24, 0x2D	; 45
    20d2:	b6 01       	movw	r22, r12
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20da:	89 14       	cp	r8, r9
    20dc:	38 f4       	brcc	.+14     	; 0x20ec <vfprintf+0x384>
    20de:	b6 01       	movw	r22, r12
    20e0:	80 e3       	ldi	r24, 0x30	; 48
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20e8:	9a 94       	dec	r9
    20ea:	f7 cf       	rjmp	.-18     	; 0x20da <vfprintf+0x372>
    20ec:	8a 94       	dec	r8
    20ee:	f3 01       	movw	r30, r6
    20f0:	e8 0d       	add	r30, r8
    20f2:	f1 1d       	adc	r31, r1
    20f4:	80 81       	ld	r24, Z
    20f6:	b6 01       	movw	r22, r12
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20fe:	81 10       	cpse	r8, r1
    2100:	f5 cf       	rjmp	.-22     	; 0x20ec <vfprintf+0x384>
    2102:	22 20       	and	r2, r2
    2104:	09 f4       	brne	.+2      	; 0x2108 <vfprintf+0x3a0>
    2106:	42 ce       	rjmp	.-892    	; 0x1d8c <vfprintf+0x24>
    2108:	b6 01       	movw	r22, r12
    210a:	80 e2       	ldi	r24, 0x20	; 32
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    2112:	2a 94       	dec	r2
    2114:	f6 cf       	rjmp	.-20     	; 0x2102 <vfprintf+0x39a>
    2116:	f6 01       	movw	r30, r12
    2118:	86 81       	ldd	r24, Z+6	; 0x06
    211a:	97 81       	ldd	r25, Z+7	; 0x07
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <vfprintf+0x3ba>
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	9f ef       	ldi	r25, 0xFF	; 255
    2122:	2b 96       	adiw	r28, 0x0b	; 11
    2124:	e2 e1       	ldi	r30, 0x12	; 18
    2126:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__epilogue_restores__>

0000212a <strnlen_P>:
    212a:	fc 01       	movw	r30, r24
    212c:	05 90       	lpm	r0, Z+
    212e:	61 50       	subi	r22, 0x01	; 1
    2130:	70 40       	sbci	r23, 0x00	; 0
    2132:	01 10       	cpse	r0, r1
    2134:	d8 f7       	brcc	.-10     	; 0x212c <strnlen_P+0x2>
    2136:	80 95       	com	r24
    2138:	90 95       	com	r25
    213a:	8e 0f       	add	r24, r30
    213c:	9f 1f       	adc	r25, r31
    213e:	08 95       	ret

00002140 <strnlen>:
    2140:	fc 01       	movw	r30, r24
    2142:	61 50       	subi	r22, 0x01	; 1
    2144:	70 40       	sbci	r23, 0x00	; 0
    2146:	01 90       	ld	r0, Z+
    2148:	01 10       	cpse	r0, r1
    214a:	d8 f7       	brcc	.-10     	; 0x2142 <strnlen+0x2>
    214c:	80 95       	com	r24
    214e:	90 95       	com	r25
    2150:	8e 0f       	add	r24, r30
    2152:	9f 1f       	adc	r25, r31
    2154:	08 95       	ret

00002156 <fputc>:
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	fb 01       	movw	r30, r22
    2160:	23 81       	ldd	r18, Z+3	; 0x03
    2162:	21 fd       	sbrc	r18, 1
    2164:	03 c0       	rjmp	.+6      	; 0x216c <fputc+0x16>
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	9f ef       	ldi	r25, 0xFF	; 255
    216a:	2c c0       	rjmp	.+88     	; 0x21c4 <fputc+0x6e>
    216c:	22 ff       	sbrs	r18, 2
    216e:	16 c0       	rjmp	.+44     	; 0x219c <fputc+0x46>
    2170:	46 81       	ldd	r20, Z+6	; 0x06
    2172:	57 81       	ldd	r21, Z+7	; 0x07
    2174:	24 81       	ldd	r18, Z+4	; 0x04
    2176:	35 81       	ldd	r19, Z+5	; 0x05
    2178:	42 17       	cp	r20, r18
    217a:	53 07       	cpc	r21, r19
    217c:	44 f4       	brge	.+16     	; 0x218e <fputc+0x38>
    217e:	a0 81       	ld	r26, Z
    2180:	b1 81       	ldd	r27, Z+1	; 0x01
    2182:	9d 01       	movw	r18, r26
    2184:	2f 5f       	subi	r18, 0xFF	; 255
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
    2188:	31 83       	std	Z+1, r19	; 0x01
    218a:	20 83       	st	Z, r18
    218c:	8c 93       	st	X, r24
    218e:	26 81       	ldd	r18, Z+6	; 0x06
    2190:	37 81       	ldd	r19, Z+7	; 0x07
    2192:	2f 5f       	subi	r18, 0xFF	; 255
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	37 83       	std	Z+7, r19	; 0x07
    2198:	26 83       	std	Z+6, r18	; 0x06
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <fputc+0x6e>
    219c:	8b 01       	movw	r16, r22
    219e:	ec 01       	movw	r28, r24
    21a0:	fb 01       	movw	r30, r22
    21a2:	00 84       	ldd	r0, Z+8	; 0x08
    21a4:	f1 85       	ldd	r31, Z+9	; 0x09
    21a6:	e0 2d       	mov	r30, r0
    21a8:	09 95       	icall
    21aa:	89 2b       	or	r24, r25
    21ac:	e1 f6       	brne	.-72     	; 0x2166 <fputc+0x10>
    21ae:	d8 01       	movw	r26, r16
    21b0:	16 96       	adiw	r26, 0x06	; 6
    21b2:	8d 91       	ld	r24, X+
    21b4:	9c 91       	ld	r25, X
    21b6:	17 97       	sbiw	r26, 0x07	; 7
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	17 96       	adiw	r26, 0x07	; 7
    21bc:	9c 93       	st	X, r25
    21be:	8e 93       	st	-X, r24
    21c0:	16 97       	sbiw	r26, 0x06	; 6
    21c2:	ce 01       	movw	r24, r28
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <__ultoa_invert>:
    21ce:	fa 01       	movw	r30, r20
    21d0:	aa 27       	eor	r26, r26
    21d2:	28 30       	cpi	r18, 0x08	; 8
    21d4:	51 f1       	breq	.+84     	; 0x222a <__ultoa_invert+0x5c>
    21d6:	20 31       	cpi	r18, 0x10	; 16
    21d8:	81 f1       	breq	.+96     	; 0x223a <__ultoa_invert+0x6c>
    21da:	e8 94       	clt
    21dc:	6f 93       	push	r22
    21de:	6e 7f       	andi	r22, 0xFE	; 254
    21e0:	6e 5f       	subi	r22, 0xFE	; 254
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	af 4f       	sbci	r26, 0xFF	; 255
    21ea:	b1 e0       	ldi	r27, 0x01	; 1
    21ec:	3e d0       	rcall	.+124    	; 0x226a <__ultoa_invert+0x9c>
    21ee:	b4 e0       	ldi	r27, 0x04	; 4
    21f0:	3c d0       	rcall	.+120    	; 0x226a <__ultoa_invert+0x9c>
    21f2:	67 0f       	add	r22, r23
    21f4:	78 1f       	adc	r23, r24
    21f6:	89 1f       	adc	r24, r25
    21f8:	9a 1f       	adc	r25, r26
    21fa:	a1 1d       	adc	r26, r1
    21fc:	68 0f       	add	r22, r24
    21fe:	79 1f       	adc	r23, r25
    2200:	8a 1f       	adc	r24, r26
    2202:	91 1d       	adc	r25, r1
    2204:	a1 1d       	adc	r26, r1
    2206:	6a 0f       	add	r22, r26
    2208:	71 1d       	adc	r23, r1
    220a:	81 1d       	adc	r24, r1
    220c:	91 1d       	adc	r25, r1
    220e:	a1 1d       	adc	r26, r1
    2210:	20 d0       	rcall	.+64     	; 0x2252 <__ultoa_invert+0x84>
    2212:	09 f4       	brne	.+2      	; 0x2216 <__ultoa_invert+0x48>
    2214:	68 94       	set
    2216:	3f 91       	pop	r19
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	26 9f       	mul	r18, r22
    221c:	11 24       	eor	r1, r1
    221e:	30 19       	sub	r19, r0
    2220:	30 5d       	subi	r19, 0xD0	; 208
    2222:	31 93       	st	Z+, r19
    2224:	de f6       	brtc	.-74     	; 0x21dc <__ultoa_invert+0xe>
    2226:	cf 01       	movw	r24, r30
    2228:	08 95       	ret
    222a:	46 2f       	mov	r20, r22
    222c:	47 70       	andi	r20, 0x07	; 7
    222e:	40 5d       	subi	r20, 0xD0	; 208
    2230:	41 93       	st	Z+, r20
    2232:	b3 e0       	ldi	r27, 0x03	; 3
    2234:	0f d0       	rcall	.+30     	; 0x2254 <__ultoa_invert+0x86>
    2236:	c9 f7       	brne	.-14     	; 0x222a <__ultoa_invert+0x5c>
    2238:	f6 cf       	rjmp	.-20     	; 0x2226 <__ultoa_invert+0x58>
    223a:	46 2f       	mov	r20, r22
    223c:	4f 70       	andi	r20, 0x0F	; 15
    223e:	40 5d       	subi	r20, 0xD0	; 208
    2240:	4a 33       	cpi	r20, 0x3A	; 58
    2242:	18 f0       	brcs	.+6      	; 0x224a <__ultoa_invert+0x7c>
    2244:	49 5d       	subi	r20, 0xD9	; 217
    2246:	31 fd       	sbrc	r19, 1
    2248:	40 52       	subi	r20, 0x20	; 32
    224a:	41 93       	st	Z+, r20
    224c:	02 d0       	rcall	.+4      	; 0x2252 <__ultoa_invert+0x84>
    224e:	a9 f7       	brne	.-22     	; 0x223a <__ultoa_invert+0x6c>
    2250:	ea cf       	rjmp	.-44     	; 0x2226 <__ultoa_invert+0x58>
    2252:	b4 e0       	ldi	r27, 0x04	; 4
    2254:	a6 95       	lsr	r26
    2256:	97 95       	ror	r25
    2258:	87 95       	ror	r24
    225a:	77 95       	ror	r23
    225c:	67 95       	ror	r22
    225e:	ba 95       	dec	r27
    2260:	c9 f7       	brne	.-14     	; 0x2254 <__ultoa_invert+0x86>
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	61 05       	cpc	r22, r1
    2266:	71 05       	cpc	r23, r1
    2268:	08 95       	ret
    226a:	9b 01       	movw	r18, r22
    226c:	ac 01       	movw	r20, r24
    226e:	0a 2e       	mov	r0, r26
    2270:	06 94       	lsr	r0
    2272:	57 95       	ror	r21
    2274:	47 95       	ror	r20
    2276:	37 95       	ror	r19
    2278:	27 95       	ror	r18
    227a:	ba 95       	dec	r27
    227c:	c9 f7       	brne	.-14     	; 0x2270 <__ultoa_invert+0xa2>
    227e:	62 0f       	add	r22, r18
    2280:	73 1f       	adc	r23, r19
    2282:	84 1f       	adc	r24, r20
    2284:	95 1f       	adc	r25, r21
    2286:	a0 1d       	adc	r26, r0
    2288:	08 95       	ret

0000228a <eeprom_read_block>:
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22

0000228e <eeprom_read_blraw>:
    228e:	fc 01       	movw	r30, r24
    2290:	f9 99       	sbic	0x1f, 1	; 31
    2292:	fe cf       	rjmp	.-4      	; 0x2290 <eeprom_read_blraw+0x2>
    2294:	06 c0       	rjmp	.+12     	; 0x22a2 <eeprom_read_blraw+0x14>
    2296:	f2 bd       	out	0x22, r31	; 34
    2298:	e1 bd       	out	0x21, r30	; 33
    229a:	f8 9a       	sbi	0x1f, 0	; 31
    229c:	31 96       	adiw	r30, 0x01	; 1
    229e:	00 b4       	in	r0, 0x20	; 32
    22a0:	0d 92       	st	X+, r0
    22a2:	41 50       	subi	r20, 0x01	; 1
    22a4:	50 40       	sbci	r21, 0x00	; 0
    22a6:	b8 f7       	brcc	.-18     	; 0x2296 <eeprom_read_blraw+0x8>
    22a8:	08 95       	ret

000022aa <eeprom_read_word>:
    22aa:	a8 e1       	ldi	r26, 0x18	; 24
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	42 e0       	ldi	r20, 0x02	; 2
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	0c 94 47 11 	jmp	0x228e	; 0x228e <eeprom_read_blraw>

000022b6 <__muluhisi3>:
    22b6:	0e 94 a5 11 	call	0x234a	; 0x234a <__umulhisi3>
    22ba:	a5 9f       	mul	r26, r21
    22bc:	90 0d       	add	r25, r0
    22be:	b4 9f       	mul	r27, r20
    22c0:	90 0d       	add	r25, r0
    22c2:	a4 9f       	mul	r26, r20
    22c4:	80 0d       	add	r24, r0
    22c6:	91 1d       	adc	r25, r1
    22c8:	11 24       	eor	r1, r1
    22ca:	08 95       	ret

000022cc <__mulshisi3>:
    22cc:	b7 ff       	sbrs	r27, 7
    22ce:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__muluhisi3>

000022d2 <__mulohisi3>:
    22d2:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__muluhisi3>
    22d6:	82 1b       	sub	r24, r18
    22d8:	93 0b       	sbc	r25, r19
    22da:	08 95       	ret

000022dc <__prologue_saves__>:
    22dc:	2f 92       	push	r2
    22de:	3f 92       	push	r3
    22e0:	4f 92       	push	r4
    22e2:	5f 92       	push	r5
    22e4:	6f 92       	push	r6
    22e6:	7f 92       	push	r7
    22e8:	8f 92       	push	r8
    22ea:	9f 92       	push	r9
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	ca 1b       	sub	r28, r26
    2306:	db 0b       	sbc	r29, r27
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	09 94       	ijmp

00002314 <__epilogue_restores__>:
    2314:	2a 88       	ldd	r2, Y+18	; 0x12
    2316:	39 88       	ldd	r3, Y+17	; 0x11
    2318:	48 88       	ldd	r4, Y+16	; 0x10
    231a:	5f 84       	ldd	r5, Y+15	; 0x0f
    231c:	6e 84       	ldd	r6, Y+14	; 0x0e
    231e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2320:	8c 84       	ldd	r8, Y+12	; 0x0c
    2322:	9b 84       	ldd	r9, Y+11	; 0x0b
    2324:	aa 84       	ldd	r10, Y+10	; 0x0a
    2326:	b9 84       	ldd	r11, Y+9	; 0x09
    2328:	c8 84       	ldd	r12, Y+8	; 0x08
    232a:	df 80       	ldd	r13, Y+7	; 0x07
    232c:	ee 80       	ldd	r14, Y+6	; 0x06
    232e:	fd 80       	ldd	r15, Y+5	; 0x05
    2330:	0c 81       	ldd	r16, Y+4	; 0x04
    2332:	1b 81       	ldd	r17, Y+3	; 0x03
    2334:	aa 81       	ldd	r26, Y+2	; 0x02
    2336:	b9 81       	ldd	r27, Y+1	; 0x01
    2338:	ce 0f       	add	r28, r30
    233a:	d1 1d       	adc	r29, r1
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	ed 01       	movw	r28, r26
    2348:	08 95       	ret

0000234a <__umulhisi3>:
    234a:	a2 9f       	mul	r26, r18
    234c:	b0 01       	movw	r22, r0
    234e:	b3 9f       	mul	r27, r19
    2350:	c0 01       	movw	r24, r0
    2352:	a3 9f       	mul	r26, r19
    2354:	70 0d       	add	r23, r0
    2356:	81 1d       	adc	r24, r1
    2358:	11 24       	eor	r1, r1
    235a:	91 1d       	adc	r25, r1
    235c:	b2 9f       	mul	r27, r18
    235e:	70 0d       	add	r23, r0
    2360:	81 1d       	adc	r24, r1
    2362:	11 24       	eor	r1, r1
    2364:	91 1d       	adc	r25, r1
    2366:	08 95       	ret

00002368 <_exit>:
    2368:	f8 94       	cli

0000236a <__stop_program>:
    236a:	ff cf       	rjmp	.-2      	; 0x236a <__stop_program>
