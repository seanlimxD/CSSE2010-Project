
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001f1c  00001fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000164  0080012c  0080012c  00001fdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ac9  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ce  00000000  00000000  00005f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020d4  00000000  00000000  000075ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009fc  00000000  00000000  000096d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e2  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022e8  00000000  00000000  0000b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000d49a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__ctors_end>
       4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      14:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_5>
      18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      40:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_16>
      44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      50:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_20>
      54:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__vector_21>
      58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2499>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2458>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
      b4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 53     ake Project by S
      c4:	65 61 6e 20 4c 69 6d 00                             ean Lim.

000000cc <__c.2456>:
      cc:	53 6e 61 6b 65 00                                   Snake.

000000d2 <__c.2034>:
      d2:	53 63 6f 72 65 3a 20 25 6c 64 00                    Score: %ld.

000000dd <numbers>:
      dd:	48 01 45 01 41 01 3d 01 39 01 35 01 31 01 2d 01     H.E.A.=.9.5.1.-.
      ed:	29 01 25 01                                         ).%.

000000f1 <letters>:
      f1:	b7 01 b3 01 af 01 ab 01 a7 01 a3 01 9f 01 9b 01     ................
     101:	98 01 94 01 90 01 8c 01 87 01 83 01 7f 01 7b 01     ..............{.
     111:	76 01 72 01 6e 01 69 01 65 01 60 01 5b 01 56 01     v.r.n.i.e.`.[.V.
     121:	51 01 4c 01                                         Q.L.

00000125 <cols_9>:
     125:	64 92 92 7d                                         d..}

00000129 <cols_8>:
     129:	6c 92 92 6d                                         l..m

0000012d <cols_7>:
     12d:	80 9e a0 c1                                         ....

00000131 <cols_6>:
     131:	7c 92 92 4d                                         |..M

00000135 <cols_5>:
     135:	e4 a2 a2 9d                                         ....

00000139 <cols_4>:
     139:	18 28 48 ff                                         .(H.

0000013d <cols_3>:
     13d:	44 92 92 6d                                         D..m

00000141 <cols_2>:
     141:	46 8a 92 63                                         F..c

00000145 <cols_1>:
     145:	42 fe 03                                            B..

00000148 <cols_0>:
     148:	7c 92 a2 7d                                         |..}

0000014c <cols_Z>:
     14c:	86 8a 92 a2 c3                                      .....

00000151 <cols_Y>:
     151:	e0 10 0e 10 e1                                      .....

00000156 <cols_X>:
     156:	c6 28 10 28 c7                                      .(.(.

0000015b <cols_W>:
     15b:	fc 02 1c 02 fd                                      .....

00000160 <cols_V>:
     160:	f8 04 02 04 f9                                      .....

00000165 <cols_U>:
     165:	fc 02 02 fd                                         ....

00000169 <cols_T>:
     169:	80 80 fe 80 81                                      .....

0000016e <cols_S>:
     16e:	64 92 92 4d                                         d..M

00000172 <cols_R>:
     172:	fe 90 98 67                                         ...g

00000176 <cols_Q>:
     176:	7c 82 8a 7c 03                                      |..|.

0000017b <cols_P>:
     17b:	fe 90 90 61                                         ...a

0000017f <cols_O>:
     17f:	7c 82 82 7d                                         |..}

00000183 <cols_N>:
     183:	fe 20 10 ff                                         . ..

00000187 <cols_M>:
     187:	fe 40 30 40 ff                                      .@0@.

0000018c <cols_L>:
     18c:	fe 02 02 03                                         ....

00000190 <cols_K>:
     190:	fe 10 28 c7                                         ..(.

00000194 <cols_J>:
     194:	04 02 02 fd                                         ....

00000198 <cols_I>:
     198:	82 fe 83                                            ...

0000019b <cols_H>:
     19b:	fe 10 10 ff                                         ....

0000019f <cols_G>:
     19f:	7c 82 92 5d                                         |..]

000001a3 <cols_F>:
     1a3:	fe 90 90 81                                         ....

000001a7 <cols_E>:
     1a7:	fe 92 92 83                                         ....

000001ab <cols_D>:
     1ab:	fe 82 82 7d                                         ...}

000001af <cols_C>:
     1af:	7c 82 82 45                                         |..E

000001b3 <cols_B>:
     1b3:	fe 92 92 6d                                         ...m

000001b7 <cols_A>:
     1b7:	7e 90 90 7f                                         ~...

000001bb <__c.2054>:
     1bb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001c2 <__c.2050>:
     1c2:	1b 5b 25 64 6d 00                                   .[%dm.

000001c8 <__c.2040>:
     1c8:	1b 5b 32 4a 00                                      .[2J.

000001cd <__c.2025>:
     1cd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001d6 <__ctors_end>:
     1d6:	11 24       	eor	r1, r1
     1d8:	1f be       	out	0x3f, r1	; 63
     1da:	cf ef       	ldi	r28, 0xFF	; 255
     1dc:	d8 e0       	ldi	r29, 0x08	; 8
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	cd bf       	out	0x3d, r28	; 61

000001e2 <__do_copy_data>:
     1e2:	11 e0       	ldi	r17, 0x01	; 1
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	ec e1       	ldi	r30, 0x1C	; 28
     1ea:	ff e1       	ldi	r31, 0x1F	; 31
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__do_copy_data+0x10>
     1ee:	05 90       	lpm	r0, Z+
     1f0:	0d 92       	st	X+, r0
     1f2:	ac 32       	cpi	r26, 0x2C	; 44
     1f4:	b1 07       	cpc	r27, r17
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <__do_copy_data+0xc>

000001f8 <__do_clear_bss>:
     1f8:	22 e0       	ldi	r18, 0x02	; 2
     1fa:	ac e2       	ldi	r26, 0x2C	; 44
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <.do_clear_bss_start>

00000200 <.do_clear_bss_loop>:
     200:	1d 92       	st	X+, r1

00000202 <.do_clear_bss_start>:
     202:	a0 39       	cpi	r26, 0x90	; 144
     204:	b2 07       	cpc	r27, r18
     206:	e1 f7       	brne	.-8      	; 0x200 <.do_clear_bss_loop>
     208:	0e 94 cc 06 	call	0xd98	; 0xd98 <main>
     20c:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <_exit>

00000210 <__bad_interrupt>:
     210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     214:	e8 e6       	ldi	r30, 0x68	; 104
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	82 60       	ori	r24, 0x02	; 2
     21c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     21e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     220:	ec e6       	ldi	r30, 0x6C	; 108
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	8f 60       	ori	r24, 0x0F	; 15
     228:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     22a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
     22e:	08 95       	ret

00000230 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     230:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
     234:	08 95       	ret

00000236 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     236:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
     23a:	18 16       	cp	r1, r24
     23c:	3c f5       	brge	.+78     	; 0x28c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     23e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     242:	6f b7       	in	r22, 0x3f	; 63
		cli();
     244:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     246:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <__data_end>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	b4 f0       	brlt	.+44     	; 0x27a <button_pushed+0x44>
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     254:	f9 01       	movw	r30, r18
     256:	e3 5d       	subi	r30, 0xD3	; 211
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	40 81       	ld	r20, Z
     25c:	f9 01       	movw	r30, r18
     25e:	e4 5d       	subi	r30, 0xD4	; 212
     260:	fe 4f       	sbci	r31, 0xFE	; 254
     262:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     264:	9f 5f       	subi	r25, 0xFF	; 255
     266:	29 2f       	mov	r18, r25
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
     26e:	04 2e       	mov	r0, r20
     270:	00 0c       	add	r0, r0
     272:	55 0b       	sbc	r21, r21
     274:	24 17       	cp	r18, r20
     276:	35 07       	cpc	r19, r21
     278:	6c f3       	brlt	.-38     	; 0x254 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     27a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <__data_end>
     27e:	91 50       	subi	r25, 0x01	; 1
     280:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <__data_end>
		
		if(interrupts_were_enabled) {
     284:	66 23       	and	r22, r22
     286:	1c f4       	brge	.+6      	; 0x28e <button_pushed+0x58>
			// Turn them back on again
			sei();
     288:	78 94       	sei
     28a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     28c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     28e:	08 95       	ret

00000290 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2ae:	43 b1       	in	r20, 0x03	; 3
     2b0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2b2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
     2b6:	88 30       	cpi	r24, 0x08	; 8
     2b8:	64 f5       	brge	.+88     	; 0x312 <__vector_5+0x82>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2be:	64 2f       	mov	r22, r20
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	9b 01       	movw	r18, r22
     2c4:	08 2e       	mov	r0, r24
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <__vector_5+0x3c>
     2c8:	35 95       	asr	r19
     2ca:	27 95       	ror	r18
     2cc:	0a 94       	dec	r0
     2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <__vector_5+0x38>
     2d0:	20 ff       	sbrs	r18, 0
     2d2:	1b c0       	rjmp	.+54     	; 0x30a <__vector_5+0x7a>
     2d4:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <last_button_state>
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	08 2e       	mov	r0, r24
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__vector_5+0x52>
     2de:	35 95       	asr	r19
     2e0:	27 95       	ror	r18
     2e2:	0a 94       	dec	r0
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <__vector_5+0x4e>
     2e6:	20 fd       	sbrc	r18, 0
     2e8:	10 c0       	rjmp	.+32     	; 0x30a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2ea:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	2e 0f       	add	r18, r30
     2f2:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <__data_end>
     2f6:	0e 2e       	mov	r0, r30
     2f8:	00 0c       	add	r0, r0
     2fa:	ff 0b       	sbc	r31, r31
     2fc:	e3 5d       	subi	r30, 0xD3	; 211
     2fe:	fe 4f       	sbci	r31, 0xFE	; 254
     300:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     302:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end>
     306:	28 30       	cpi	r18, 0x08	; 8
     308:	24 f4       	brge	.+8      	; 0x312 <__vector_5+0x82>
     30a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     30c:	84 30       	cpi	r24, 0x04	; 4
     30e:	91 05       	cpc	r25, r1
     310:	c1 f6       	brne	.-80     	; 0x2c2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     312:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <last_button_state>
}
     316:	ff 91       	pop	r31
     318:	ef 91       	pop	r30
     31a:	9f 91       	pop	r25
     31c:	8f 91       	pop	r24
     31e:	7f 91       	pop	r23
     320:	6f 91       	pop	r22
     322:	5f 91       	pop	r21
     324:	4f 91       	pop	r20
     326:	3f 91       	pop	r19
     328:	2f 91       	pop	r18
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     334:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <numFoodItems>
     338:	08 95       	ret

0000033a <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     33a:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <numFoodItems>
     33e:	13 16       	cp	r1, r19
     340:	84 f4       	brge	.+32     	; 0x362 <food_at+0x28>
        if(foodPositions[id] == posn) {
     342:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <foodPositions>
     346:	89 17       	cp	r24, r25
     348:	71 f0       	breq	.+28     	; 0x366 <food_at+0x2c>
     34a:	ef e6       	ldi	r30, 0x6F	; 111
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	03 c0       	rjmp	.+6      	; 0x358 <food_at+0x1e>
     352:	21 91       	ld	r18, Z+
     354:	28 17       	cp	r18, r24
     356:	49 f0       	breq	.+18     	; 0x36a <food_at+0x30>
     358:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     35a:	39 13       	cpse	r19, r25
     35c:	fa cf       	rjmp	.-12     	; 0x352 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	08 95       	ret
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 95       	ret
     36a:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     36c:	08 95       	ret

0000036e <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     36e:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	8f 3f       	cpi	r24, 0xFF	; 255
     376:	09 f4       	brne	.+2      	; 0x37a <is_food_at+0xc>
     378:	90 e0       	ldi	r25, 0x00	; 0
}
     37a:	89 2f       	mov	r24, r25
     37c:	08 95       	ret

0000037e <superfood_at>:
    }
    // No food found at the given position.
    return -1;
}

int8_t superfood_at(PosnType posn) {
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <superfood_position>
     384:	28 13       	cpse	r18, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
	if (posn == superfood_position){
		return 1;
	}
	return 0;
}
     388:	89 2f       	mov	r24, r25
     38a:	08 95       	ret

0000038c <add_food_item>:

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     396:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <numFoodItems>
     39a:	88 30       	cpi	r24, 0x08	; 8
     39c:	d4 f5       	brge	.+116    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     39e:	00 e0       	ldi	r16, 0x00	; 0
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	c0 e0       	ldi	r28, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <add_food_item+0x20>
     3a8:	0f 5f       	subi	r16, 0xFF	; 255
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     3ac:	2c 2f       	mov	r18, r28
     3ae:	cc 0f       	add	r28, r28
     3b0:	33 0b       	sbc	r19, r19
     3b2:	2d 5f       	subi	r18, 0xFD	; 253
     3b4:	3f 4f       	sbci	r19, 0xFF	; 255
     3b6:	20 0f       	add	r18, r16
     3b8:	31 1f       	adc	r19, r17
     3ba:	2f 70       	andi	r18, 0x0F	; 15
     3bc:	30 78       	andi	r19, 0x80	; 128
     3be:	33 23       	and	r19, r19
     3c0:	34 f4       	brge	.+12     	; 0x3ce <add_food_item+0x42>
     3c2:	21 50       	subi	r18, 0x01	; 1
     3c4:	31 09       	sbc	r19, r1
     3c6:	20 6f       	ori	r18, 0xF0	; 240
     3c8:	3f 6f       	ori	r19, 0xFF	; 255
     3ca:	2f 5f       	subi	r18, 0xFF	; 255
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	82 2f       	mov	r24, r18
     3d0:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     3d2:	6d 2f       	mov	r22, r29
     3d4:	dd 0f       	add	r29, r29
     3d6:	77 0b       	sbc	r23, r23
     3d8:	6b 5f       	subi	r22, 0xFB	; 251
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	67 70       	andi	r22, 0x07	; 7
     3de:	70 78       	andi	r23, 0x80	; 128
     3e0:	77 23       	and	r23, r23
     3e2:	34 f4       	brge	.+12     	; 0x3f0 <add_food_item+0x64>
     3e4:	61 50       	subi	r22, 0x01	; 1
     3e6:	71 09       	sbc	r23, r1
     3e8:	68 6f       	ori	r22, 0xF8	; 248
     3ea:	7f 6f       	ori	r23, 0xFF	; 255
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     3f2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
     3f6:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)));
     3f8:	03 36       	cpi	r16, 0x63	; 99
     3fa:	11 05       	cpc	r17, r1
     3fc:	61 f0       	breq	.+24     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3fe:	0e 94 96 09 	call	0x132c	; 0x132c <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     402:	81 11       	cpse	r24, r1
     404:	d1 cf       	rjmp	.-94     	; 0x3a8 <add_food_item+0x1c>
                (is_snake_at(test_position) || is_food_at(test_position)));
     406:	8f 2d       	mov	r24, r15
     408:	0e 94 b7 01 	call	0x36e	; 0x36e <is_food_at>
     40c:	81 11       	cpse	r24, r1
     40e:	cc cf       	rjmp	.-104    	; 0x3a8 <add_food_item+0x1c>
     410:	04 c0       	rjmp	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	0f c0       	rjmp	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	0d c0       	rjmp	.+26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     41a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <numFoodItems>
	foodPositions[newFoodID] = test_position;
     41e:	e8 2f       	mov	r30, r24
     420:	08 2e       	mov	r0, r24
     422:	00 0c       	add	r0, r0
     424:	ff 0b       	sbc	r31, r31
     426:	e2 59       	subi	r30, 0x92	; 146
     428:	fe 4f       	sbci	r31, 0xFE	; 254
     42a:	f0 82       	st	Z, r15
	numFoodItems++;
     42c:	8f 5f       	subi	r24, 0xFF	; 255
     42e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     432:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	08 95       	ret

00000440 <add_super_food>:

PosnType add_super_food(void){
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
		x = rand()%BOARD_WIDTH;
     446:	0e 94 8c 0b 	call	0x1718	; 0x1718 <rand>
     44a:	ec 01       	movw	r28, r24
		y = rand()%BOARD_HEIGHT;
     44c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <rand>
		test_position = position(x,y);
     450:	bc 01       	movw	r22, r24
     452:	67 70       	andi	r22, 0x07	; 7
     454:	70 78       	andi	r23, 0x80	; 128
     456:	77 23       	and	r23, r23
     458:	34 f4       	brge	.+12     	; 0x466 <add_super_food+0x26>
     45a:	61 50       	subi	r22, 0x01	; 1
     45c:	71 09       	sbc	r23, r1
     45e:	68 6f       	ori	r22, 0xF8	; 248
     460:	7f 6f       	ori	r23, 0xFF	; 255
     462:	6f 5f       	subi	r22, 0xFF	; 255
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	ce 01       	movw	r24, r28
     468:	8f 70       	andi	r24, 0x0F	; 15
     46a:	90 78       	andi	r25, 0x80	; 128
     46c:	99 23       	and	r25, r25
     46e:	24 f4       	brge	.+8      	; 0x478 <add_super_food+0x38>
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	80 6f       	ori	r24, 0xF0	; 240
     474:	9f 6f       	ori	r25, 0xFF	; 255
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
     47c:	c8 2f       	mov	r28, r24
     47e:	13 e6       	ldi	r17, 0x63	; 99
     480:	1e c0       	rjmp	.+60     	; 0x4be <add_super_food+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
		x = rand()%BOARD_WIDTH;
     482:	0e 94 8c 0b 	call	0x1718	; 0x1718 <rand>
     486:	ec 01       	movw	r28, r24
		y = rand()%BOARD_HEIGHT;
     488:	0e 94 8c 0b 	call	0x1718	; 0x1718 <rand>
		test_position = position(x,y);
     48c:	bc 01       	movw	r22, r24
     48e:	67 70       	andi	r22, 0x07	; 7
     490:	70 78       	andi	r23, 0x80	; 128
     492:	77 23       	and	r23, r23
     494:	34 f4       	brge	.+12     	; 0x4a2 <add_super_food+0x62>
     496:	61 50       	subi	r22, 0x01	; 1
     498:	71 09       	sbc	r23, r1
     49a:	68 6f       	ori	r22, 0xF8	; 248
     49c:	7f 6f       	ori	r23, 0xFF	; 255
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	90 78       	andi	r25, 0x80	; 128
     4a8:	99 23       	and	r25, r25
     4aa:	24 f4       	brge	.+8      	; 0x4b4 <add_super_food+0x74>
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	80 6f       	ori	r24, 0xF0	; 240
     4b0:	9f 6f       	ori	r25, 0xFF	; 255
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
     4b8:	c8 2f       	mov	r28, r24
     4ba:	11 50       	subi	r17, 0x01	; 1
		attempts++;
	} while(attempts < 100 && (is_snake_at(test_position) || is_food_at(test_position)));
     4bc:	59 f0       	breq	.+22     	; 0x4d4 <add_super_food+0x94>
     4be:	8c 2f       	mov	r24, r28
     4c0:	0e 94 96 09 	call	0x132c	; 0x132c <is_snake_at>
     4c4:	81 11       	cpse	r24, r1
     4c6:	dd cf       	rjmp	.-70     	; 0x482 <add_super_food+0x42>
     4c8:	8c 2f       	mov	r24, r28
     4ca:	0e 94 b7 01 	call	0x36e	; 0x36e <is_food_at>
     4ce:	81 11       	cpse	r24, r1
     4d0:	d8 cf       	rjmp	.-80     	; 0x482 <add_super_food+0x42>
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <add_super_food+0x98>
	if (attempts >= 100) {
		return INVALID_POSITION;
     4d4:	88 e0       	ldi	r24, 0x08	; 8
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <add_super_food+0x9e>
	}
	superfood_position = test_position;
     4d8:	c0 93 6c 01 	sts	0x016C, r28	; 0x80016c <superfood_position>
	return test_position;
     4dc:	8c 2f       	mov	r24, r28
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	08 95       	ret

000004e6 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     4e6:	e8 2f       	mov	r30, r24
     4e8:	88 0f       	add	r24, r24
     4ea:	ff 0b       	sbc	r31, r31
     4ec:	e2 59       	subi	r30, 0x92	; 146
     4ee:	fe 4f       	sbci	r31, 0xFE	; 254
}
     4f0:	80 81       	ld	r24, Z
     4f2:	08 95       	ret

000004f4 <get_superfood_position>:

PosnType get_superfood_position(){
	return superfood_position;
}
     4f4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <superfood_position>
     4f8:	08 95       	ret

000004fa <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     4fa:	88 23       	and	r24, r24
     4fc:	b4 f0       	brlt	.+44     	; 0x52a <remove_food+0x30>
     4fe:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <numFoodItems>
     502:	82 17       	cp	r24, r18
     504:	94 f4       	brge	.+36     	; 0x52a <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	82 17       	cp	r24, r18
     50a:	64 f4       	brge	.+24     	; 0x524 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     50c:	e8 2f       	mov	r30, r24
     50e:	08 2e       	mov	r0, r24
     510:	00 0c       	add	r0, r0
     512:	ff 0b       	sbc	r31, r31
     514:	e2 59       	subi	r30, 0x92	; 146
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	90 81       	ld	r25, Z
     51a:	31 97       	sbiw	r30, 0x01	; 1
     51c:	90 83       	st	Z, r25
     51e:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     520:	82 17       	cp	r24, r18
     522:	a4 f3       	brlt	.-24     	; 0x50c <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     524:	21 50       	subi	r18, 0x01	; 1
     526:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <numFoodItems>
     52a:	08 95       	ret

0000052c <remove_super_food>:
}

void remove_super_food(){
	superfood_position = position(NULL,NULL);
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
     534:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <superfood_position>
     538:	08 95       	ret

0000053a <move_rat>:
}

int8_t move_rat(void) {
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
	int8_t ratX;	/* head X position */
	int8_t ratY;	/* head Y position */
	PosnType newRatPosn;
    
	/* Current head position */
	ratX = x_position(foodPositions[0]);
     542:	ce e6       	ldi	r28, 0x6E	; 110
     544:	d1 e0       	ldi	r29, 0x01	; 1
     546:	88 81       	ld	r24, Y
     548:	0e 94 4d 04 	call	0x89a	; 0x89a <x_position>
     54c:	08 2f       	mov	r16, r24
     54e:	18 2f       	mov	r17, r24
	ratY = y_position(foodPositions[0]);
     550:	88 81       	ld	r24, Y
     552:	0e 94 50 04 	call	0x8a0	; 0x8a0 <y_position>
     556:	d8 2f       	mov	r29, r24
     558:	c8 2f       	mov	r28, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (rand()%4) {
     55a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <rand>
     55e:	83 70       	andi	r24, 0x03	; 3
     560:	90 78       	andi	r25, 0x80	; 128
     562:	99 23       	and	r25, r25
     564:	24 f4       	brge	.+8      	; 0x56e <move_rat+0x34>
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	8c 6f       	ori	r24, 0xFC	; 252
     56a:	9f 6f       	ori	r25, 0xFF	; 255
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	91 05       	cpc	r25, r1
     572:	09 f1       	breq	.+66     	; 0x5b6 <move_rat+0x7c>
     574:	1c f4       	brge	.+6      	; 0x57c <move_rat+0x42>
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	41 f0       	breq	.+16     	; 0x58a <move_rat+0x50>
     57a:	5e c0       	rjmp	.+188    	; 0x638 <move_rat+0xfe>
     57c:	83 30       	cpi	r24, 0x03	; 3
     57e:	91 05       	cpc	r25, r1
     580:	81 f1       	breq	.+96     	; 0x5e2 <move_rat+0xa8>
     582:	04 97       	sbiw	r24, 0x04	; 4
     584:	09 f4       	brne	.+2      	; 0x588 <move_rat+0x4e>
     586:	43 c0       	rjmp	.+134    	; 0x60e <move_rat+0xd4>
     588:	57 c0       	rjmp	.+174    	; 0x638 <move_rat+0xfe>
        case 1:
			if(ratY == BOARD_HEIGHT - 1 || (is_snake_at(newRatPosn) == 1 || food_at(newRatPosn) || superfood_at(newRatPosn))) {
     58a:	c7 30       	cpi	r28, 0x07	; 7
     58c:	71 f0       	breq	.+28     	; 0x5aa <move_rat+0x70>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 96 09 	call	0x132c	; 0x132c <is_snake_at>
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	49 f0       	breq	.+18     	; 0x5aa <move_rat+0x70>
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
     59e:	81 11       	cpse	r24, r1
     5a0:	04 c0       	rjmp	.+8      	; 0x5aa <move_rat+0x70>
     5a2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <superfood_position>
     5a6:	81 11       	cpse	r24, r1
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <move_rat+0x76>
				// Head is already at the top of the board - wrap around
				ratY -= 1;
     5aa:	cf ef       	ldi	r28, 0xFF	; 255
     5ac:	cd 0f       	add	r28, r29
     5ae:	44 c0       	rjmp	.+136    	; 0x638 <move_rat+0xfe>
			} else {
	            ratY += 1;
     5b0:	c1 e0       	ldi	r28, 0x01	; 1
     5b2:	cd 0f       	add	r28, r29
     5b4:	41 c0       	rjmp	.+130    	; 0x638 <move_rat+0xfe>
			}
            break;
        case 2:
			if(ratX == BOARD_WIDTH - 1 || (is_snake_at(newRatPosn) == 1 || food_at(newRatPosn) || superfood_at(newRatPosn))) {
     5b6:	1f 30       	cpi	r17, 0x0F	; 15
     5b8:	71 f0       	breq	.+28     	; 0x5d6 <move_rat+0x9c>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 96 09 	call	0x132c	; 0x132c <is_snake_at>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	49 f0       	breq	.+18     	; 0x5d6 <move_rat+0x9c>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
     5ca:	81 11       	cpse	r24, r1
     5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <move_rat+0x9c>
     5ce:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <superfood_position>
     5d2:	81 11       	cpse	r24, r1
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <move_rat+0xa2>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				ratX -= 1;
     5d6:	1f ef       	ldi	r17, 0xFF	; 255
     5d8:	10 0f       	add	r17, r16
     5da:	2e c0       	rjmp	.+92     	; 0x638 <move_rat+0xfe>
			} else {
				ratX += 1;
     5dc:	11 e0       	ldi	r17, 0x01	; 1
     5de:	10 0f       	add	r17, r16
     5e0:	2b c0       	rjmp	.+86     	; 0x638 <move_rat+0xfe>
			}
            break;
		/* YOUR CODE HERE to deal with other directions */
		case 3:
			if(ratY == 0 || (is_snake_at(newRatPosn) == 1 || food_at(newRatPosn) || superfood_at(newRatPosn))) {
     5e2:	cc 23       	and	r28, r28
     5e4:	71 f0       	breq	.+28     	; 0x602 <move_rat+0xc8>
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 96 09 	call	0x132c	; 0x132c <is_snake_at>
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	49 f0       	breq	.+18     	; 0x602 <move_rat+0xc8>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
     5f6:	81 11       	cpse	r24, r1
     5f8:	04 c0       	rjmp	.+8      	; 0x602 <move_rat+0xc8>
     5fa:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <superfood_position>
     5fe:	81 11       	cpse	r24, r1
     600:	03 c0       	rjmp	.+6      	; 0x608 <move_rat+0xce>
			// Head is already at the bottom of the board - wrap around
			ratY += 1;
     602:	c1 e0       	ldi	r28, 0x01	; 1
     604:	cd 0f       	add	r28, r29
     606:	18 c0       	rjmp	.+48     	; 0x638 <move_rat+0xfe>
			} else {
			ratY -= 1;
     608:	cf ef       	ldi	r28, 0xFF	; 255
     60a:	cd 0f       	add	r28, r29
     60c:	15 c0       	rjmp	.+42     	; 0x638 <move_rat+0xfe>
			}
			break;
		case 4:
			if(ratX == 0 || (is_snake_at(newRatPosn) == 1 || food_at(newRatPosn) || superfood_at(newRatPosn))) {
     60e:	11 23       	and	r17, r17
     610:	71 f0       	breq	.+28     	; 0x62e <move_rat+0xf4>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 96 09 	call	0x132c	; 0x132c <is_snake_at>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	49 f0       	breq	.+18     	; 0x62e <move_rat+0xf4>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
     622:	81 11       	cpse	r24, r1
     624:	04 c0       	rjmp	.+8      	; 0x62e <move_rat+0xf4>
     626:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <superfood_position>
     62a:	81 11       	cpse	r24, r1
     62c:	03 c0       	rjmp	.+6      	; 0x634 <move_rat+0xfa>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				ratX += 1;
     62e:	11 e0       	ldi	r17, 0x01	; 1
     630:	10 0f       	add	r17, r16
     632:	02 c0       	rjmp	.+4      	; 0x638 <move_rat+0xfe>
			} else {
				ratX -= 1;
     634:	1f ef       	ldi	r17, 0xFF	; 255
     636:	10 0f       	add	r17, r16
			}
			break;
    }

	newRatPosn = position(ratX, ratY);
     638:	6c 2f       	mov	r22, r28
     63a:	81 2f       	mov	r24, r17
     63c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
	/* Store the head position */
	foodPositions[0] = newRatPosn;
     640:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <foodPositions>
	return MOVE_OK;
}
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <update_display_at_position>:

// Define time interval
int time_elapse = 600;

// Helper function
static void update_display_at_position(PosnType posn, PixelColour colour) {
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	c8 2f       	mov	r28, r24
     658:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     65a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <y_position>
     65e:	d8 2f       	mov	r29, r24
     660:	8c 2f       	mov	r24, r28
     662:	0e 94 4d 04 	call	0x89a	; 0x89a <x_position>
     666:	41 2f       	mov	r20, r17
     668:	6d 2f       	mov	r22, r29
     66a:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	08 95       	ret

00000676 <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     67a:	0e 94 49 04 	call	0x892	; 0x892 <ledmatrix_clear>
	time_elapse = 600;
     67e:	88 e5       	ldi	r24, 0x58	; 88
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <time_elapse+0x1>
     686:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <time_elapse>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     68a:	0e 94 32 09 	call	0x1264	; 0x1264 <init_snake>
	
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     68e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <get_snake_head_position>
     692:	6f e0       	ldi	r22, 0x0F	; 15
     694:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     698:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <get_snake_tail_position>
     69c:	60 ef       	ldi	r22, 0xF0	; 240
     69e:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     6a2:	0e 94 9a 01 	call	0x334	; 0x334 <init_food>
     6a6:	c3 e0       	ldi	r28, 0x03	; 3
	
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     6a8:	0e 94 c6 01 	call	0x38c	; 0x38c <add_food_item>
     6ac:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     6ae:	0e 94 52 04 	call	0x8a4	; 0x8a4 <is_position_valid>
     6b2:	88 23       	and	r24, r24
     6b4:	21 f0       	breq	.+8      	; 0x6be <init_game+0x48>
			update_display_at_position(food_position, FOOD_COLOUR);
     6b6:	63 e3       	ldi	r22, 0x33	; 51
     6b8:	8d 2f       	mov	r24, r29
     6ba:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
     6be:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	
	for(int8_t i = 0; i < 3; i++) {
     6c0:	99 f7       	brne	.-26     	; 0x6a8 <init_game+0x32>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <attempt_to_move_rat>:
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}

int8_t attempt_to_move_rat(void){
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
	PosnType prior_rat_position= get_position_of_food(0);
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_position_of_food>
     6d4:	18 2f       	mov	r17, r24
	int8_t move_result = move_rat();
     6d6:	0e 94 9d 02 	call	0x53a	; 0x53a <move_rat>
     6da:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     6dc:	88 23       	and	r24, r24
     6de:	84 f0       	brlt	.+32     	; 0x700 <attempt_to_move_rat+0x38>
		return 0;
	}
	PosnType new_rat_position = get_position_of_food(0);
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_position_of_food>
     6e6:	d8 2f       	mov	r29, r24
	
	if(move_result == MOVE_OK) {
     6e8:	c1 30       	cpi	r28, 0x01	; 1
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <attempt_to_move_rat+0x2c>
		update_display_at_position(prior_rat_position, BACKGROUND_COLOUR);
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	81 2f       	mov	r24, r17
     6f0:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	}
	
	update_display_at_position(new_rat_position, FOOD_COLOUR);
     6f4:	63 e3       	ldi	r22, 0x33	; 51
     6f6:	8d 2f       	mov	r24, r29
     6f8:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	return 1;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <attempt_to_move_rat+0x3a>

int8_t attempt_to_move_rat(void){
	PosnType prior_rat_position= get_position_of_food(0);
	int8_t move_result = move_rat();
	if(move_result < 0) {
		return 0;
     700:	80 e0       	ldi	r24, 0x00	; 0
		update_display_at_position(prior_rat_position, BACKGROUND_COLOUR);
	}
	
	update_display_at_position(new_rat_position, FOOD_COLOUR);
	return 1;
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	08 95       	ret

0000070a <attempt_to_spawn_superfood>:

int8_t attempt_to_spawn_superfood(void){
     70a:	cf 93       	push	r28
	PosnType superfood_posn;
	superfood_posn = add_super_food();
     70c:	0e 94 20 02 	call	0x440	; 0x440 <add_super_food>
     710:	c8 2f       	mov	r28, r24
	if (is_position_valid(superfood_posn)){
     712:	0e 94 52 04 	call	0x8a4	; 0x8a4 <is_position_valid>
     716:	88 23       	and	r24, r24
     718:	21 f0       	breq	.+8      	; 0x722 <attempt_to_spawn_superfood+0x18>
		update_display_at_position(superfood_posn, COLOUR_ORANGE);
     71a:	6c e3       	ldi	r22, 0x3C	; 60
     71c:	8c 2f       	mov	r24, r28
     71e:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	}
	return 1;
} 
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <attempt_to_remove_superfood>:

void attempt_to_remove_superfood(void){
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
	if (get_superfood_position() != position(NULL,NULL)){
     72c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <get_superfood_position>
     730:	ec 01       	movw	r28, r24
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	c8 17       	cp	r28, r24
     73e:	d9 07       	cpc	r29, r25
     740:	39 f0       	breq	.+14     	; 0x750 <attempt_to_remove_superfood+0x28>
		update_display_at_position(get_superfood_position(), BACKGROUND_COLOUR);
     742:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <get_superfood_position>
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
		remove_super_food();	
     74c:	0e 94 96 02 	call	0x52c	; 0x52c <remove_super_food>
	}
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <attempt_to_move_snake_forward>:
		}
	}	
}

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     75e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <get_snake_head_position>
     762:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     764:	0e 94 b9 09 	call	0x1372	; 0x1372 <advance_snake_head>
     768:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     76a:	88 23       	and	r24, r24
     76c:	0c f4       	brge	.+2      	; 0x770 <attempt_to_move_snake_forward+0x1a>
     76e:	3f c0       	rjmp	.+126    	; 0x7ee <attempt_to_move_snake_forward+0x98>
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
	}
	PosnType new_head_position = get_snake_head_position();
     770:	0e 94 53 09 	call	0x12a6	; 0x12a6 <get_snake_head_position>
     774:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     776:	8e ef       	ldi	r24, 0xFE	; 254
     778:	8c 0f       	add	r24, r28
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	e8 f4       	brcc	.+58     	; 0x7b8 <attempt_to_move_snake_forward+0x62>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     77e:	81 2f       	mov	r24, r17
     780:	0e 94 9d 01 	call	0x33a	; 0x33a <food_at>
		remove_food(foodID);
     784:	0e 94 7d 02 	call	0x4fa	; 0x4fa <remove_food>
		add_to_score(3);
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <add_to_score>
		time_elapse -= 15;
     790:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <time_elapse>
     794:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <time_elapse+0x1>
     798:	0f 97       	sbiw	r24, 0x0f	; 15
     79a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <time_elapse+0x1>
     79e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <time_elapse>
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     7a2:	0e 94 c6 01 	call	0x38c	; 0x38c <add_food_item>
     7a6:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     7a8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <is_position_valid>
     7ac:	88 23       	and	r24, r24
     7ae:	21 f0       	breq	.+8      	; 0x7b8 <attempt_to_move_snake_forward+0x62>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     7b0:	63 e3       	ldi	r22, 0x33	; 51
     7b2:	80 2f       	mov	r24, r16
     7b4:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
		
		// We don't remove the eaten food from the display since we'll just
		// display the snake head at that position.
	}
	
	if (move_result == ATE_SUPERFOOD) {
     7b8:	c4 30       	cpi	r28, 0x04	; 4
     7ba:	39 f4       	brne	.+14     	; 0x7ca <attempt_to_move_snake_forward+0x74>
		add_to_score(10);
     7bc:	8a e0       	ldi	r24, 0x0A	; 10
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <add_to_score>
		attempt_to_remove_superfood();
     7c4:	0e 94 94 03 	call	0x728	; 0x728 <attempt_to_remove_superfood>
     7c8:	08 c0       	rjmp	.+16     	; 0x7da <attempt_to_move_snake_forward+0x84>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     7ca:	cd 7f       	andi	r28, 0xFD	; 253
     7cc:	c1 30       	cpi	r28, 0x01	; 1
     7ce:	29 f4       	brne	.+10     	; 0x7da <attempt_to_move_snake_forward+0x84>
		PosnType prev_tail_posn = advance_snake_tail();
     7d0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	}
	
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     7da:	60 ef       	ldi	r22, 0xF0	; 240
     7dc:	8d 2f       	mov	r24, r29
     7de:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     7e2:	6f e0       	ldi	r22, 0x0F	; 15
     7e4:	81 2f       	mov	r24, r17
     7e6:	0e 94 28 03 	call	0x650	; 0x650 <update_display_at_position>
	return 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <attempt_to_move_snake_forward+0x9a>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret

000007fa <get_time_elapse>:
	}
}

int get_time_elapse(){
	return time_elapse;
}
     7fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <time_elapse>
     7fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <time_elapse+0x1>
     802:	08 95       	ret

00000804 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	0e 94 4e 0a 	call	0x149c	; 0x149c <spi_setup_master>
     80a:	08 95       	ret

0000080c <ledmatrix_update_pixel>:
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	80 31       	cpi	r24, 0x10	; 16
     814:	b0 f4       	brcc	.+44     	; 0x842 <ledmatrix_update_pixel+0x36>
     816:	68 30       	cpi	r22, 0x08	; 8
     818:	a0 f4       	brcc	.+40     	; 0x842 <ledmatrix_update_pixel+0x36>
     81a:	14 2f       	mov	r17, r20
     81c:	c6 2f       	mov	r28, r22
     81e:	d8 2f       	mov	r29, r24
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     826:	6c 2f       	mov	r22, r28
     828:	67 70       	andi	r22, 0x07	; 7
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	68 9f       	mul	r22, r24
     82e:	90 01       	movw	r18, r0
     830:	11 24       	eor	r1, r1
     832:	8d 2f       	mov	r24, r29
     834:	8f 70       	andi	r24, 0x0F	; 15
     836:	82 2b       	or	r24, r18
     838:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     83c:	81 2f       	mov	r24, r17
     83e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	08 95       	ret

0000084a <ledmatrix_update_column>:
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	80 31       	cpi	r24, 0x10	; 16
     854:	90 f4       	brcc	.+36     	; 0x87a <ledmatrix_update_column+0x30>
     856:	8b 01       	movw	r16, r22
     858:	c8 2f       	mov	r28, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     860:	8c 2f       	mov	r24, r28
     862:	8f 70       	andi	r24, 0x0F	; 15
     864:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     868:	e8 01       	movw	r28, r16
     86a:	08 5f       	subi	r16, 0xF8	; 248
     86c:	1f 4f       	sbci	r17, 0xFF	; 255
     86e:	89 91       	ld	r24, Y+
     870:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     874:	c0 17       	cp	r28, r16
     876:	d1 07       	cpc	r29, r17
     878:	d1 f7       	brne	.-12     	; 0x86e <ledmatrix_update_column+0x24>
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <ledmatrix_shift_display_left>:
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     890:	08 95       	ret

00000892 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     892:	8f e0       	ldi	r24, 0x0F	; 15
     894:	0e 94 76 0a 	call	0x14ec	; 0x14ec <spi_send_byte>
     898:	08 95       	ret

0000089a <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     89a:	82 95       	swap	r24
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	08 95       	ret

000008a0 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     8a0:	8f 70       	andi	r24, 0x0F	; 15
     8a2:	08 95       	ret

000008a4 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     8a4:	83 fb       	bst	r24, 3
     8a6:	88 27       	eor	r24, r24
     8a8:	80 f9       	bld	r24, 0
}
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	89 27       	eor	r24, r25
     8ae:	08 95       	ret

000008b0 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     8b0:	20 e1       	ldi	r18, 0x10	; 16
     8b2:	82 9f       	mul	r24, r18
     8b4:	c0 01       	movw	r24, r0
     8b6:	11 24       	eor	r1, r1
     8b8:	67 70       	andi	r22, 0x07	; 7
}
     8ba:	86 2b       	or	r24, r22
     8bc:	08 95       	ret

000008be <init_SSD>:
}

void init_SSD()
{
	/* Set port C (all pins) to be outputs */
	DDRC = 0xFF;
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	87 b9       	out	0x07, r24	; 7

	/* Set port D, pin 0 to be an output */
	DDRA = 1;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	81 b9       	out	0x01, r24	; 1
     8c6:	08 95       	ret

000008c8 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     8c8:	0e 94 02 04 	call	0x804	; 0x804 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     8cc:	0e 94 0a 01 	call	0x214	; 0x214 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	7b e4       	ldi	r23, 0x4B	; 75
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 4a 08 	call	0x1094	; 0x1094 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     8de:	0e 94 b4 0a 	call	0x1568	; 0x1568 <init_timer0>
	
	// Set up our seven segment display
	init_SSD();
     8e2:	0e 94 5f 04 	call	0x8be	; 0x8be <init_SSD>
	
	// Turn on global interrupts
	sei();
     8e6:	78 94       	sei
     8e8:	08 95       	ret

000008ea <splash_screen>:

	/* Set port D, pin 0 to be an output */
	DDRA = 1;
}

void splash_screen(void) {
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 9e 0a 	call	0x153c	; 0x153c <set_display_attribute>
	clear_terminal();
     8fa:	0e 94 95 0a 	call	0x152a	; 0x152a <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     8fe:	0e 94 ab 0a 	call	0x1556	; 0x1556 <hide_cursor>
	move_cursor(3,3);
     902:	63 e0       	ldi	r22, 0x03	; 3
     904:	83 e0       	ldi	r24, 0x03	; 3
     906:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <move_cursor>
	printf_P(PSTR("Snake"));
     90a:	8c ec       	ldi	r24, 0xCC	; 204
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	9f 93       	push	r25
     910:	8f 93       	push	r24
     912:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
	
	move_cursor(3,5);
     916:	65 e0       	ldi	r22, 0x05	; 5
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     91e:	80 e2       	ldi	r24, 0x20	; 32
     920:	0e 94 9e 0a 	call	0x153c	; 0x153c <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Sean Lim"));	
     924:	84 ea       	ldi	r24, 0xA4	; 164
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     930:	85 e2       	ldi	r24, 0x25	; 37
     932:	0e 94 9e 0a 	call	0x153c	; 0x153c <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     936:	0e 94 49 04 	call	0x892	; 0x892 <ledmatrix_clear>
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     942:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     944:	0f 2e       	mov	r0, r31
     946:	ff e0       	ldi	r31, 0x0F	; 15
     948:	ff 2e       	mov	r15, r31
     94a:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     94c:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     94e:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     950:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
     952:	6c 2f       	mov	r22, r28
     954:	83 e2       	ldi	r24, 0x23	; 35
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 13 07 	call	0xe26	; 0xe26 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     95c:	0d c0       	rjmp	.+26     	; 0x978 <__stack+0x79>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     95e:	2f e7       	ldi	r18, 0x7F	; 127
     960:	8c e2       	ldi	r24, 0x2C	; 44
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	21 50       	subi	r18, 0x01	; 1
     966:	80 40       	sbci	r24, 0x00	; 0
     968:	90 40       	sbci	r25, 0x00	; 0
     96a:	e1 f7       	brne	.-8      	; 0x964 <__stack+0x65>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <__stack+0x6f>
     96e:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     970:	0e 94 1b 01 	call	0x236	; 0x236 <button_pushed>
     974:	8f 3f       	cpi	r24, 0xFF	; 255
     976:	a9 f5       	brne	.+106    	; 0x9e2 <__stack+0xe3>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("43051719", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     978:	0e 94 22 07 	call	0xe44	; 0xe44 <scroll_display>
     97c:	81 11       	cpse	r24, r1
     97e:	ef cf       	rjmp	.-34     	; 0x95e <__stack+0x5f>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     980:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <random>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	83 70       	andi	r24, 0x03	; 3
     98a:	99 27       	eor	r25, r25
     98c:	aa 27       	eor	r26, r26
     98e:	b0 78       	andi	r27, 0x80	; 128
     990:	bb 23       	and	r27, r27
     992:	54 f4       	brge	.+20     	; 0x9a8 <__stack+0xa9>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	8c 6f       	ori	r24, 0xFC	; 252
     99c:	9f 6f       	ori	r25, 0xFF	; 255
     99e:	af 6f       	ori	r26, 0xFF	; 255
     9a0:	bf 6f       	ori	r27, 0xFF	; 255
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	a1 1d       	adc	r26, r1
     9a6:	b1 1d       	adc	r27, r1
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	91 05       	cpc	r25, r1
     9ac:	a1 05       	cpc	r26, r1
     9ae:	b1 05       	cpc	r27, r1
     9b0:	91 f0       	breq	.+36     	; 0x9d6 <__stack+0xd7>
     9b2:	2c f4       	brge	.+10     	; 0x9be <__stack+0xbf>
     9b4:	89 2b       	or	r24, r25
     9b6:	8a 2b       	or	r24, r26
     9b8:	8b 2b       	or	r24, r27
     9ba:	59 f0       	breq	.+22     	; 0x9d2 <__stack+0xd3>
     9bc:	ca cf       	rjmp	.-108    	; 0x952 <__stack+0x53>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	91 05       	cpc	r25, r1
     9c2:	a1 05       	cpc	r26, r1
     9c4:	b1 05       	cpc	r27, r1
     9c6:	49 f0       	breq	.+18     	; 0x9da <__stack+0xdb>
     9c8:	03 97       	sbiw	r24, 0x03	; 3
     9ca:	a1 05       	cpc	r26, r1
     9cc:	b1 05       	cpc	r27, r1
     9ce:	39 f0       	breq	.+14     	; 0x9de <__stack+0xdf>
     9d0:	c0 cf       	rjmp	.-128    	; 0x952 <__stack+0x53>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     9d2:	cd 2f       	mov	r28, r29
     9d4:	be cf       	rjmp	.-132    	; 0x952 <__stack+0x53>
			case 1: colour = COLOUR_RED; break;
     9d6:	cf 2d       	mov	r28, r15
     9d8:	bc cf       	rjmp	.-136    	; 0x952 <__stack+0x53>
			case 2: colour = COLOUR_YELLOW; break;
     9da:	c0 2f       	mov	r28, r16
     9dc:	ba cf       	rjmp	.-140    	; 0x952 <__stack+0x53>
			case 3: colour = COLOUR_GREEN; break;
     9de:	c1 2f       	mov	r28, r17
     9e0:	b8 cf       	rjmp	.-144    	; 0x952 <__stack+0x53>
		}
	}
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	08 95       	ret

000009ee <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     9ee:	0e 94 95 0a 	call	0x152a	; 0x152a <clear_terminal>
	
	// Initialise the game and display
	init_game();
     9f2:	0e 94 3b 03 	call	0x676	; 0x676 <init_game>
		
	// Initialise the score
	init_score();
     9f6:	0e 94 d7 06 	call	0xdae	; 0xdae <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     9fa:	0e 94 18 01 	call	0x230	; 0x230 <empty_button_queue>
	clear_serial_input_buffer();
     9fe:	0e 94 98 08 	call	0x1130	; 0x1130 <clear_serial_input_buffer>
     a02:	08 95       	ret

00000a04 <play_game>:
}

void play_game(void) {
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	00 d0       	rcall	.+0      	; 0xa2a <play_game+0x26>
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <play_game+0x28>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <play_game+0x2a>
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
	
	uint32_t last_superfood_time;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();	
     a32:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     a36:	2b 01       	movw	r4, r22
     a38:	3c 01       	movw	r6, r24
	
	last_superfood_time = get_clock_ticks();
     a3a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     a3e:	6b 01       	movw	r12, r22
     a40:	7c 01       	movw	r14, r24
	
	last_rat_move_time = get_clock_ticks();
     a42:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     a46:	69 83       	std	Y+1, r22	; 0x01
     a48:	7a 83       	std	Y+2, r23	; 0x02
     a4a:	8b 83       	std	Y+3, r24	; 0x03
     a4c:	9c 83       	std	Y+4, r25	; 0x04
void play_game(void) {
	uint32_t last_move_time;
	uint32_t last_rat_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     a4e:	1d 82       	std	Y+5, r1	; 0x05
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     a50:	0e 94 1b 01 	call	0x236	; 0x236 <button_pushed>
     a54:	8e 83       	std	Y+6, r24	; 0x06
		
		if(button == -1) {
     a56:	8f 3f       	cpi	r24, 0xFF	; 255
     a58:	31 f5       	brne	.+76     	; 0xaa6 <play_game+0xa2>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     a5a:	0e 94 91 08 	call	0x1122	; 0x1122 <serial_input_available>
     a5e:	88 23       	and	r24, r24
     a60:	29 f1       	breq	.+74     	; 0xaac <play_game+0xa8>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     a62:	ea e8       	ldi	r30, 0x8A	; 138
     a64:	f2 e0       	ldi	r31, 0x02	; 2
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	0e 94 3e 0c 	call	0x187c	; 0x187c <fgetc>
     a6e:	08 2f       	mov	r16, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     a70:	fd 81       	ldd	r31, Y+5	; 0x05
     a72:	f1 11       	cpse	r31, r1
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <play_game+0x80>
     a76:	8b 31       	cpi	r24, 0x1B	; 27
     a78:	e1 f4       	brne	.+56     	; 0xab2 <play_game+0xae>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     a7a:	21 e0       	ldi	r18, 0x01	; 1
     a7c:	2d 83       	std	Y+5, r18	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     a7e:	1f ef       	ldi	r17, 0xFF	; 255
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
     a80:	0f ef       	ldi	r16, 0xFF	; 255
     a82:	1e c0       	rjmp	.+60     	; 0xac0 <play_game+0xbc>
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     a84:	3d 81       	ldd	r19, Y+5	; 0x05
     a86:	31 30       	cpi	r19, 0x01	; 1
     a88:	39 f4       	brne	.+14     	; 0xa98 <play_game+0x94>
     a8a:	8b 35       	cpi	r24, 0x5B	; 91
     a8c:	a1 f4       	brne	.+40     	; 0xab6 <play_game+0xb2>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     a8e:	42 e0       	ldi	r20, 0x02	; 2
     a90:	4d 83       	std	Y+5, r20	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     a92:	1f ef       	ldi	r17, 0xFF	; 255
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
     a94:	0f ef       	ldi	r16, 0xFF	; 255
     a96:	14 c0       	rjmp	.+40     	; 0xac0 <play_game+0xbc>
				} else if(characters_into_escape_sequence == 2) {
     a98:	5d 81       	ldd	r21, Y+5	; 0x05
     a9a:	52 30       	cpi	r21, 0x02	; 2
     a9c:	79 f4       	brne	.+30     	; 0xabc <play_game+0xb8>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     a9e:	18 2f       	mov	r17, r24
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
     aa0:	1d 82       	std	Y+5, r1	; 0x05
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
     aa2:	0f ef       	ldi	r16, 0xFF	; 255
     aa4:	0d c0       	rjmp	.+26     	; 0xac0 <play_game+0xbc>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     aa6:	1f ef       	ldi	r17, 0xFF	; 255
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     aa8:	0f ef       	ldi	r16, 0xFF	; 255
     aaa:	0a c0       	rjmp	.+20     	; 0xac0 <play_game+0xbc>
		escape_sequence_char = -1;
     aac:	1f ef       	ldi	r17, 0xFF	; 255
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     aae:	0f ef       	ldi	r16, 0xFF	; 255
     ab0:	07 c0       	rjmp	.+14     	; 0xac0 <play_game+0xbc>
		escape_sequence_char = -1;
     ab2:	1f ef       	ldi	r17, 0xFF	; 255
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <play_game+0xbc>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     ab6:	1d 82       	std	Y+5, r1	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     ab8:	1f ef       	ldi	r17, 0xFF	; 255
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <play_game+0xbc>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     abc:	1d 82       	std	Y+5, r1	; 0x05
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     abe:	1f ef       	ldi	r17, 0xFF	; 255
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
		if (get_clock_ticks()%2 == 0){
     ac0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     ac4:	60 fd       	sbrc	r22, 0
     ac6:	16 c0       	rjmp	.+44     	; 0xaf4 <play_game+0xf0>
			display_digit(get_snake_length()%10, 0);
     ac8:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_snake_length>
	sei();
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTA = digit;
     acc:	12 b8       	out	0x02, r1	; 2
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     ace:	ed ec       	ldi	r30, 0xCD	; 205
     ad0:	8e 9f       	mul	r24, r30
     ad2:	91 2d       	mov	r25, r1
     ad4:	11 24       	eor	r1, r1
     ad6:	96 95       	lsr	r25
     ad8:	96 95       	lsr	r25
     ada:	96 95       	lsr	r25
     adc:	99 0f       	add	r25, r25
     ade:	29 2f       	mov	r18, r25
     ae0:	22 0f       	add	r18, r18
     ae2:	22 0f       	add	r18, r18
     ae4:	92 0f       	add	r25, r18
     ae6:	89 1b       	sub	r24, r25
     ae8:	e8 2f       	mov	r30, r24
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	e6 5f       	subi	r30, 0xF6	; 246
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	80 81       	ld	r24, Z
     af2:	88 b9       	out	0x08, r24	; 8
			}
		}
		if (get_clock_ticks()%2 == 0){
			display_digit(get_snake_length()%10, 0);
		}
		if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
     af4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     af8:	25 e0       	ldi	r18, 0x05	; 5
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__udivmodsi4>
     b04:	67 2b       	or	r22, r23
     b06:	68 2b       	or	r22, r24
     b08:	69 2b       	or	r22, r25
     b0a:	a1 f4       	brne	.+40     	; 0xb34 <play_game+0x130>
     b0c:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_snake_length>
     b10:	8a 30       	cpi	r24, 0x0A	; 10
     b12:	80 f0       	brcs	.+32     	; 0xb34 <play_game+0x130>
			display_digit(get_snake_length()/10, 1);
     b14:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_snake_length>
	sei();
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTA = digit;
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	f2 b9       	out	0x02, r31	; 2
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     b1c:	2d ec       	ldi	r18, 0xCD	; 205
     b1e:	82 9f       	mul	r24, r18
     b20:	e1 2d       	mov	r30, r1
     b22:	11 24       	eor	r1, r1
     b24:	e6 95       	lsr	r30
     b26:	e6 95       	lsr	r30
     b28:	e6 95       	lsr	r30
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	e6 5f       	subi	r30, 0xF6	; 246
     b2e:	fe 4f       	sbci	r31, 0xFE	; 254
     b30:	80 81       	ld	r24, Z
     b32:	88 b9       	out	0x08, r24	; 8
		if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
			display_digit(get_snake_length()/10, 1);
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     b34:	3e 81       	ldd	r19, Y+6	; 0x06
     b36:	33 23       	and	r19, r19
     b38:	11 f0       	breq	.+4      	; 0xb3e <play_game+0x13a>
     b3a:	13 34       	cpi	r17, 0x43	; 67
     b3c:	21 f4       	brne	.+8      	; 0xb46 <play_game+0x142>
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 7f 09 	call	0x12fe	; 0x12fe <set_snake_dirn>
     b44:	77 c0       	rjmp	.+238    	; 0xc34 <play_game+0x230>
		} else  if (button==2 || escape_sequence_char == 'A') {
     b46:	4e 81       	ldd	r20, Y+6	; 0x06
     b48:	42 30       	cpi	r20, 0x02	; 2
     b4a:	11 f0       	breq	.+4      	; 0xb50 <play_game+0x14c>
     b4c:	11 34       	cpi	r17, 0x41	; 65
     b4e:	21 f4       	brne	.+8      	; 0xb58 <play_game+0x154>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 7f 09 	call	0x12fe	; 0x12fe <set_snake_dirn>
     b56:	6e c0       	rjmp	.+220    	; 0xc34 <play_game+0x230>
		} else if(button==3 || escape_sequence_char=='D') {
     b58:	5e 81       	ldd	r21, Y+6	; 0x06
     b5a:	53 30       	cpi	r21, 0x03	; 3
     b5c:	11 f0       	breq	.+4      	; 0xb62 <play_game+0x15e>
     b5e:	14 34       	cpi	r17, 0x44	; 68
     b60:	21 f4       	brne	.+8      	; 0xb6a <play_game+0x166>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	0e 94 7f 09 	call	0x12fe	; 0x12fe <set_snake_dirn>
     b68:	65 c0       	rjmp	.+202    	; 0xc34 <play_game+0x230>
		} else if (button==1 || escape_sequence_char == 'B') {
     b6a:	8e 81       	ldd	r24, Y+6	; 0x06
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	11 f0       	breq	.+4      	; 0xb74 <play_game+0x170>
     b70:	12 34       	cpi	r17, 0x42	; 66
     b72:	21 f4       	brne	.+8      	; 0xb7c <play_game+0x178>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	0e 94 7f 09 	call	0x12fe	; 0x12fe <set_snake_dirn>
     b7a:	5c c0       	rjmp	.+184    	; 0xc34 <play_game+0x230>
		} else if(serial_input == 'p' || serial_input == 'P') {
     b7c:	0f 7d       	andi	r16, 0xDF	; 223
     b7e:	00 35       	cpi	r16, 0x50	; 80
     b80:	09 f0       	breq	.+2      	; 0xb84 <play_game+0x180>
     b82:	58 c0       	rjmp	.+176    	; 0xc34 <play_game+0x230>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again. All other input (buttons, serial etc.) must be ignored.
			uint32_t unpause_timer = get_clock_ticks()-last_move_time; //time until snake should move again
     b84:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     b88:	4b 01       	movw	r8, r22
     b8a:	5c 01       	movw	r10, r24
     b8c:	84 18       	sub	r8, r4
     b8e:	95 08       	sbc	r9, r5
     b90:	a6 08       	sbc	r10, r6
     b92:	b7 08       	sbc	r11, r7
			char new_serial_input;
			while(1){
				if (get_clock_ticks()%2 == 0){
     b94:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     b98:	60 fd       	sbrc	r22, 0
     b9a:	16 c0       	rjmp	.+44     	; 0xbc8 <play_game+0x1c4>
					display_digit(get_snake_length()%10, 0);
     b9c:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_snake_length>
	sei();
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTA = digit;
     ba0:	12 b8       	out	0x02, r1	; 2
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     ba2:	ed ec       	ldi	r30, 0xCD	; 205
     ba4:	8e 9f       	mul	r24, r30
     ba6:	91 2d       	mov	r25, r1
     ba8:	11 24       	eor	r1, r1
     baa:	96 95       	lsr	r25
     bac:	96 95       	lsr	r25
     bae:	96 95       	lsr	r25
     bb0:	99 0f       	add	r25, r25
     bb2:	29 2f       	mov	r18, r25
     bb4:	22 0f       	add	r18, r18
     bb6:	22 0f       	add	r18, r18
     bb8:	92 0f       	add	r25, r18
     bba:	89 1b       	sub	r24, r25
     bbc:	e8 2f       	mov	r30, r24
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e6 5f       	subi	r30, 0xF6	; 246
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	80 81       	ld	r24, Z
     bc6:	88 b9       	out	0x08, r24	; 8
			char new_serial_input;
			while(1){
				if (get_clock_ticks()%2 == 0){
					display_digit(get_snake_length()%10, 0);
				}
				if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
     bc8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     bcc:	25 e0       	ldi	r18, 0x05	; 5
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__udivmodsi4>
     bd8:	67 2b       	or	r22, r23
     bda:	68 2b       	or	r22, r24
     bdc:	69 2b       	or	r22, r25
     bde:	a1 f4       	brne	.+40     	; 0xc08 <play_game+0x204>
     be0:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_snake_length>
     be4:	8a 30       	cpi	r24, 0x0A	; 10
     be6:	80 f0       	brcs	.+32     	; 0xc08 <play_game+0x204>
					display_digit(get_snake_length()/10, 1);
     be8:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_snake_length>
	sei();
}

void display_digit(uint8_t number, uint8_t digit)
{
	PORTA = digit;
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	f2 b9       	out	0x02, r31	; 2
	PORTC = seven_seg[number];	// We assume digit is in range 0 to 9
     bf0:	2d ec       	ldi	r18, 0xCD	; 205
     bf2:	82 9f       	mul	r24, r18
     bf4:	e1 2d       	mov	r30, r1
     bf6:	11 24       	eor	r1, r1
     bf8:	e6 95       	lsr	r30
     bfa:	e6 95       	lsr	r30
     bfc:	e6 95       	lsr	r30
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	e6 5f       	subi	r30, 0xF6	; 246
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	80 81       	ld	r24, Z
     c06:	88 b9       	out	0x08, r24	; 8
				}
				if (get_clock_ticks()%5 == 0 && get_snake_length()/10 != 0){
					display_digit(get_snake_length()/10, 1);
				}
				
				if(serial_input_available()){
     c08:	0e 94 91 08 	call	0x1122	; 0x1122 <serial_input_available>
     c0c:	88 23       	and	r24, r24
     c0e:	11 f2       	breq	.-124    	; 0xb94 <play_game+0x190>
					new_serial_input = fgetc(stdin);
     c10:	ea e8       	ldi	r30, 0x8A	; 138
     c12:	f2 e0       	ldi	r31, 0x02	; 2
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	0e 94 3e 0c 	call	0x187c	; 0x187c <fgetc>
					if (new_serial_input == 'p' || new_serial_input == 'P'){
     c1c:	8f 7d       	andi	r24, 0xDF	; 223
     c1e:	80 35       	cpi	r24, 0x50	; 80
     c20:	09 f0       	breq	.+2      	; 0xc24 <play_game+0x220>
     c22:	b8 cf       	rjmp	.-144    	; 0xb94 <play_game+0x190>
						last_move_time = get_clock_ticks()-(unpause_timer);
     c24:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     c28:	2b 01       	movw	r4, r22
     c2a:	3c 01       	movw	r6, r24
     c2c:	48 18       	sub	r4, r8
     c2e:	59 08       	sbc	r5, r9
     c30:	6a 08       	sbc	r6, r10
     c32:	7b 08       	sbc	r7, r11
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_time_elapse()) {
     c34:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     c38:	4b 01       	movw	r8, r22
     c3a:	5c 01       	movw	r10, r24
     c3c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <get_time_elapse>
     c40:	09 2e       	mov	r0, r25
     c42:	00 0c       	add	r0, r0
     c44:	aa 0b       	sbc	r26, r26
     c46:	bb 0b       	sbc	r27, r27
     c48:	84 0d       	add	r24, r4
     c4a:	95 1d       	adc	r25, r5
     c4c:	a6 1d       	adc	r26, r6
     c4e:	b7 1d       	adc	r27, r7
     c50:	88 16       	cp	r8, r24
     c52:	99 06       	cpc	r9, r25
     c54:	aa 06       	cpc	r10, r26
     c56:	bb 06       	cpc	r11, r27
     c58:	48 f0       	brcs	.+18     	; 0xc6c <play_game+0x268>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
     c5a:	0e 94 ab 03 	call	0x756	; 0x756 <attempt_to_move_snake_forward>
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <play_game+0x260>
     c62:	64 c0       	rjmp	.+200    	; 0xd2c <play_game+0x328>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
     c64:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     c68:	2b 01       	movw	r4, r22
     c6a:	3c 01       	movw	r6, r24
		}
		
		if (get_clock_ticks() >= last_superfood_time+superfood_interval) {
     c6c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     c70:	97 01       	movw	r18, r14
     c72:	86 01       	movw	r16, r12
     c74:	08 56       	subi	r16, 0x68	; 104
     c76:	15 4c       	sbci	r17, 0xC5	; 197
     c78:	2f 4f       	sbci	r18, 0xFF	; 255
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	60 17       	cp	r22, r16
     c7e:	71 07       	cpc	r23, r17
     c80:	82 07       	cpc	r24, r18
     c82:	93 07       	cpc	r25, r19
     c84:	d0 f0       	brcs	.+52     	; 0xcba <play_game+0x2b6>
			//spawn superfood
			if (!attempt_to_spawn_superfood()) {
     c86:	0e 94 85 03 	call	0x70a	; 0x70a <attempt_to_spawn_superfood>
     c8a:	88 23       	and	r24, r24
     c8c:	09 f4       	brne	.+2      	; 0xc90 <play_game+0x28c>
     c8e:	4e c0       	rjmp	.+156    	; 0xd2c <play_game+0x328>
				break;
			}
			last_superfood_time = get_clock_ticks();
     c90:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
			superfood_available = 1;
		}
		
		if (get_clock_ticks() >= last_superfood_time+superfood_disappearance_interval && superfood_available) {
     c98:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     c9c:	97 01       	movw	r18, r14
     c9e:	86 01       	movw	r16, r12
     ca0:	08 57       	subi	r16, 0x78	; 120
     ca2:	1c 4e       	sbci	r17, 0xEC	; 236
     ca4:	2f 4f       	sbci	r18, 0xFF	; 255
     ca6:	3f 4f       	sbci	r19, 0xFF	; 255
     ca8:	60 17       	cp	r22, r16
     caa:	71 07       	cpc	r23, r17
     cac:	82 07       	cpc	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	a0 f4       	brcc	.+40     	; 0xcda <play_game+0x2d6>
			//spawn superfood
			if (!attempt_to_spawn_superfood()) {
				break;
			}
			last_superfood_time = get_clock_ticks();
			superfood_available = 1;
     cb2:	22 24       	eor	r2, r2
     cb4:	23 94       	inc	r2
     cb6:	31 2c       	mov	r3, r1
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <play_game+0x2de>
		}
		
		if (get_clock_ticks() >= last_superfood_time+superfood_disappearance_interval && superfood_available) {
     cba:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     cbe:	97 01       	movw	r18, r14
     cc0:	86 01       	movw	r16, r12
     cc2:	08 57       	subi	r16, 0x78	; 120
     cc4:	1c 4e       	sbci	r17, 0xEC	; 236
     cc6:	2f 4f       	sbci	r18, 0xFF	; 255
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	60 17       	cp	r22, r16
     ccc:	71 07       	cpc	r23, r17
     cce:	82 07       	cpc	r24, r18
     cd0:	93 07       	cpc	r25, r19
     cd2:	38 f0       	brcs	.+14     	; 0xce2 <play_game+0x2de>
     cd4:	21 14       	cp	r2, r1
     cd6:	31 04       	cpc	r3, r1
     cd8:	21 f0       	breq	.+8      	; 0xce2 <play_game+0x2de>
			attempt_to_remove_superfood();
     cda:	0e 94 94 03 	call	0x728	; 0x728 <attempt_to_remove_superfood>
			superfood_available = 0;
     cde:	21 2c       	mov	r2, r1
     ce0:	31 2c       	mov	r3, r1
		}
		
		if (get_clock_ticks() >= last_rat_move_time + get_time_elapse()*2){
     ce2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     ce6:	4b 01       	movw	r8, r22
     ce8:	5c 01       	movw	r10, r24
     cea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <get_time_elapse>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	09 2e       	mov	r0, r25
     cf4:	00 0c       	add	r0, r0
     cf6:	aa 0b       	sbc	r26, r26
     cf8:	bb 0b       	sbc	r27, r27
     cfa:	29 81       	ldd	r18, Y+1	; 0x01
     cfc:	3a 81       	ldd	r19, Y+2	; 0x02
     cfe:	4b 81       	ldd	r20, Y+3	; 0x03
     d00:	5c 81       	ldd	r21, Y+4	; 0x04
     d02:	82 0f       	add	r24, r18
     d04:	93 1f       	adc	r25, r19
     d06:	a4 1f       	adc	r26, r20
     d08:	b5 1f       	adc	r27, r21
     d0a:	88 16       	cp	r8, r24
     d0c:	99 06       	cpc	r9, r25
     d0e:	aa 06       	cpc	r10, r26
     d10:	bb 06       	cpc	r11, r27
     d12:	08 f4       	brcc	.+2      	; 0xd16 <play_game+0x312>
     d14:	9d ce       	rjmp	.-710    	; 0xa50 <play_game+0x4c>
			if (!attempt_to_move_rat()) {
     d16:	0e 94 64 03 	call	0x6c8	; 0x6c8 <attempt_to_move_rat>
     d1a:	89 2b       	or	r24, r25
     d1c:	39 f0       	breq	.+14     	; 0xd2c <play_game+0x328>
				break;
			}
			last_rat_move_time = get_clock_ticks();
     d1e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_clock_ticks>
     d22:	69 83       	std	Y+1, r22	; 0x01
     d24:	7a 83       	std	Y+2, r23	; 0x02
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	92 ce       	rjmp	.-732    	; 0xa50 <play_game+0x4c>
		}
	}
	// If we get here the game is over. 
}
     d2c:	26 96       	adiw	r28, 0x06	; 6
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
     d52:	6f 90       	pop	r6
     d54:	5f 90       	pop	r5
     d56:	4f 90       	pop	r4
     d58:	3f 90       	pop	r3
     d5a:	2f 90       	pop	r2
     d5c:	08 95       	ret

00000d5e <handle_game_over>:


void handle_game_over() {
	move_cursor(10,14);
     d5e:	6e e0       	ldi	r22, 0x0E	; 14
     d60:	8a e0       	ldi	r24, 0x0A	; 10
     d62:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     d66:	8a e9       	ldi	r24, 0x9A	; 154
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
	move_cursor(10,15);
     d72:	6f e0       	ldi	r22, 0x0F	; 15
     d74:	8a e0       	ldi	r24, 0x0A	; 10
     d76:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     d7a:	8c e7       	ldi	r24, 0x7C	; 124
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
	while(button_pushed() == -1) {
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0e 94 1b 01 	call	0x236	; 0x236 <button_pushed>
     d92:	8f 3f       	cpi	r24, 0xFF	; 255
     d94:	e1 f3       	breq	.-8      	; 0xd8e <handle_game_over+0x30>
		; // wait until a button has been pushed
	}
	
     d96:	08 95       	ret

00000d98 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     d98:	0e 94 64 04 	call	0x8c8	; 0x8c8 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     d9c:	0e 94 75 04 	call	0x8ea	; 0x8ea <splash_screen>
	
	while(1) {
		new_game();
     da0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <new_game>
		play_game();
     da4:	0e 94 02 05 	call	0xa04	; 0xa04 <play_game>
		handle_game_over();
     da8:	0e 94 af 06 	call	0xd5e	; 0xd5e <handle_game_over>
     dac:	f9 cf       	rjmp	.-14     	; 0xda0 <main+0x8>

00000dae <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
     dae:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <score>
     db2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <score+0x1>
     db6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <score+0x2>
     dba:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <score+0x3>
     dbe:	08 95       	ret

00000dc0 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
     dc0:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <score>
     dc4:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <score+0x1>
     dc8:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <score+0x2>
     dcc:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <score+0x3>
     dd0:	48 0f       	add	r20, r24
     dd2:	59 1f       	adc	r21, r25
     dd4:	61 1d       	adc	r22, r1
     dd6:	71 1d       	adc	r23, r1
     dd8:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <score>
     ddc:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <score+0x1>
     de0:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <score+0x2>
     de4:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <score+0x3>
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     de8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <hide_cursor>
	move_cursor(50,0);
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	82 e3       	ldi	r24, 0x32	; 50
     df0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <move_cursor>
	printf_P(PSTR("Score: %ld"), score);
     df4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <score+0x3>
     df8:	8f 93       	push	r24
     dfa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <score+0x2>
     dfe:	8f 93       	push	r24
     e00:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <score+0x1>
     e04:	8f 93       	push	r24
     e06:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <score>
     e0a:	8f 93       	push	r24
     e0c:	82 ed       	ldi	r24, 0xD2	; 210
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9f 93       	push	r25
     e12:	8f 93       	push	r24
     e14:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	08 95       	ret

00000e26 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     e26:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <colour>
	display_string = string_to_display;
     e2a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <display_string+0x1>
     e2e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <display_string>
	next_col_ptr = 0;
     e32:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <next_col_ptr+0x1>
     e36:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <next_col_ptr>
	next_char_to_display = 0;
     e3a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <next_char_to_display+0x1>
     e3e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <next_char_to_display>
     e42:	08 95       	ret

00000e44 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	28 97       	sbiw	r28, 0x08	; 8
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     e5c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <next_col_ptr>
     e60:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <next_col_ptr+0x1>
     e64:	30 97       	sbiw	r30, 0x00	; 0
     e66:	81 f0       	breq	.+32     	; 0xe88 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     e68:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     e6a:	10 ff       	sbrs	r17, 0
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     e6e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <next_col_ptr+0x1>
     e72:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e76:	00 e0       	ldi	r16, 0x00	; 0
     e78:	6b c0       	rjmp	.+214    	; 0xf50 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     e7a:	31 96       	adiw	r30, 0x01	; 1
     e7c:	f0 93 40 01 	sts	0x0140, r31	; 0x800140 <next_col_ptr+0x1>
     e80:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	64 c0       	rjmp	.+200    	; 0xf50 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     e88:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <next_char_to_display>
     e8c:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <next_char_to_display+0x1>
     e90:	30 97       	sbiw	r30, 0x00	; 0
     e92:	09 f4       	brne	.+2      	; 0xe96 <scroll_display+0x52>
     e94:	49 c0       	rjmp	.+146    	; 0xf28 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     e96:	cf 01       	movw	r24, r30
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <next_char_to_display+0x1>
     e9e:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <next_char_to_display>
     ea2:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     ea4:	e1 11       	cpse	r30, r1
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     ea8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <next_char_to_display+0x1>
     eac:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <next_char_to_display>
			shift_countdown = 16;
     eb0:	80 e1       	ldi	r24, 0x10	; 16
     eb2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     eb6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	4a c0       	rjmp	.+148    	; 0xf50 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     ebc:	8f e9       	ldi	r24, 0x9F	; 159
     ebe:	8e 0f       	add	r24, r30
     ec0:	8a 31       	cpi	r24, 0x1A	; 26
     ec2:	70 f4       	brcc	.+28     	; 0xee0 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	e1 5d       	subi	r30, 0xD1	; 209
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	85 91       	lpm	r24, Z+
     ed0:	94 91       	lpm	r25, Z
     ed2:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <next_col_ptr+0x1>
     ed6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     eda:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     edc:	10 e0       	ldi	r17, 0x00	; 0
     ede:	38 c0       	rjmp	.+112    	; 0xf50 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     ee0:	8f eb       	ldi	r24, 0xBF	; 191
     ee2:	8e 0f       	add	r24, r30
     ee4:	8a 31       	cpi	r24, 0x1A	; 26
     ee6:	70 f4       	brcc	.+28     	; 0xf04 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	e1 59       	subi	r30, 0x91	; 145
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	85 91       	lpm	r24, Z+
     ef4:	94 91       	lpm	r25, Z
     ef6:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <next_col_ptr+0x1>
     efa:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     efe:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     f00:	10 e0       	ldi	r17, 0x00	; 0
     f02:	26 c0       	rjmp	.+76     	; 0xf50 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     f04:	80 ed       	ldi	r24, 0xD0	; 208
     f06:	8e 0f       	add	r24, r30
     f08:	8a 30       	cpi	r24, 0x0A	; 10
     f0a:	00 f5       	brcc	.+64     	; 0xf4c <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	e3 58       	subi	r30, 0x83	; 131
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	85 91       	lpm	r24, Z+
     f18:	94 91       	lpm	r25, Z
     f1a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <next_col_ptr+0x1>
     f1e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     f22:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     f28:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <display_string>
     f2c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     f30:	01 e0       	ldi	r16, 0x01	; 1
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	09 f0       	breq	.+2      	; 0xf38 <scroll_display+0xf4>
     f36:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     f38:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <next_char_to_display+0x1>
     f3c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <next_char_to_display>
		display_string = 0;
     f40:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <display_string+0x1>
     f44:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     f4c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     f4e:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     f50:	0e 94 42 04 	call	0x884	; 0x884 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     f54:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <colour>
     f58:	fe 01       	movw	r30, r28
     f5a:	38 96       	adiw	r30, 0x08	; 8
     f5c:	ce 01       	movw	r24, r28
     f5e:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     f60:	11 23       	and	r17, r17
     f62:	14 f4       	brge	.+4      	; 0xf68 <scroll_display+0x124>
			column_colour_data[i] = colour;
     f64:	20 83       	st	Z, r18
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
     f68:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     f6a:	11 0f       	add	r17, r17
     f6c:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     f6e:	e8 17       	cp	r30, r24
     f70:	f9 07       	cpc	r31, r25
     f72:	b1 f7       	brne	.-20     	; 0xf60 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     f74:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f e0       	ldi	r24, 0x0F	; 15
     f7e:	0e 94 25 04 	call	0x84a	; 0x84a <ledmatrix_update_column>
	if(shift_countdown > 0) {
     f82:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <shift_countdown.1854>
     f86:	88 23       	and	r24, r24
     f88:	89 f0       	breq	.+34     	; 0xfac <scroll_display+0x168>
		shift_countdown--;
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
     f90:	00 23       	and	r16, r16
     f92:	11 f0       	breq	.+4      	; 0xf98 <scroll_display+0x154>
     f94:	88 23       	and	r24, r24
     f96:	11 f0       	breq	.+4      	; 0xf9c <scroll_display+0x158>
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <scroll_display+0x15e>
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <scroll_display+0x15e>
     fa0:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	99 23       	and	r25, r25
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <scroll_display+0x16e>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     fac:	00 23       	and	r16, r16
     fae:	a1 f3       	breq	.-24     	; 0xf98 <scroll_display+0x154>
     fb0:	f7 cf       	rjmp	.-18     	; 0xfa0 <scroll_display+0x15c>
	return !finished;
}
     fb2:	28 96       	adiw	r28, 0x08	; 8
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     fc8:	cf 93       	push	r28
     fca:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     fcc:	8a 30       	cpi	r24, 0x0A	; 10
     fce:	19 f4       	brne	.+6      	; 0xfd6 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     fd0:	8d e0       	ldi	r24, 0x0D	; 13
     fd2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     fd6:	9f b7       	in	r25, 0x3f	; 63
     fd8:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     fdc:	99 23       	and	r25, r25
     fde:	29 f1       	breq	.+74     	; 0x102a <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     fe0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bytes_in_out_buffer>
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	d1 f3       	breq	.-12     	; 0xfdc <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     fe8:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     fea:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <out_insert_pos>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	8e 0f       	add	r24, r30
     ff2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <out_insert_pos>
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	e8 58       	subi	r30, 0x88	; 136
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     ffe:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bytes_in_out_buffer>
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1008:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <out_insert_pos>
    100c:	8f 3f       	cpi	r24, 0xFF	; 255
    100e:	11 f4       	brne	.+4      	; 0x1014 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1010:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1014:	e1 ec       	ldi	r30, 0xC1	; 193
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 62       	ori	r24, 0x20	; 32
    101c:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    101e:	99 23       	and	r25, r25
    1020:	39 f0       	breq	.+14     	; 0x1030 <uart_put_char+0x68>
		sei();
    1022:	78 94       	sei
	}
	return 0;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
}
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1038:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <bytes_in_input_buffer>
    103c:	88 23       	and	r24, r24
    103e:	e1 f3       	breq	.-8      	; 0x1038 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1040:	2f b7       	in	r18, 0x3f	; 63
    1042:	20 78       	andi	r18, 0x80	; 128
	cli();
    1044:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1046:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <input_insert_pos>
    104a:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <bytes_in_input_buffer>
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	83 1b       	sub	r24, r19
    1052:	91 09       	sbc	r25, r1
    1054:	5a f4       	brpl	.+22     	; 0x106c <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1056:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <input_insert_pos>
    105a:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	e8 1b       	sub	r30, r24
    1062:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1064:	e8 57       	subi	r30, 0x78	; 120
    1066:	fd 4f       	sbci	r31, 0xFD	; 253
    1068:	80 81       	ld	r24, Z
    106a:	0a c0       	rjmp	.+20     	; 0x1080 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    106c:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <input_insert_pos>
    1070:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <bytes_in_input_buffer>
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	e8 1b       	sub	r30, r24
    1078:	f1 09       	sbc	r31, r1
    107a:	e8 58       	subi	r30, 0x88	; 136
    107c:	fd 4f       	sbci	r31, 0xFD	; 253
    107e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1080:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <bytes_in_input_buffer>
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    108a:	22 23       	and	r18, r18
    108c:	09 f0       	breq	.+2      	; 0x1090 <uart_get_char+0x58>
		sei();
    108e:	78 94       	sei
	}	
	return c;
}
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	08 95       	ret

00001094 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1094:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1098:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <bytes_in_out_buffer>
	input_insert_pos = 0;
    109c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <input_insert_pos>
	bytes_in_input_buffer = 0;
    10a0:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <bytes_in_input_buffer>
	input_overrun = 0;
    10a4:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    10a8:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 1f       	adc	r27, r27
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	aa 1f       	adc	r26, r26
    10be:	bb 1f       	adc	r27, r27
    10c0:	9c 01       	movw	r18, r24
    10c2:	ad 01       	movw	r20, r26
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	44 1f       	adc	r20, r20
    10ca:	55 1f       	adc	r21, r21
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	72 e1       	ldi	r23, 0x12	; 18
    10d0:	8a e7       	ldi	r24, 0x7A	; 122
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 21 0b 	call	0x1642	; 0x1642 <__divmodsi4>
    10d8:	ba 01       	movw	r22, r20
    10da:	a9 01       	movw	r20, r18
    10dc:	4f 5f       	subi	r20, 0xFF	; 255
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	6f 4f       	sbci	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	db 01       	movw	r26, r22
    10e6:	ca 01       	movw	r24, r20
    10e8:	1a f4       	brpl	.+6      	; 0x10f0 <init_serial_stdio+0x5c>
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	a1 1d       	adc	r26, r1
    10ee:	b1 1d       	adc	r27, r1
    10f0:	b5 95       	asr	r27
    10f2:	a7 95       	ror	r26
    10f4:	97 95       	ror	r25
    10f6:	87 95       	ror	r24
    10f8:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    10fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    10fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1102:	e1 ec       	ldi	r30, 0xC1	; 193
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	88 e1       	ldi	r24, 0x18	; 24
    1108:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    110a:	80 81       	ld	r24, Z
    110c:	80 68       	ori	r24, 0x80	; 128
    110e:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1110:	ea e8       	ldi	r30, 0x8A	; 138
    1112:	f2 e0       	ldi	r31, 0x02	; 2
    1114:	85 e1       	ldi	r24, 0x15	; 21
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	93 83       	std	Z+3, r25	; 0x03
    111a:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
    1120:	08 95       	ret

00001122 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1122:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <bytes_in_input_buffer>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	91 11       	cpse	r25, r1
    112a:	01 c0       	rjmp	.+2      	; 0x112e <serial_input_available+0xc>
    112c:	80 e0       	ldi	r24, 0x00	; 0
}
    112e:	08 95       	ret

00001130 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1130:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1134:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <bytes_in_input_buffer>
    1138:	08 95       	ret

0000113a <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	2f 93       	push	r18
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    114e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bytes_in_out_buffer>
    1152:	88 23       	and	r24, r24
    1154:	29 f1       	breq	.+74     	; 0x11a0 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1156:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <out_insert_pos>
    115a:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <bytes_in_out_buffer>
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	82 1b       	sub	r24, r18
    1162:	91 09       	sbc	r25, r1
    1164:	5a f4       	brpl	.+22     	; 0x117c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1166:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <out_insert_pos>
    116a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	e8 1b       	sub	r30, r24
    1172:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1174:	e9 58       	subi	r30, 0x89	; 137
    1176:	fd 4f       	sbci	r31, 0xFD	; 253
    1178:	90 81       	ld	r25, Z
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    117c:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <out_insert_pos>
    1180:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bytes_in_out_buffer>
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	e8 1b       	sub	r30, r24
    1188:	f1 09       	sbc	r31, r1
    118a:	e8 58       	subi	r30, 0x88	; 136
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1190:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bytes_in_out_buffer>
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    119a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    11a0:	e1 ec       	ldi	r30, 0xC1	; 193
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 7d       	andi	r24, 0xDF	; 223
    11a8:	80 83       	st	Z, r24
	}
}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	cf 93       	push	r28
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    11e2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    11e6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <do_echo>
    11ea:	88 23       	and	r24, r24
    11ec:	49 f0       	breq	.+18     	; 0x1200 <__vector_20+0x42>
    11ee:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bytes_in_out_buffer>
    11f2:	8f 3f       	cpi	r24, 0xFF	; 255
    11f4:	29 f0       	breq	.+10     	; 0x1200 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	8c 2f       	mov	r24, r28
    11fc:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1200:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <bytes_in_input_buffer>
    1204:	80 31       	cpi	r24, 0x10	; 16
    1206:	20 f0       	brcs	.+8      	; 0x1210 <__vector_20+0x52>
		input_overrun = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <input_overrun>
    120e:	18 c0       	rjmp	.+48     	; 0x1240 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1210:	cd 30       	cpi	r28, 0x0D	; 13
    1212:	09 f4       	brne	.+2      	; 0x1216 <__vector_20+0x58>
			c = '\n';
    1214:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1216:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <input_insert_pos>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8e 0f       	add	r24, r30
    121e:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <input_insert_pos>
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	e8 58       	subi	r30, 0x88	; 136
    1226:	fd 4f       	sbci	r31, 0xFD	; 253
    1228:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    122a:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <bytes_in_input_buffer>
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1234:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <input_insert_pos>
    1238:	80 31       	cpi	r24, 0x10	; 16
    123a:	11 f4       	brne	.+4      	; 0x1240 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    123c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <input_insert_pos>
		}
	}
}
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	cf 91       	pop	r28
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <snakeLength>
	snakeTailIndex = 0;
    1270:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <snakeTailIndex>
	snakeHeadIndex = 1;
    1274:	c1 e0       	ldi	r28, 0x01	; 1
    1276:	c0 93 45 01 	sts	0x0145, r28	; 0x800145 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
    1282:	07 e4       	ldi	r16, 0x47	; 71
    1284:	11 e0       	ldi	r17, 0x01	; 1
    1286:	f8 01       	movw	r30, r16
    1288:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
    1292:	f8 01       	movw	r30, r16
    1294:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1296:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    129a:	c0 93 42 01 	sts	0x0142, r28	; 0x800142 <nextSnakeDirn>
}
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

000012a6 <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    12a6:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <snakeHeadIndex>
    12aa:	0e 2e       	mov	r0, r30
    12ac:	00 0c       	add	r0, r0
    12ae:	ff 0b       	sbc	r31, r31
    12b0:	e9 5b       	subi	r30, 0xB9	; 185
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
}
    12b4:	80 81       	ld	r24, Z
    12b6:	08 95       	ret

000012b8 <get_snake_tail_position>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    12b8:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <snakeTailIndex>
    12bc:	0e 2e       	mov	r0, r30
    12be:	00 0c       	add	r0, r0
    12c0:	ff 0b       	sbc	r31, r31
    12c2:	e9 5b       	subi	r30, 0xB9	; 185
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
}
    12c6:	80 81       	ld	r24, Z
    12c8:	08 95       	ret

000012ca <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    12ca:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <snakeLength>
    12ce:	08 95       	ret

000012d0 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    12d0:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <snakeTailIndex>
    12d4:	e9 2f       	mov	r30, r25
    12d6:	09 2e       	mov	r0, r25
    12d8:	00 0c       	add	r0, r0
    12da:	ff 0b       	sbc	r31, r31
    12dc:	e9 5b       	subi	r30, 0xB9	; 185
    12de:	fe 4f       	sbci	r31, 0xFE	; 254
    12e0:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    12e2:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    12e4:	91 32       	cpi	r25, 0x21	; 33
    12e6:	19 f0       	breq	.+6      	; 0x12ee <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    12e8:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <snakeTailIndex>
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    12ee:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <snakeTailIndex>
	}
	snakeLength--;
    12f2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <snakeLength>
    12f6:	91 50       	subi	r25, 0x01	; 1
    12f8:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <snakeLength>
	
	return prev_tail_position;
}
    12fc:	08 95       	ret

000012fe <set_snake_dirn>:
	** is not opposite to the current direction (stored in curSnakeDirn). 
	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	if ((curSnakeDirn == SNAKE_LEFT && dirn == SNAKE_RIGHT) || (curSnakeDirn == SNAKE_RIGHT && dirn == SNAKE_LEFT) ||
    12fe:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <curSnakeDirn>
    1302:	93 30       	cpi	r25, 0x03	; 3
    1304:	19 f4       	brne	.+6      	; 0x130c <set_snake_dirn+0xe>
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	71 f4       	brne	.+28     	; 0x1326 <set_snake_dirn+0x28>
    130a:	08 95       	ret
    130c:	91 30       	cpi	r25, 0x01	; 1
    130e:	19 f4       	brne	.+6      	; 0x1316 <set_snake_dirn+0x18>
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	49 f4       	brne	.+18     	; 0x1326 <set_snake_dirn+0x28>
    1314:	08 95       	ret
    1316:	91 11       	cpse	r25, r1
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <set_snake_dirn+0x22>
		(curSnakeDirn == SNAKE_UP && dirn == SNAKE_DOWN) || (curSnakeDirn == SNAKE_DOWN && dirn == SNAKE_UP)) {
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	21 f4       	brne	.+8      	; 0x1326 <set_snake_dirn+0x28>
    131e:	08 95       	ret
    1320:	92 30       	cpi	r25, 0x02	; 2
    1322:	09 f4       	brne	.+2      	; 0x1326 <set_snake_dirn+0x28>
    1324:	81 11       	cpse	r24, r1
			return;	
		}
    
    nextSnakeDirn = dirn;
    1326:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <nextSnakeDirn>
    132a:	08 95       	ret

0000132c <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    132c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1330:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1334:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1336:	0d c0       	rjmp	.+26     	; 0x1352 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1338:	e9 2f       	mov	r30, r25
    133a:	09 2e       	mov	r0, r25
    133c:	00 0c       	add	r0, r0
    133e:	ff 0b       	sbc	r31, r31
    1340:	e9 5b       	subi	r30, 0xB9	; 185
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	20 81       	ld	r18, Z
    1346:	28 17       	cp	r18, r24
    1348:	89 f0       	breq	.+34     	; 0x136c <is_snake_at+0x40>
    134a:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    134c:	91 32       	cpi	r25, 0x21	; 33
    134e:	0c f0       	brlt	.+2      	; 0x1352 <is_snake_at+0x26>
			index = 0;
    1350:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1352:	93 13       	cpse	r25, r19
    1354:	f1 cf       	rjmp	.-30     	; 0x1338 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1356:	e3 2f       	mov	r30, r19
    1358:	33 0f       	add	r19, r19
    135a:	ff 0b       	sbc	r31, r31
    135c:	e9 5b       	subi	r30, 0xB9	; 185
    135e:	fe 4f       	sbci	r31, 0xFE	; 254
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	20 81       	ld	r18, Z
    1364:	28 17       	cp	r18, r24
    1366:	19 f0       	breq	.+6      	; 0x136e <is_snake_at+0x42>
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	01 c0       	rjmp	.+2      	; 0x136e <is_snake_at+0x42>
    136c:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    136e:	89 2f       	mov	r24, r25
    1370:	08 95       	ret

00001372 <advance_snake_head>:
** - ATE_FOOD if there was food at the new head position and the snake can grow
** - ATE_FOOD_BUT_CANT_GROW if there was food at the new head position but the
**   snake can't grow.
** (Only the last three of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1376:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <snakeLength>
    137a:	81 32       	cpi	r24, 0x21	; 33
    137c:	08 f0       	brcs	.+2      	; 0x1380 <advance_snake_head+0xe>
    137e:	84 c0       	rjmp	.+264    	; 0x1488 <advance_snake_head+0x116>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1380:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <snakeHeadIndex>
    1384:	0e 2e       	mov	r0, r30
    1386:	00 0c       	add	r0, r0
    1388:	ff 0b       	sbc	r31, r31
    138a:	e9 5b       	subi	r30, 0xB9	; 185
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	80 81       	ld	r24, Z
    1390:	0e 94 4d 04 	call	0x89a	; 0x89a <x_position>
    1394:	d8 2f       	mov	r29, r24
    1396:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1398:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <snakeHeadIndex>
    139c:	0e 2e       	mov	r0, r30
    139e:	00 0c       	add	r0, r0
    13a0:	ff 0b       	sbc	r31, r31
    13a2:	e9 5b       	subi	r30, 0xB9	; 185
    13a4:	fe 4f       	sbci	r31, 0xFE	; 254
    13a6:	80 81       	ld	r24, Z
    13a8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <y_position>
    13ac:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    13ae:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <nextSnakeDirn>
    13b2:	91 30       	cpi	r25, 0x01	; 1
    13b4:	59 f0       	breq	.+22     	; 0x13cc <advance_snake_head+0x5a>
    13b6:	28 f0       	brcs	.+10     	; 0x13c2 <advance_snake_head+0x50>
    13b8:	92 30       	cpi	r25, 0x02	; 2
    13ba:	69 f0       	breq	.+26     	; 0x13d6 <advance_snake_head+0x64>
    13bc:	93 30       	cpi	r25, 0x03	; 3
    13be:	81 f0       	breq	.+32     	; 0x13e0 <advance_snake_head+0x6e>
    13c0:	1b c0       	rjmp	.+54     	; 0x13f8 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    13c2:	87 30       	cpi	r24, 0x07	; 7
    13c4:	91 f0       	breq	.+36     	; 0x13ea <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	68 0f       	add	r22, r24
    13ca:	16 c0       	rjmp	.+44     	; 0x13f8 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    13cc:	df 30       	cpi	r29, 0x0F	; 15
    13ce:	79 f0       	breq	.+30     	; 0x13ee <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    13d0:	c1 e0       	ldi	r28, 0x01	; 1
    13d2:	cd 0f       	add	r28, r29
    13d4:	11 c0       	rjmp	.+34     	; 0x13f8 <advance_snake_head+0x86>
			}
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
    13d6:	88 23       	and	r24, r24
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <advance_snake_head+0x80>
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
			} else {
			headY -= 1;
    13da:	6f ef       	ldi	r22, 0xFF	; 255
    13dc:	68 0f       	add	r22, r24
    13de:	0c c0       	rjmp	.+24     	; 0x13f8 <advance_snake_head+0x86>
			}
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
    13e0:	dd 23       	and	r29, r29
    13e2:	49 f0       	breq	.+18     	; 0x13f6 <advance_snake_head+0x84>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
			} else {
				headX -= 1;
    13e4:	cf ef       	ldi	r28, 0xFF	; 255
    13e6:	cd 0f       	add	r28, r29
    13e8:	07 c0       	rjmp	.+14     	; 0x13f8 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    13ee:	c0 e0       	ldi	r28, 0x00	; 0
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <advance_snake_head+0x86>
            break;
		/* YOUR CODE HERE to deal with other directions */
		case SNAKE_DOWN:
			if(headY == 0) {
			// Head is already at the bottom of the board - wrap around
			headY = BOARD_HEIGHT-1;
    13f2:	67 e0       	ldi	r22, 0x07	; 7
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <advance_snake_head+0x86>
			break;
		case SNAKE_LEFT:
			if(headX == 0) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = BOARD_WIDTH - 1;
    13f6:	cf e0       	ldi	r28, 0x0F	; 15
				headX -= 1;
			}
			break;
    }

	newHeadPosn = position(headX, headY);
    13f8:	8c 2f       	mov	r24, r28
    13fa:	0e 94 58 04 	call	0x8b0	; 0x8b0 <position>
    13fe:	c8 2f       	mov	r28, r24

	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1400:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <nextSnakeDirn>
    1404:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <curSnakeDirn>
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
    1408:	8c 2f       	mov	r24, r28
    140a:	0e 94 96 09 	call	0x132c	; 0x132c <is_snake_at>
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	51 f4       	brne	.+20     	; 0x1426 <advance_snake_head+0xb4>
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1412:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <snakeHeadIndex>
    1416:	0e 2e       	mov	r0, r30
    1418:	00 0c       	add	r0, r0
    141a:	ff 0b       	sbc	r31, r31
    141c:	e9 5b       	subi	r30, 0xB9	; 185
    141e:	fe 4f       	sbci	r31, 0xFE	; 254
	** COLLISION. Do not continue. See snake.h for a function which can help you.
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
    1420:	80 81       	ld	r24, Z
    1422:	c8 13       	cpse	r28, r24
    1424:	33 c0       	rjmp	.+102    	; 0x148c <advance_snake_head+0x11a>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	add_to_score(1);
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <add_to_score>

	set_display_attribute(TERM_RESET);
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	0e 94 9e 0a 	call	0x153c	; 0x153c <set_display_attribute>
	snakeHeadIndex++;
    1434:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <snakeHeadIndex>
    1438:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    143a:	81 32       	cpi	r24, 0x21	; 33
    143c:	19 f0       	breq	.+6      	; 0x1444 <advance_snake_head+0xd2>
	** or not. Update the length.
    */
	add_to_score(1);

	set_display_attribute(TERM_RESET);
	snakeHeadIndex++;
    143e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <snakeHeadIndex>
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <advance_snake_head+0xd6>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1444:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    1448:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <snakeHeadIndex>
    144c:	0e 2e       	mov	r0, r30
    144e:	00 0c       	add	r0, r0
    1450:	ff 0b       	sbc	r31, r31
    1452:	e9 5b       	subi	r30, 0xB9	; 185
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    1458:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <snakeLength>
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
    1462:	8c 2f       	mov	r24, r28
    1464:	0e 94 b7 01 	call	0x36e	; 0x36e <is_food_at>
    1468:	88 23       	and	r24, r24
    146a:	31 f0       	breq	.+12     	; 0x1478 <advance_snake_head+0x106>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    146c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <snakeLength>
    1470:	81 32       	cpi	r24, 0x21	; 33
    1472:	70 f0       	brcs	.+28     	; 0x1490 <advance_snake_head+0x11e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <advance_snake_head+0x124>
		}
	}
	else if (superfood_at(newHeadPosn)) {
    1478:	8c 2f       	mov	r24, r28
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 bf 01 	call	0x37e	; 0x37e <superfood_at>
    1480:	89 2b       	or	r24, r25
    1482:	41 f4       	brne	.+16     	; 0x1494 <advance_snake_head+0x122>
		return ATE_SUPERFOOD;
	}
	 else {
		return MOVE_OK;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <advance_snake_head+0x124>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    1488:	8d ef       	ldi	r24, 0xFD	; 253
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <advance_snake_head+0x124>
	** (If the new head position is the same as the current tail position then
	** this move is permitted - the tail position won't be updated until after the
	** head is advanced but we don't consider this a collision.
	*/
	if (is_snake_at(newHeadPosn) == 1 && newHeadPosn != get_snake_head_position()){
		return COLLISION;
    148c:	8e ef       	ldi	r24, 0xFE	; 254
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <advance_snake_head+0x124>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <advance_snake_head+0x124>
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	}
	else if (superfood_at(newHeadPosn)) {
		return ATE_SUPERFOOD;
    1494:	84 e0       	ldi	r24, 0x04	; 4
	}
	 else {
		return MOVE_OK;
	}
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    149c:	94 b1       	in	r25, 0x04	; 4
    149e:	90 6b       	ori	r25, 0xB0	; 176
    14a0:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    14a2:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    14a4:	90 e5       	ldi	r25, 0x50	; 80
    14a6:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    14a8:	88 30       	cpi	r24, 0x08	; 8
    14aa:	21 f0       	breq	.+8      	; 0x14b4 <spi_setup_master+0x18>
    14ac:	80 32       	cpi	r24, 0x20	; 32
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <spi_setup_master+0x18>
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	19 f4       	brne	.+6      	; 0x14ba <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	9d bd       	out	0x2d, r25	; 45
			break;
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    14ba:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    14bc:	80 32       	cpi	r24, 0x20	; 32
    14be:	69 f0       	breq	.+26     	; 0x14da <spi_setup_master+0x3e>
    14c0:	28 f4       	brcc	.+10     	; 0x14cc <spi_setup_master+0x30>
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <spi_setup_master+0x46>
    14c6:	80 31       	cpi	r24, 0x10	; 16
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <spi_setup_master+0x46>
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <spi_setup_master+0x4c>
    14cc:	80 34       	cpi	r24, 0x40	; 64
    14ce:	29 f0       	breq	.+10     	; 0x14da <spi_setup_master+0x3e>
    14d0:	80 38       	cpi	r24, 0x80	; 128
    14d2:	51 f4       	brne	.+20     	; 0x14e8 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    14d4:	8c b5       	in	r24, 0x2c	; 44
    14d6:	81 60       	ori	r24, 0x01	; 1
    14d8:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    14da:	8c b5       	in	r24, 0x2c	; 44
    14dc:	82 60       	ori	r24, 0x02	; 2
    14de:	8c bd       	out	0x2c, r24	; 44
			break;
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    14e2:	8c b5       	in	r24, 0x2c	; 44
    14e4:	81 60       	ori	r24, 0x01	; 1
    14e6:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    14e8:	2c 98       	cbi	0x05, 4	; 5
    14ea:	08 95       	ret

000014ec <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    14ec:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    14ee:	0d b4       	in	r0, 0x2d	; 45
    14f0:	07 fe       	sbrs	r0, 7
    14f2:	fd cf       	rjmp	.-6      	; 0x14ee <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    14f4:	8e b5       	in	r24, 0x2e	; 46
    14f6:	08 95       	ret

000014f8 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    14f8:	28 2f       	mov	r18, r24
    14fa:	08 2e       	mov	r0, r24
    14fc:	00 0c       	add	r0, r0
    14fe:	33 0b       	sbc	r19, r19
    1500:	3f 93       	push	r19
    1502:	8f 93       	push	r24
    1504:	86 2f       	mov	r24, r22
    1506:	06 2e       	mov	r0, r22
    1508:	00 0c       	add	r0, r0
    150a:	99 0b       	sbc	r25, r25
    150c:	9f 93       	push	r25
    150e:	6f 93       	push	r22
    1510:	8d ec       	ldi	r24, 0xCD	; 205
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	9f 93       	push	r25
    1516:	8f 93       	push	r24
    1518:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	08 95       	ret

0000152a <clear_terminal>:
    152a:	88 ec       	ldi	r24, 0xC8	; 200
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	9f 93       	push	r25
    1530:	8f 93       	push	r24
    1532:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	08 95       	ret

0000153c <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    153c:	1f 92       	push	r1
    153e:	8f 93       	push	r24
    1540:	82 ec       	ldi	r24, 0xC2	; 194
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	9f 93       	push	r25
    1546:	8f 93       	push	r24
    1548:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	08 95       	ret

00001556 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1556:	8b eb       	ldi	r24, 0xBB	; 187
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	9f 93       	push	r25
    155c:	8f 93       	push	r24
    155e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <printf_P>
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	08 95       	ret

00001568 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    1568:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <clock_ticks>
    156c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <clock_ticks+0x1>
    1570:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <clock_ticks+0x2>
    1574:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1578:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    157a:	8c e7       	ldi	r24, 0x7C	; 124
    157c:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1582:	83 e0       	ldi	r24, 0x03	; 3
    1584:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1586:	ee e6       	ldi	r30, 0x6E	; 110
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	82 60       	ori	r24, 0x02	; 2
    158e:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1590:	85 b3       	in	r24, 0x15	; 21
    1592:	82 70       	andi	r24, 0x02	; 2
    1594:	85 bb       	out	0x15, r24	; 21
    1596:	08 95       	ret

00001598 <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    1598:	2f b7       	in	r18, 0x3f	; 63
	cli();
    159a:	f8 94       	cli
	return_value = clock_ticks;
    159c:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <clock_ticks>
    15a0:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <clock_ticks+0x1>
    15a4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <clock_ticks+0x2>
    15a8:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <clock_ticks+0x3>
	if(interrupts_were_on) {
    15ac:	22 23       	and	r18, r18
    15ae:	0c f4       	brge	.+2      	; 0x15b2 <get_clock_ticks+0x1a>
		sei();
    15b0:	78 94       	sei
	}
	return return_value;
}
    15b2:	08 95       	ret

000015b4 <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	8f 93       	push	r24
    15c0:	9f 93       	push	r25
    15c2:	af 93       	push	r26
    15c4:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
    15c6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <clock_ticks>
    15ca:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <clock_ticks+0x1>
    15ce:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <clock_ticks+0x2>
    15d2:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <clock_ticks+0x3>
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	a1 1d       	adc	r26, r1
    15da:	b1 1d       	adc	r27, r1
    15dc:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <clock_ticks>
    15e0:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <clock_ticks+0x1>
    15e4:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <clock_ticks+0x2>
    15e8:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <clock_ticks+0x3>
}
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	0f 90       	pop	r0
    15fa:	1f 90       	pop	r1
    15fc:	18 95       	reti

000015fe <__udivmodsi4>:
    15fe:	a1 e2       	ldi	r26, 0x21	; 33
    1600:	1a 2e       	mov	r1, r26
    1602:	aa 1b       	sub	r26, r26
    1604:	bb 1b       	sub	r27, r27
    1606:	fd 01       	movw	r30, r26
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <__udivmodsi4_ep>

0000160a <__udivmodsi4_loop>:
    160a:	aa 1f       	adc	r26, r26
    160c:	bb 1f       	adc	r27, r27
    160e:	ee 1f       	adc	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	a2 17       	cp	r26, r18
    1614:	b3 07       	cpc	r27, r19
    1616:	e4 07       	cpc	r30, r20
    1618:	f5 07       	cpc	r31, r21
    161a:	20 f0       	brcs	.+8      	; 0x1624 <__udivmodsi4_ep>
    161c:	a2 1b       	sub	r26, r18
    161e:	b3 0b       	sbc	r27, r19
    1620:	e4 0b       	sbc	r30, r20
    1622:	f5 0b       	sbc	r31, r21

00001624 <__udivmodsi4_ep>:
    1624:	66 1f       	adc	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	1a 94       	dec	r1
    162e:	69 f7       	brne	.-38     	; 0x160a <__udivmodsi4_loop>
    1630:	60 95       	com	r22
    1632:	70 95       	com	r23
    1634:	80 95       	com	r24
    1636:	90 95       	com	r25
    1638:	9b 01       	movw	r18, r22
    163a:	ac 01       	movw	r20, r24
    163c:	bd 01       	movw	r22, r26
    163e:	cf 01       	movw	r24, r30
    1640:	08 95       	ret

00001642 <__divmodsi4>:
    1642:	05 2e       	mov	r0, r21
    1644:	97 fb       	bst	r25, 7
    1646:	1e f4       	brtc	.+6      	; 0x164e <__divmodsi4+0xc>
    1648:	00 94       	com	r0
    164a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__negsi2>
    164e:	57 fd       	sbrc	r21, 7
    1650:	07 d0       	rcall	.+14     	; 0x1660 <__divmodsi4_neg2>
    1652:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__udivmodsi4>
    1656:	07 fc       	sbrc	r0, 7
    1658:	03 d0       	rcall	.+6      	; 0x1660 <__divmodsi4_neg2>
    165a:	4e f4       	brtc	.+18     	; 0x166e <__divmodsi4_exit>
    165c:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__negsi2>

00001660 <__divmodsi4_neg2>:
    1660:	50 95       	com	r21
    1662:	40 95       	com	r20
    1664:	30 95       	com	r19
    1666:	21 95       	neg	r18
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	4f 4f       	sbci	r20, 0xFF	; 255
    166c:	5f 4f       	sbci	r21, 0xFF	; 255

0000166e <__divmodsi4_exit>:
    166e:	08 95       	ret

00001670 <__negsi2>:
    1670:	90 95       	com	r25
    1672:	80 95       	com	r24
    1674:	70 95       	com	r23
    1676:	61 95       	neg	r22
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	8f 4f       	sbci	r24, 0xFF	; 255
    167c:	9f 4f       	sbci	r25, 0xFF	; 255
    167e:	08 95       	ret

00001680 <do_rand>:
    1680:	8f 92       	push	r8
    1682:	9f 92       	push	r9
    1684:	af 92       	push	r10
    1686:	bf 92       	push	r11
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	ec 01       	movw	r28, r24
    1696:	68 81       	ld	r22, Y
    1698:	79 81       	ldd	r23, Y+1	; 0x01
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	61 15       	cp	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	81 05       	cpc	r24, r1
    16a4:	91 05       	cpc	r25, r1
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <do_rand+0x30>
    16a8:	64 e2       	ldi	r22, 0x24	; 36
    16aa:	79 ed       	ldi	r23, 0xD9	; 217
    16ac:	8b e5       	ldi	r24, 0x5B	; 91
    16ae:	97 e0       	ldi	r25, 0x07	; 7
    16b0:	2d e1       	ldi	r18, 0x1D	; 29
    16b2:	33 ef       	ldi	r19, 0xF3	; 243
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	0e 94 21 0b 	call	0x1642	; 0x1642 <__divmodsi4>
    16bc:	49 01       	movw	r8, r18
    16be:	5a 01       	movw	r10, r20
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	a7 ea       	ldi	r26, 0xA7	; 167
    16c6:	b1 e4       	ldi	r27, 0x41	; 65
    16c8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__muluhisi3>
    16cc:	6b 01       	movw	r12, r22
    16ce:	7c 01       	movw	r14, r24
    16d0:	ac ee       	ldi	r26, 0xEC	; 236
    16d2:	b4 ef       	ldi	r27, 0xF4	; 244
    16d4:	a5 01       	movw	r20, r10
    16d6:	94 01       	movw	r18, r8
    16d8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulohisi3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	8c 0d       	add	r24, r12
    16e2:	9d 1d       	adc	r25, r13
    16e4:	ae 1d       	adc	r26, r14
    16e6:	bf 1d       	adc	r27, r15
    16e8:	b7 ff       	sbrs	r27, 7
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <do_rand+0x72>
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	a1 09       	sbc	r26, r1
    16f0:	b0 48       	sbci	r27, 0x80	; 128
    16f2:	88 83       	st	Y, r24
    16f4:	99 83       	std	Y+1, r25	; 0x01
    16f6:	aa 83       	std	Y+2, r26	; 0x02
    16f8:	bb 83       	std	Y+3, r27	; 0x03
    16fa:	9f 77       	andi	r25, 0x7F	; 127
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	bf 90       	pop	r11
    170a:	af 90       	pop	r10
    170c:	9f 90       	pop	r9
    170e:	8f 90       	pop	r8
    1710:	08 95       	ret

00001712 <rand_r>:
    1712:	0e 94 40 0b 	call	0x1680	; 0x1680 <do_rand>
    1716:	08 95       	ret

00001718 <rand>:
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 40 0b 	call	0x1680	; 0x1680 <do_rand>
    1720:	08 95       	ret

00001722 <srand>:
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    172a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    172e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1732:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1736:	08 95       	ret

00001738 <random_r>:
    1738:	8f 92       	push	r8
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	ec 01       	movw	r28, r24
    174e:	68 81       	ld	r22, Y
    1750:	79 81       	ldd	r23, Y+1	; 0x01
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	9b 81       	ldd	r25, Y+3	; 0x03
    1756:	61 15       	cp	r22, r1
    1758:	71 05       	cpc	r23, r1
    175a:	81 05       	cpc	r24, r1
    175c:	91 05       	cpc	r25, r1
    175e:	21 f4       	brne	.+8      	; 0x1768 <random_r+0x30>
    1760:	64 e2       	ldi	r22, 0x24	; 36
    1762:	79 ed       	ldi	r23, 0xD9	; 217
    1764:	8b e5       	ldi	r24, 0x5B	; 91
    1766:	97 e0       	ldi	r25, 0x07	; 7
    1768:	2d e1       	ldi	r18, 0x1D	; 29
    176a:	33 ef       	ldi	r19, 0xF3	; 243
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	0e 94 21 0b 	call	0x1642	; 0x1642 <__divmodsi4>
    1774:	49 01       	movw	r8, r18
    1776:	5a 01       	movw	r10, r20
    1778:	9b 01       	movw	r18, r22
    177a:	ac 01       	movw	r20, r24
    177c:	a7 ea       	ldi	r26, 0xA7	; 167
    177e:	b1 e4       	ldi	r27, 0x41	; 65
    1780:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__muluhisi3>
    1784:	6b 01       	movw	r12, r22
    1786:	7c 01       	movw	r14, r24
    1788:	ac ee       	ldi	r26, 0xEC	; 236
    178a:	b4 ef       	ldi	r27, 0xF4	; 244
    178c:	a5 01       	movw	r20, r10
    178e:	94 01       	movw	r18, r8
    1790:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulohisi3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8c 0d       	add	r24, r12
    179a:	9d 1d       	adc	r25, r13
    179c:	ae 1d       	adc	r26, r14
    179e:	bf 1d       	adc	r27, r15
    17a0:	b7 ff       	sbrs	r27, 7
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <random_r+0x72>
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	a1 09       	sbc	r26, r1
    17a8:	b0 48       	sbci	r27, 0x80	; 128
    17aa:	88 83       	st	Y, r24
    17ac:	99 83       	std	Y+1, r25	; 0x01
    17ae:	aa 83       	std	Y+2, r26	; 0x02
    17b0:	bb 83       	std	Y+3, r27	; 0x03
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	9f 77       	andi	r25, 0x7F	; 127
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	bf 90       	pop	r11
    17c6:	af 90       	pop	r10
    17c8:	9f 90       	pop	r9
    17ca:	8f 90       	pop	r8
    17cc:	08 95       	ret

000017ce <random>:
    17ce:	8f 92       	push	r8
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    17e2:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    17e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    17ea:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    17ee:	61 15       	cp	r22, r1
    17f0:	71 05       	cpc	r23, r1
    17f2:	81 05       	cpc	r24, r1
    17f4:	91 05       	cpc	r25, r1
    17f6:	21 f4       	brne	.+8      	; 0x1800 <random+0x32>
    17f8:	64 e2       	ldi	r22, 0x24	; 36
    17fa:	79 ed       	ldi	r23, 0xD9	; 217
    17fc:	8b e5       	ldi	r24, 0x5B	; 91
    17fe:	97 e0       	ldi	r25, 0x07	; 7
    1800:	2d e1       	ldi	r18, 0x1D	; 29
    1802:	33 ef       	ldi	r19, 0xF3	; 243
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	0e 94 21 0b 	call	0x1642	; 0x1642 <__divmodsi4>
    180c:	49 01       	movw	r8, r18
    180e:	5a 01       	movw	r10, r20
    1810:	9b 01       	movw	r18, r22
    1812:	ac 01       	movw	r20, r24
    1814:	a7 ea       	ldi	r26, 0xA7	; 167
    1816:	b1 e4       	ldi	r27, 0x41	; 65
    1818:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__muluhisi3>
    181c:	6b 01       	movw	r12, r22
    181e:	7c 01       	movw	r14, r24
    1820:	ac ee       	ldi	r26, 0xEC	; 236
    1822:	b4 ef       	ldi	r27, 0xF4	; 244
    1824:	a5 01       	movw	r20, r10
    1826:	94 01       	movw	r18, r8
    1828:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulohisi3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8c 0d       	add	r24, r12
    1832:	9d 1d       	adc	r25, r13
    1834:	ae 1d       	adc	r26, r14
    1836:	bf 1d       	adc	r27, r15
    1838:	b7 ff       	sbrs	r27, 7
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <random+0x74>
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	a1 09       	sbc	r26, r1
    1840:	b0 48       	sbci	r27, 0x80	; 128
    1842:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    1846:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    184a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    184e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	9f 77       	andi	r25, 0x7F	; 127
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	9f 90       	pop	r9
    1866:	8f 90       	pop	r8
    1868:	08 95       	ret

0000186a <srandom>:
    186a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    186e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    1872:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    1876:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    187a:	08 95       	ret

0000187c <fgetc>:
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	2b 81       	ldd	r18, Y+3	; 0x03
    1884:	20 ff       	sbrs	r18, 0
    1886:	33 c0       	rjmp	.+102    	; 0x18ee <fgetc+0x72>
    1888:	26 ff       	sbrs	r18, 6
    188a:	0a c0       	rjmp	.+20     	; 0x18a0 <fgetc+0x24>
    188c:	2f 7b       	andi	r18, 0xBF	; 191
    188e:	2b 83       	std	Y+3, r18	; 0x03
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	9f 81       	ldd	r25, Y+7	; 0x07
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	9f 83       	std	Y+7, r25	; 0x07
    1898:	8e 83       	std	Y+6, r24	; 0x06
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	29 c0       	rjmp	.+82     	; 0x18f2 <fgetc+0x76>
    18a0:	22 ff       	sbrs	r18, 2
    18a2:	0f c0       	rjmp	.+30     	; 0x18c2 <fgetc+0x46>
    18a4:	e8 81       	ld	r30, Y
    18a6:	f9 81       	ldd	r31, Y+1	; 0x01
    18a8:	80 81       	ld	r24, Z
    18aa:	08 2e       	mov	r0, r24
    18ac:	00 0c       	add	r0, r0
    18ae:	99 0b       	sbc	r25, r25
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	19 f4       	brne	.+6      	; 0x18ba <fgetc+0x3e>
    18b4:	20 62       	ori	r18, 0x20	; 32
    18b6:	2b 83       	std	Y+3, r18	; 0x03
    18b8:	1a c0       	rjmp	.+52     	; 0x18ee <fgetc+0x72>
    18ba:	31 96       	adiw	r30, 0x01	; 1
    18bc:	f9 83       	std	Y+1, r31	; 0x01
    18be:	e8 83       	st	Y, r30
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <fgetc+0x62>
    18c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    18c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    18c6:	09 95       	icall
    18c8:	97 ff       	sbrs	r25, 7
    18ca:	09 c0       	rjmp	.+18     	; 0x18de <fgetc+0x62>
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <fgetc+0x5a>
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <fgetc+0x5c>
    18d6:	80 e1       	ldi	r24, 0x10	; 16
    18d8:	82 2b       	or	r24, r18
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	08 c0       	rjmp	.+16     	; 0x18ee <fgetc+0x72>
    18de:	2e 81       	ldd	r18, Y+6	; 0x06
    18e0:	3f 81       	ldd	r19, Y+7	; 0x07
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	3f 83       	std	Y+7, r19	; 0x07
    18e8:	2e 83       	std	Y+6, r18	; 0x06
    18ea:	99 27       	eor	r25, r25
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <fgetc+0x76>
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	9f ef       	ldi	r25, 0xFF	; 255
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <printf_P>:
    18f8:	a0 e0       	ldi	r26, 0x00	; 0
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e2 e8       	ldi	r30, 0x82	; 130
    18fe:	fc e0       	ldi	r31, 0x0C	; 12
    1900:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__prologue_saves__+0x1c>
    1904:	ae 01       	movw	r20, r28
    1906:	49 5f       	subi	r20, 0xF9	; 249
    1908:	5f 4f       	sbci	r21, 0xFF	; 255
    190a:	da 01       	movw	r26, r20
    190c:	6d 91       	ld	r22, X+
    190e:	7d 91       	ld	r23, X+
    1910:	ad 01       	movw	r20, r26
    1912:	0a e8       	ldi	r16, 0x8A	; 138
    1914:	12 e0       	ldi	r17, 0x02	; 2
    1916:	f8 01       	movw	r30, r16
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	dc 01       	movw	r26, r24
    191e:	13 96       	adiw	r26, 0x03	; 3
    1920:	2c 91       	ld	r18, X
    1922:	13 97       	sbiw	r26, 0x03	; 3
    1924:	28 60       	ori	r18, 0x08	; 8
    1926:	13 96       	adiw	r26, 0x03	; 3
    1928:	2c 93       	st	X, r18
    192a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <vfprintf>
    192e:	d8 01       	movw	r26, r16
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	ed 91       	ld	r30, X+
    1934:	fc 91       	ld	r31, X
    1936:	13 97       	sbiw	r26, 0x03	; 3
    1938:	23 81       	ldd	r18, Z+3	; 0x03
    193a:	27 7f       	andi	r18, 0xF7	; 247
    193c:	23 83       	std	Z+3, r18	; 0x03
    193e:	e4 e0       	ldi	r30, 0x04	; 4
    1940:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__epilogue_restores__+0x1c>

00001944 <vfprintf>:
    1944:	ab e0       	ldi	r26, 0x0B	; 11
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e8 ea       	ldi	r30, 0xA8	; 168
    194a:	fc e0       	ldi	r31, 0x0C	; 12
    194c:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__prologue_saves__>
    1950:	6c 01       	movw	r12, r24
    1952:	7b 01       	movw	r14, r22
    1954:	8a 01       	movw	r16, r20
    1956:	fc 01       	movw	r30, r24
    1958:	17 82       	std	Z+7, r1	; 0x07
    195a:	16 82       	std	Z+6, r1	; 0x06
    195c:	83 81       	ldd	r24, Z+3	; 0x03
    195e:	81 ff       	sbrs	r24, 1
    1960:	cc c1       	rjmp	.+920    	; 0x1cfa <vfprintf+0x3b6>
    1962:	ce 01       	movw	r24, r28
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	3c 01       	movw	r6, r24
    1968:	f6 01       	movw	r30, r12
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	f7 01       	movw	r30, r14
    196e:	93 fd       	sbrc	r25, 3
    1970:	85 91       	lpm	r24, Z+
    1972:	93 ff       	sbrs	r25, 3
    1974:	81 91       	ld	r24, Z+
    1976:	7f 01       	movw	r14, r30
    1978:	88 23       	and	r24, r24
    197a:	09 f4       	brne	.+2      	; 0x197e <vfprintf+0x3a>
    197c:	ba c1       	rjmp	.+884    	; 0x1cf2 <vfprintf+0x3ae>
    197e:	85 32       	cpi	r24, 0x25	; 37
    1980:	39 f4       	brne	.+14     	; 0x1990 <vfprintf+0x4c>
    1982:	93 fd       	sbrc	r25, 3
    1984:	85 91       	lpm	r24, Z+
    1986:	93 ff       	sbrs	r25, 3
    1988:	81 91       	ld	r24, Z+
    198a:	7f 01       	movw	r14, r30
    198c:	85 32       	cpi	r24, 0x25	; 37
    198e:	29 f4       	brne	.+10     	; 0x199a <vfprintf+0x56>
    1990:	b6 01       	movw	r22, r12
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1998:	e7 cf       	rjmp	.-50     	; 0x1968 <vfprintf+0x24>
    199a:	91 2c       	mov	r9, r1
    199c:	21 2c       	mov	r2, r1
    199e:	31 2c       	mov	r3, r1
    19a0:	ff e1       	ldi	r31, 0x1F	; 31
    19a2:	f3 15       	cp	r31, r3
    19a4:	d8 f0       	brcs	.+54     	; 0x19dc <vfprintf+0x98>
    19a6:	8b 32       	cpi	r24, 0x2B	; 43
    19a8:	79 f0       	breq	.+30     	; 0x19c8 <vfprintf+0x84>
    19aa:	38 f4       	brcc	.+14     	; 0x19ba <vfprintf+0x76>
    19ac:	80 32       	cpi	r24, 0x20	; 32
    19ae:	79 f0       	breq	.+30     	; 0x19ce <vfprintf+0x8a>
    19b0:	83 32       	cpi	r24, 0x23	; 35
    19b2:	a1 f4       	brne	.+40     	; 0x19dc <vfprintf+0x98>
    19b4:	23 2d       	mov	r18, r3
    19b6:	20 61       	ori	r18, 0x10	; 16
    19b8:	1d c0       	rjmp	.+58     	; 0x19f4 <vfprintf+0xb0>
    19ba:	8d 32       	cpi	r24, 0x2D	; 45
    19bc:	61 f0       	breq	.+24     	; 0x19d6 <vfprintf+0x92>
    19be:	80 33       	cpi	r24, 0x30	; 48
    19c0:	69 f4       	brne	.+26     	; 0x19dc <vfprintf+0x98>
    19c2:	23 2d       	mov	r18, r3
    19c4:	21 60       	ori	r18, 0x01	; 1
    19c6:	16 c0       	rjmp	.+44     	; 0x19f4 <vfprintf+0xb0>
    19c8:	83 2d       	mov	r24, r3
    19ca:	82 60       	ori	r24, 0x02	; 2
    19cc:	38 2e       	mov	r3, r24
    19ce:	e3 2d       	mov	r30, r3
    19d0:	e4 60       	ori	r30, 0x04	; 4
    19d2:	3e 2e       	mov	r3, r30
    19d4:	2a c0       	rjmp	.+84     	; 0x1a2a <vfprintf+0xe6>
    19d6:	f3 2d       	mov	r31, r3
    19d8:	f8 60       	ori	r31, 0x08	; 8
    19da:	1d c0       	rjmp	.+58     	; 0x1a16 <vfprintf+0xd2>
    19dc:	37 fc       	sbrc	r3, 7
    19de:	2d c0       	rjmp	.+90     	; 0x1a3a <vfprintf+0xf6>
    19e0:	20 ed       	ldi	r18, 0xD0	; 208
    19e2:	28 0f       	add	r18, r24
    19e4:	2a 30       	cpi	r18, 0x0A	; 10
    19e6:	40 f0       	brcs	.+16     	; 0x19f8 <vfprintf+0xb4>
    19e8:	8e 32       	cpi	r24, 0x2E	; 46
    19ea:	b9 f4       	brne	.+46     	; 0x1a1a <vfprintf+0xd6>
    19ec:	36 fc       	sbrc	r3, 6
    19ee:	81 c1       	rjmp	.+770    	; 0x1cf2 <vfprintf+0x3ae>
    19f0:	23 2d       	mov	r18, r3
    19f2:	20 64       	ori	r18, 0x40	; 64
    19f4:	32 2e       	mov	r3, r18
    19f6:	19 c0       	rjmp	.+50     	; 0x1a2a <vfprintf+0xe6>
    19f8:	36 fe       	sbrs	r3, 6
    19fa:	06 c0       	rjmp	.+12     	; 0x1a08 <vfprintf+0xc4>
    19fc:	8a e0       	ldi	r24, 0x0A	; 10
    19fe:	98 9e       	mul	r9, r24
    1a00:	20 0d       	add	r18, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	92 2e       	mov	r9, r18
    1a06:	11 c0       	rjmp	.+34     	; 0x1a2a <vfprintf+0xe6>
    1a08:	ea e0       	ldi	r30, 0x0A	; 10
    1a0a:	2e 9e       	mul	r2, r30
    1a0c:	20 0d       	add	r18, r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	22 2e       	mov	r2, r18
    1a12:	f3 2d       	mov	r31, r3
    1a14:	f0 62       	ori	r31, 0x20	; 32
    1a16:	3f 2e       	mov	r3, r31
    1a18:	08 c0       	rjmp	.+16     	; 0x1a2a <vfprintf+0xe6>
    1a1a:	8c 36       	cpi	r24, 0x6C	; 108
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <vfprintf+0xe2>
    1a1e:	83 2d       	mov	r24, r3
    1a20:	80 68       	ori	r24, 0x80	; 128
    1a22:	38 2e       	mov	r3, r24
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <vfprintf+0xe6>
    1a26:	88 36       	cpi	r24, 0x68	; 104
    1a28:	41 f4       	brne	.+16     	; 0x1a3a <vfprintf+0xf6>
    1a2a:	f7 01       	movw	r30, r14
    1a2c:	93 fd       	sbrc	r25, 3
    1a2e:	85 91       	lpm	r24, Z+
    1a30:	93 ff       	sbrs	r25, 3
    1a32:	81 91       	ld	r24, Z+
    1a34:	7f 01       	movw	r14, r30
    1a36:	81 11       	cpse	r24, r1
    1a38:	b3 cf       	rjmp	.-154    	; 0x19a0 <vfprintf+0x5c>
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	9f 7d       	andi	r25, 0xDF	; 223
    1a3e:	95 54       	subi	r25, 0x45	; 69
    1a40:	93 30       	cpi	r25, 0x03	; 3
    1a42:	28 f4       	brcc	.+10     	; 0x1a4e <vfprintf+0x10a>
    1a44:	0c 5f       	subi	r16, 0xFC	; 252
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	9f e3       	ldi	r25, 0x3F	; 63
    1a4a:	99 83       	std	Y+1, r25	; 0x01
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <vfprintf+0x124>
    1a4e:	83 36       	cpi	r24, 0x63	; 99
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <vfprintf+0x11a>
    1a52:	83 37       	cpi	r24, 0x73	; 115
    1a54:	71 f0       	breq	.+28     	; 0x1a72 <vfprintf+0x12e>
    1a56:	83 35       	cpi	r24, 0x53	; 83
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <vfprintf+0x118>
    1a5a:	59 c0       	rjmp	.+178    	; 0x1b0e <vfprintf+0x1ca>
    1a5c:	21 c0       	rjmp	.+66     	; 0x1aa0 <vfprintf+0x15c>
    1a5e:	f8 01       	movw	r30, r16
    1a60:	80 81       	ld	r24, Z
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	0e 5f       	subi	r16, 0xFE	; 254
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	88 24       	eor	r8, r8
    1a6a:	83 94       	inc	r8
    1a6c:	91 2c       	mov	r9, r1
    1a6e:	53 01       	movw	r10, r6
    1a70:	13 c0       	rjmp	.+38     	; 0x1a98 <vfprintf+0x154>
    1a72:	28 01       	movw	r4, r16
    1a74:	f2 e0       	ldi	r31, 0x02	; 2
    1a76:	4f 0e       	add	r4, r31
    1a78:	51 1c       	adc	r5, r1
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	a0 80       	ld	r10, Z
    1a7e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a80:	36 fe       	sbrs	r3, 6
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <vfprintf+0x146>
    1a84:	69 2d       	mov	r22, r9
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x14a>
    1a8a:	6f ef       	ldi	r22, 0xFF	; 255
    1a8c:	7f ef       	ldi	r23, 0xFF	; 255
    1a8e:	c5 01       	movw	r24, r10
    1a90:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <strnlen>
    1a94:	4c 01       	movw	r8, r24
    1a96:	82 01       	movw	r16, r4
    1a98:	f3 2d       	mov	r31, r3
    1a9a:	ff 77       	andi	r31, 0x7F	; 127
    1a9c:	3f 2e       	mov	r3, r31
    1a9e:	16 c0       	rjmp	.+44     	; 0x1acc <vfprintf+0x188>
    1aa0:	28 01       	movw	r4, r16
    1aa2:	22 e0       	ldi	r18, 0x02	; 2
    1aa4:	42 0e       	add	r4, r18
    1aa6:	51 1c       	adc	r5, r1
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	a0 80       	ld	r10, Z
    1aac:	b1 80       	ldd	r11, Z+1	; 0x01
    1aae:	36 fe       	sbrs	r3, 6
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <vfprintf+0x174>
    1ab2:	69 2d       	mov	r22, r9
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <vfprintf+0x178>
    1ab8:	6f ef       	ldi	r22, 0xFF	; 255
    1aba:	7f ef       	ldi	r23, 0xFF	; 255
    1abc:	c5 01       	movw	r24, r10
    1abe:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <strnlen_P>
    1ac2:	4c 01       	movw	r8, r24
    1ac4:	f3 2d       	mov	r31, r3
    1ac6:	f0 68       	ori	r31, 0x80	; 128
    1ac8:	3f 2e       	mov	r3, r31
    1aca:	82 01       	movw	r16, r4
    1acc:	33 fc       	sbrc	r3, 3
    1ace:	1b c0       	rjmp	.+54     	; 0x1b06 <vfprintf+0x1c2>
    1ad0:	82 2d       	mov	r24, r2
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	88 16       	cp	r8, r24
    1ad6:	99 06       	cpc	r9, r25
    1ad8:	b0 f4       	brcc	.+44     	; 0x1b06 <vfprintf+0x1c2>
    1ada:	b6 01       	movw	r22, r12
    1adc:	80 e2       	ldi	r24, 0x20	; 32
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1ae4:	2a 94       	dec	r2
    1ae6:	f4 cf       	rjmp	.-24     	; 0x1ad0 <vfprintf+0x18c>
    1ae8:	f5 01       	movw	r30, r10
    1aea:	37 fc       	sbrc	r3, 7
    1aec:	85 91       	lpm	r24, Z+
    1aee:	37 fe       	sbrs	r3, 7
    1af0:	81 91       	ld	r24, Z+
    1af2:	5f 01       	movw	r10, r30
    1af4:	b6 01       	movw	r22, r12
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1afc:	21 10       	cpse	r2, r1
    1afe:	2a 94       	dec	r2
    1b00:	21 e0       	ldi	r18, 0x01	; 1
    1b02:	82 1a       	sub	r8, r18
    1b04:	91 08       	sbc	r9, r1
    1b06:	81 14       	cp	r8, r1
    1b08:	91 04       	cpc	r9, r1
    1b0a:	71 f7       	brne	.-36     	; 0x1ae8 <vfprintf+0x1a4>
    1b0c:	e8 c0       	rjmp	.+464    	; 0x1cde <vfprintf+0x39a>
    1b0e:	84 36       	cpi	r24, 0x64	; 100
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <vfprintf+0x1d2>
    1b12:	89 36       	cpi	r24, 0x69	; 105
    1b14:	41 f5       	brne	.+80     	; 0x1b66 <vfprintf+0x222>
    1b16:	f8 01       	movw	r30, r16
    1b18:	37 fe       	sbrs	r3, 7
    1b1a:	07 c0       	rjmp	.+14     	; 0x1b2a <vfprintf+0x1e6>
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	0c 5f       	subi	r16, 0xFC	; 252
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	08 c0       	rjmp	.+16     	; 0x1b3a <vfprintf+0x1f6>
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	07 2e       	mov	r0, r23
    1b30:	00 0c       	add	r0, r0
    1b32:	88 0b       	sbc	r24, r24
    1b34:	99 0b       	sbc	r25, r25
    1b36:	0e 5f       	subi	r16, 0xFE	; 254
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	f3 2d       	mov	r31, r3
    1b3c:	ff 76       	andi	r31, 0x6F	; 111
    1b3e:	3f 2e       	mov	r3, r31
    1b40:	97 ff       	sbrs	r25, 7
    1b42:	09 c0       	rjmp	.+18     	; 0x1b56 <vfprintf+0x212>
    1b44:	90 95       	com	r25
    1b46:	80 95       	com	r24
    1b48:	70 95       	com	r23
    1b4a:	61 95       	neg	r22
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	f0 68       	ori	r31, 0x80	; 128
    1b54:	3f 2e       	mov	r3, r31
    1b56:	2a e0       	ldi	r18, 0x0A	; 10
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	a3 01       	movw	r20, r6
    1b5c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__ultoa_invert>
    1b60:	88 2e       	mov	r8, r24
    1b62:	86 18       	sub	r8, r6
    1b64:	45 c0       	rjmp	.+138    	; 0x1bf0 <vfprintf+0x2ac>
    1b66:	85 37       	cpi	r24, 0x75	; 117
    1b68:	31 f4       	brne	.+12     	; 0x1b76 <vfprintf+0x232>
    1b6a:	23 2d       	mov	r18, r3
    1b6c:	2f 7e       	andi	r18, 0xEF	; 239
    1b6e:	b2 2e       	mov	r11, r18
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	25 c0       	rjmp	.+74     	; 0x1bc0 <vfprintf+0x27c>
    1b76:	93 2d       	mov	r25, r3
    1b78:	99 7f       	andi	r25, 0xF9	; 249
    1b7a:	b9 2e       	mov	r11, r25
    1b7c:	8f 36       	cpi	r24, 0x6F	; 111
    1b7e:	c1 f0       	breq	.+48     	; 0x1bb0 <vfprintf+0x26c>
    1b80:	18 f4       	brcc	.+6      	; 0x1b88 <vfprintf+0x244>
    1b82:	88 35       	cpi	r24, 0x58	; 88
    1b84:	79 f0       	breq	.+30     	; 0x1ba4 <vfprintf+0x260>
    1b86:	b5 c0       	rjmp	.+362    	; 0x1cf2 <vfprintf+0x3ae>
    1b88:	80 37       	cpi	r24, 0x70	; 112
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <vfprintf+0x24e>
    1b8c:	88 37       	cpi	r24, 0x78	; 120
    1b8e:	21 f0       	breq	.+8      	; 0x1b98 <vfprintf+0x254>
    1b90:	b0 c0       	rjmp	.+352    	; 0x1cf2 <vfprintf+0x3ae>
    1b92:	e9 2f       	mov	r30, r25
    1b94:	e0 61       	ori	r30, 0x10	; 16
    1b96:	be 2e       	mov	r11, r30
    1b98:	b4 fe       	sbrs	r11, 4
    1b9a:	0d c0       	rjmp	.+26     	; 0x1bb6 <vfprintf+0x272>
    1b9c:	fb 2d       	mov	r31, r11
    1b9e:	f4 60       	ori	r31, 0x04	; 4
    1ba0:	bf 2e       	mov	r11, r31
    1ba2:	09 c0       	rjmp	.+18     	; 0x1bb6 <vfprintf+0x272>
    1ba4:	34 fe       	sbrs	r3, 4
    1ba6:	0a c0       	rjmp	.+20     	; 0x1bbc <vfprintf+0x278>
    1ba8:	29 2f       	mov	r18, r25
    1baa:	26 60       	ori	r18, 0x06	; 6
    1bac:	b2 2e       	mov	r11, r18
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <vfprintf+0x278>
    1bb0:	28 e0       	ldi	r18, 0x08	; 8
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <vfprintf+0x27c>
    1bb6:	20 e1       	ldi	r18, 0x10	; 16
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <vfprintf+0x27c>
    1bbc:	20 e1       	ldi	r18, 0x10	; 16
    1bbe:	32 e0       	ldi	r19, 0x02	; 2
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	b7 fe       	sbrs	r11, 7
    1bc4:	07 c0       	rjmp	.+14     	; 0x1bd4 <vfprintf+0x290>
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	0c 5f       	subi	r16, 0xFC	; 252
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	06 c0       	rjmp	.+12     	; 0x1be0 <vfprintf+0x29c>
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 5f       	subi	r16, 0xFE	; 254
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	a3 01       	movw	r20, r6
    1be2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__ultoa_invert>
    1be6:	88 2e       	mov	r8, r24
    1be8:	86 18       	sub	r8, r6
    1bea:	fb 2d       	mov	r31, r11
    1bec:	ff 77       	andi	r31, 0x7F	; 127
    1bee:	3f 2e       	mov	r3, r31
    1bf0:	36 fe       	sbrs	r3, 6
    1bf2:	0d c0       	rjmp	.+26     	; 0x1c0e <vfprintf+0x2ca>
    1bf4:	23 2d       	mov	r18, r3
    1bf6:	2e 7f       	andi	r18, 0xFE	; 254
    1bf8:	a2 2e       	mov	r10, r18
    1bfa:	89 14       	cp	r8, r9
    1bfc:	58 f4       	brcc	.+22     	; 0x1c14 <vfprintf+0x2d0>
    1bfe:	34 fe       	sbrs	r3, 4
    1c00:	0b c0       	rjmp	.+22     	; 0x1c18 <vfprintf+0x2d4>
    1c02:	32 fc       	sbrc	r3, 2
    1c04:	09 c0       	rjmp	.+18     	; 0x1c18 <vfprintf+0x2d4>
    1c06:	83 2d       	mov	r24, r3
    1c08:	8e 7e       	andi	r24, 0xEE	; 238
    1c0a:	a8 2e       	mov	r10, r24
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <vfprintf+0x2d4>
    1c0e:	b8 2c       	mov	r11, r8
    1c10:	a3 2c       	mov	r10, r3
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <vfprintf+0x2d6>
    1c14:	b8 2c       	mov	r11, r8
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <vfprintf+0x2d6>
    1c18:	b9 2c       	mov	r11, r9
    1c1a:	a4 fe       	sbrs	r10, 4
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <vfprintf+0x2f8>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e8 0d       	add	r30, r8
    1c22:	f1 1d       	adc	r31, r1
    1c24:	80 81       	ld	r24, Z
    1c26:	80 33       	cpi	r24, 0x30	; 48
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <vfprintf+0x2ee>
    1c2a:	9a 2d       	mov	r25, r10
    1c2c:	99 7e       	andi	r25, 0xE9	; 233
    1c2e:	a9 2e       	mov	r10, r25
    1c30:	09 c0       	rjmp	.+18     	; 0x1c44 <vfprintf+0x300>
    1c32:	a2 fe       	sbrs	r10, 2
    1c34:	06 c0       	rjmp	.+12     	; 0x1c42 <vfprintf+0x2fe>
    1c36:	b3 94       	inc	r11
    1c38:	b3 94       	inc	r11
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <vfprintf+0x300>
    1c3c:	8a 2d       	mov	r24, r10
    1c3e:	86 78       	andi	r24, 0x86	; 134
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <vfprintf+0x300>
    1c42:	b3 94       	inc	r11
    1c44:	a3 fc       	sbrc	r10, 3
    1c46:	11 c0       	rjmp	.+34     	; 0x1c6a <vfprintf+0x326>
    1c48:	a0 fe       	sbrs	r10, 0
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <vfprintf+0x314>
    1c4c:	b2 14       	cp	r11, r2
    1c4e:	88 f4       	brcc	.+34     	; 0x1c72 <vfprintf+0x32e>
    1c50:	28 0c       	add	r2, r8
    1c52:	92 2c       	mov	r9, r2
    1c54:	9b 18       	sub	r9, r11
    1c56:	0e c0       	rjmp	.+28     	; 0x1c74 <vfprintf+0x330>
    1c58:	b2 14       	cp	r11, r2
    1c5a:	60 f4       	brcc	.+24     	; 0x1c74 <vfprintf+0x330>
    1c5c:	b6 01       	movw	r22, r12
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1c66:	b3 94       	inc	r11
    1c68:	f7 cf       	rjmp	.-18     	; 0x1c58 <vfprintf+0x314>
    1c6a:	b2 14       	cp	r11, r2
    1c6c:	18 f4       	brcc	.+6      	; 0x1c74 <vfprintf+0x330>
    1c6e:	2b 18       	sub	r2, r11
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <vfprintf+0x332>
    1c72:	98 2c       	mov	r9, r8
    1c74:	21 2c       	mov	r2, r1
    1c76:	a4 fe       	sbrs	r10, 4
    1c78:	10 c0       	rjmp	.+32     	; 0x1c9a <vfprintf+0x356>
    1c7a:	b6 01       	movw	r22, r12
    1c7c:	80 e3       	ldi	r24, 0x30	; 48
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1c84:	a2 fe       	sbrs	r10, 2
    1c86:	17 c0       	rjmp	.+46     	; 0x1cb6 <vfprintf+0x372>
    1c88:	a1 fc       	sbrc	r10, 1
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <vfprintf+0x34e>
    1c8c:	88 e7       	ldi	r24, 0x78	; 120
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <vfprintf+0x352>
    1c92:	88 e5       	ldi	r24, 0x58	; 88
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	b6 01       	movw	r22, r12
    1c98:	0c c0       	rjmp	.+24     	; 0x1cb2 <vfprintf+0x36e>
    1c9a:	8a 2d       	mov	r24, r10
    1c9c:	86 78       	andi	r24, 0x86	; 134
    1c9e:	59 f0       	breq	.+22     	; 0x1cb6 <vfprintf+0x372>
    1ca0:	a1 fe       	sbrs	r10, 1
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <vfprintf+0x364>
    1ca4:	8b e2       	ldi	r24, 0x2B	; 43
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <vfprintf+0x366>
    1ca8:	80 e2       	ldi	r24, 0x20	; 32
    1caa:	a7 fc       	sbrc	r10, 7
    1cac:	8d e2       	ldi	r24, 0x2D	; 45
    1cae:	b6 01       	movw	r22, r12
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1cb6:	89 14       	cp	r8, r9
    1cb8:	38 f4       	brcc	.+14     	; 0x1cc8 <vfprintf+0x384>
    1cba:	b6 01       	movw	r22, r12
    1cbc:	80 e3       	ldi	r24, 0x30	; 48
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1cc4:	9a 94       	dec	r9
    1cc6:	f7 cf       	rjmp	.-18     	; 0x1cb6 <vfprintf+0x372>
    1cc8:	8a 94       	dec	r8
    1cca:	f3 01       	movw	r30, r6
    1ccc:	e8 0d       	add	r30, r8
    1cce:	f1 1d       	adc	r31, r1
    1cd0:	80 81       	ld	r24, Z
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1cda:	81 10       	cpse	r8, r1
    1cdc:	f5 cf       	rjmp	.-22     	; 0x1cc8 <vfprintf+0x384>
    1cde:	22 20       	and	r2, r2
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <vfprintf+0x3a0>
    1ce2:	42 ce       	rjmp	.-892    	; 0x1968 <vfprintf+0x24>
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fputc>
    1cee:	2a 94       	dec	r2
    1cf0:	f6 cf       	rjmp	.-20     	; 0x1cde <vfprintf+0x39a>
    1cf2:	f6 01       	movw	r30, r12
    1cf4:	86 81       	ldd	r24, Z+6	; 0x06
    1cf6:	97 81       	ldd	r25, Z+7	; 0x07
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <vfprintf+0x3ba>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	2b 96       	adiw	r28, 0x0b	; 11
    1d00:	e2 e1       	ldi	r30, 0x12	; 18
    1d02:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__epilogue_restores__>

00001d06 <strnlen_P>:
    1d06:	fc 01       	movw	r30, r24
    1d08:	05 90       	lpm	r0, Z+
    1d0a:	61 50       	subi	r22, 0x01	; 1
    1d0c:	70 40       	sbci	r23, 0x00	; 0
    1d0e:	01 10       	cpse	r0, r1
    1d10:	d8 f7       	brcc	.-10     	; 0x1d08 <strnlen_P+0x2>
    1d12:	80 95       	com	r24
    1d14:	90 95       	com	r25
    1d16:	8e 0f       	add	r24, r30
    1d18:	9f 1f       	adc	r25, r31
    1d1a:	08 95       	ret

00001d1c <strnlen>:
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	61 50       	subi	r22, 0x01	; 1
    1d20:	70 40       	sbci	r23, 0x00	; 0
    1d22:	01 90       	ld	r0, Z+
    1d24:	01 10       	cpse	r0, r1
    1d26:	d8 f7       	brcc	.-10     	; 0x1d1e <strnlen+0x2>
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	8e 0f       	add	r24, r30
    1d2e:	9f 1f       	adc	r25, r31
    1d30:	08 95       	ret

00001d32 <fputc>:
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	fb 01       	movw	r30, r22
    1d3c:	23 81       	ldd	r18, Z+3	; 0x03
    1d3e:	21 fd       	sbrc	r18, 1
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <fputc+0x16>
    1d42:	8f ef       	ldi	r24, 0xFF	; 255
    1d44:	9f ef       	ldi	r25, 0xFF	; 255
    1d46:	2c c0       	rjmp	.+88     	; 0x1da0 <fputc+0x6e>
    1d48:	22 ff       	sbrs	r18, 2
    1d4a:	16 c0       	rjmp	.+44     	; 0x1d78 <fputc+0x46>
    1d4c:	46 81       	ldd	r20, Z+6	; 0x06
    1d4e:	57 81       	ldd	r21, Z+7	; 0x07
    1d50:	24 81       	ldd	r18, Z+4	; 0x04
    1d52:	35 81       	ldd	r19, Z+5	; 0x05
    1d54:	42 17       	cp	r20, r18
    1d56:	53 07       	cpc	r21, r19
    1d58:	44 f4       	brge	.+16     	; 0x1d6a <fputc+0x38>
    1d5a:	a0 81       	ld	r26, Z
    1d5c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d5e:	9d 01       	movw	r18, r26
    1d60:	2f 5f       	subi	r18, 0xFF	; 255
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	31 83       	std	Z+1, r19	; 0x01
    1d66:	20 83       	st	Z, r18
    1d68:	8c 93       	st	X, r24
    1d6a:	26 81       	ldd	r18, Z+6	; 0x06
    1d6c:	37 81       	ldd	r19, Z+7	; 0x07
    1d6e:	2f 5f       	subi	r18, 0xFF	; 255
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	37 83       	std	Z+7, r19	; 0x07
    1d74:	26 83       	std	Z+6, r18	; 0x06
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <fputc+0x6e>
    1d78:	8b 01       	movw	r16, r22
    1d7a:	ec 01       	movw	r28, r24
    1d7c:	fb 01       	movw	r30, r22
    1d7e:	00 84       	ldd	r0, Z+8	; 0x08
    1d80:	f1 85       	ldd	r31, Z+9	; 0x09
    1d82:	e0 2d       	mov	r30, r0
    1d84:	09 95       	icall
    1d86:	89 2b       	or	r24, r25
    1d88:	e1 f6       	brne	.-72     	; 0x1d42 <fputc+0x10>
    1d8a:	d8 01       	movw	r26, r16
    1d8c:	16 96       	adiw	r26, 0x06	; 6
    1d8e:	8d 91       	ld	r24, X+
    1d90:	9c 91       	ld	r25, X
    1d92:	17 97       	sbiw	r26, 0x07	; 7
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	17 96       	adiw	r26, 0x07	; 7
    1d98:	9c 93       	st	X, r25
    1d9a:	8e 93       	st	-X, r24
    1d9c:	16 97       	sbiw	r26, 0x06	; 6
    1d9e:	ce 01       	movw	r24, r28
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	08 95       	ret

00001daa <__ultoa_invert>:
    1daa:	fa 01       	movw	r30, r20
    1dac:	aa 27       	eor	r26, r26
    1dae:	28 30       	cpi	r18, 0x08	; 8
    1db0:	51 f1       	breq	.+84     	; 0x1e06 <__ultoa_invert+0x5c>
    1db2:	20 31       	cpi	r18, 0x10	; 16
    1db4:	81 f1       	breq	.+96     	; 0x1e16 <__ultoa_invert+0x6c>
    1db6:	e8 94       	clt
    1db8:	6f 93       	push	r22
    1dba:	6e 7f       	andi	r22, 0xFE	; 254
    1dbc:	6e 5f       	subi	r22, 0xFE	; 254
    1dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	af 4f       	sbci	r26, 0xFF	; 255
    1dc6:	b1 e0       	ldi	r27, 0x01	; 1
    1dc8:	3e d0       	rcall	.+124    	; 0x1e46 <__ultoa_invert+0x9c>
    1dca:	b4 e0       	ldi	r27, 0x04	; 4
    1dcc:	3c d0       	rcall	.+120    	; 0x1e46 <__ultoa_invert+0x9c>
    1dce:	67 0f       	add	r22, r23
    1dd0:	78 1f       	adc	r23, r24
    1dd2:	89 1f       	adc	r24, r25
    1dd4:	9a 1f       	adc	r25, r26
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	68 0f       	add	r22, r24
    1dda:	79 1f       	adc	r23, r25
    1ddc:	8a 1f       	adc	r24, r26
    1dde:	91 1d       	adc	r25, r1
    1de0:	a1 1d       	adc	r26, r1
    1de2:	6a 0f       	add	r22, r26
    1de4:	71 1d       	adc	r23, r1
    1de6:	81 1d       	adc	r24, r1
    1de8:	91 1d       	adc	r25, r1
    1dea:	a1 1d       	adc	r26, r1
    1dec:	20 d0       	rcall	.+64     	; 0x1e2e <__ultoa_invert+0x84>
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <__ultoa_invert+0x48>
    1df0:	68 94       	set
    1df2:	3f 91       	pop	r19
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	26 9f       	mul	r18, r22
    1df8:	11 24       	eor	r1, r1
    1dfa:	30 19       	sub	r19, r0
    1dfc:	30 5d       	subi	r19, 0xD0	; 208
    1dfe:	31 93       	st	Z+, r19
    1e00:	de f6       	brtc	.-74     	; 0x1db8 <__ultoa_invert+0xe>
    1e02:	cf 01       	movw	r24, r30
    1e04:	08 95       	ret
    1e06:	46 2f       	mov	r20, r22
    1e08:	47 70       	andi	r20, 0x07	; 7
    1e0a:	40 5d       	subi	r20, 0xD0	; 208
    1e0c:	41 93       	st	Z+, r20
    1e0e:	b3 e0       	ldi	r27, 0x03	; 3
    1e10:	0f d0       	rcall	.+30     	; 0x1e30 <__ultoa_invert+0x86>
    1e12:	c9 f7       	brne	.-14     	; 0x1e06 <__ultoa_invert+0x5c>
    1e14:	f6 cf       	rjmp	.-20     	; 0x1e02 <__ultoa_invert+0x58>
    1e16:	46 2f       	mov	r20, r22
    1e18:	4f 70       	andi	r20, 0x0F	; 15
    1e1a:	40 5d       	subi	r20, 0xD0	; 208
    1e1c:	4a 33       	cpi	r20, 0x3A	; 58
    1e1e:	18 f0       	brcs	.+6      	; 0x1e26 <__ultoa_invert+0x7c>
    1e20:	49 5d       	subi	r20, 0xD9	; 217
    1e22:	31 fd       	sbrc	r19, 1
    1e24:	40 52       	subi	r20, 0x20	; 32
    1e26:	41 93       	st	Z+, r20
    1e28:	02 d0       	rcall	.+4      	; 0x1e2e <__ultoa_invert+0x84>
    1e2a:	a9 f7       	brne	.-22     	; 0x1e16 <__ultoa_invert+0x6c>
    1e2c:	ea cf       	rjmp	.-44     	; 0x1e02 <__ultoa_invert+0x58>
    1e2e:	b4 e0       	ldi	r27, 0x04	; 4
    1e30:	a6 95       	lsr	r26
    1e32:	97 95       	ror	r25
    1e34:	87 95       	ror	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	ba 95       	dec	r27
    1e3c:	c9 f7       	brne	.-14     	; 0x1e30 <__ultoa_invert+0x86>
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	61 05       	cpc	r22, r1
    1e42:	71 05       	cpc	r23, r1
    1e44:	08 95       	ret
    1e46:	9b 01       	movw	r18, r22
    1e48:	ac 01       	movw	r20, r24
    1e4a:	0a 2e       	mov	r0, r26
    1e4c:	06 94       	lsr	r0
    1e4e:	57 95       	ror	r21
    1e50:	47 95       	ror	r20
    1e52:	37 95       	ror	r19
    1e54:	27 95       	ror	r18
    1e56:	ba 95       	dec	r27
    1e58:	c9 f7       	brne	.-14     	; 0x1e4c <__ultoa_invert+0xa2>
    1e5a:	62 0f       	add	r22, r18
    1e5c:	73 1f       	adc	r23, r19
    1e5e:	84 1f       	adc	r24, r20
    1e60:	95 1f       	adc	r25, r21
    1e62:	a0 1d       	adc	r26, r0
    1e64:	08 95       	ret

00001e66 <__muluhisi3>:
    1e66:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__umulhisi3>
    1e6a:	a5 9f       	mul	r26, r21
    1e6c:	90 0d       	add	r25, r0
    1e6e:	b4 9f       	mul	r27, r20
    1e70:	90 0d       	add	r25, r0
    1e72:	a4 9f       	mul	r26, r20
    1e74:	80 0d       	add	r24, r0
    1e76:	91 1d       	adc	r25, r1
    1e78:	11 24       	eor	r1, r1
    1e7a:	08 95       	ret

00001e7c <__mulshisi3>:
    1e7c:	b7 ff       	sbrs	r27, 7
    1e7e:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__muluhisi3>

00001e82 <__mulohisi3>:
    1e82:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__muluhisi3>
    1e86:	82 1b       	sub	r24, r18
    1e88:	93 0b       	sbc	r25, r19
    1e8a:	08 95       	ret

00001e8c <__prologue_saves__>:
    1e8c:	2f 92       	push	r2
    1e8e:	3f 92       	push	r3
    1e90:	4f 92       	push	r4
    1e92:	5f 92       	push	r5
    1e94:	6f 92       	push	r6
    1e96:	7f 92       	push	r7
    1e98:	8f 92       	push	r8
    1e9a:	9f 92       	push	r9
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	ca 1b       	sub	r28, r26
    1eb6:	db 0b       	sbc	r29, r27
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	09 94       	ijmp

00001ec4 <__epilogue_restores__>:
    1ec4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec6:	39 88       	ldd	r3, Y+17	; 0x11
    1ec8:	48 88       	ldd	r4, Y+16	; 0x10
    1eca:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ecc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ece:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ed8:	c8 84       	ldd	r12, Y+8	; 0x08
    1eda:	df 80       	ldd	r13, Y+7	; 0x07
    1edc:	ee 80       	ldd	r14, Y+6	; 0x06
    1ede:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee8:	ce 0f       	add	r28, r30
    1eea:	d1 1d       	adc	r29, r1
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	ed 01       	movw	r28, r26
    1ef8:	08 95       	ret

00001efa <__umulhisi3>:
    1efa:	a2 9f       	mul	r26, r18
    1efc:	b0 01       	movw	r22, r0
    1efe:	b3 9f       	mul	r27, r19
    1f00:	c0 01       	movw	r24, r0
    1f02:	a3 9f       	mul	r26, r19
    1f04:	70 0d       	add	r23, r0
    1f06:	81 1d       	adc	r24, r1
    1f08:	11 24       	eor	r1, r1
    1f0a:	91 1d       	adc	r25, r1
    1f0c:	b2 9f       	mul	r27, r18
    1f0e:	70 0d       	add	r23, r0
    1f10:	81 1d       	adc	r24, r1
    1f12:	11 24       	eor	r1, r1
    1f14:	91 1d       	adc	r25, r1
    1f16:	08 95       	ret

00001f18 <_exit>:
    1f18:	f8 94       	cli

00001f1a <__stop_program>:
    1f1a:	ff cf       	rjmp	.-2      	; 0x1f1a <__stop_program>
